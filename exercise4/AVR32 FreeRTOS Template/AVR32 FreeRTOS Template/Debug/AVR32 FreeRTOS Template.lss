
AVR32 FreeRTOS Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000089bc  80002024  80002024  00002424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  8000aa00  8000aa00  0000ae00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  8000ac00  8000ac00  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       0000068c  8000ac18  8000ac18  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000004  8000b2a4  8000b2a4  0000b6a4  2**0
                  ALLOC
  8 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  9 .ctors        00000008  00000008  8000b2a8  0000b808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000010  8000b2b0  0000b810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  00000018  8000b2b8  0000b818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          0000000c  0000001c  8000b2bc  0000b81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         000005d8  00000028  8000b2c8  0000b828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00000430  00000600  00000600  00000000  2**2
                  ALLOC
 15 .heap         0000e5d0  00000a30  00000a30  00000000  2**0
                  ALLOC
 16 .comment      00000030  00000000  00000000  0000be00  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 00000ff8  00000000  00000000  0000be30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_pubnames 00001df2  00000000  00000000  0000ce28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_info   0002f4a2  00000000  00000000  0000ec1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006477  00000000  00000000  0003e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00013191  00000000  00000000  00044533  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  000026bc  00000000  00000000  000576c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00008d90  00000000  00000000  00059d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    0000aace  00000000  00000000  00062b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_macinfo 014ad906  00000000  00000000  0006d5de  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 27 .debug_ranges 00001188  00000000  00000000  0151aee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	48 1f       	lddpc	pc,80002004 <program_start+0x4>
80002002:	00 00       	add	r0,r0
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	20 24       	sub	r4,2

Disassembly of section .init:

80002008 <_init>:
80002008:	eb cd 40 40 	pushm	r6,lr
8000200c:	48 26       	lddpc	r6,80002014 <_init+0xc>
8000200e:	1e 26       	rsub	r6,pc
80002010:	c0 48       	rjmp	80002018 <_init+0x10>
80002012:	00 00       	add	r0,r0
80002014:	80 00       	ld.sh	r0,r0[0x0]
80002016:	1f f2       	ld.ub	r2,pc[0x7]
80002018:	f0 16 00 01 	mcall	r6[4]
8000201c:	f0 16 00 00 	mcall	r6[0]
80002020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002024 <_stext>:
80002024:	30 07       	mov	r7,0
80002026:	49 5a       	lddpc	r10,80002078 <_stext+0x54>
80002028:	5b fa       	cp.w	r10,-1
8000202a:	f4 0d 17 10 	movne	sp,r10
8000202e:	49 4b       	lddpc	r11,8000207c <_stext+0x58>
80002030:	49 4c       	lddpc	r12,80002080 <_stext+0x5c>
80002032:	18 3b       	cp.w	r11,r12
80002034:	c0 60       	breq	80002040 <_stext+0x1c>
80002036:	49 4a       	lddpc	r10,80002084 <_stext+0x60>
80002038:	b7 09       	ld.d	r8,r11++
8000203a:	b9 28       	st.d	r12++,r8
8000203c:	14 3c       	cp.w	r12,r10
8000203e:	cf d5       	brlt	80002038 <_stext+0x14>
80002040:	49 2a       	lddpc	r10,80002088 <_stext+0x64>
80002042:	49 1c       	lddpc	r12,80002084 <_stext+0x60>
80002044:	30 08       	mov	r8,0
80002046:	30 09       	mov	r9,0
80002048:	b9 28       	st.d	r12++,r8
8000204a:	14 3c       	cp.w	r12,r10
8000204c:	cf e5       	brlt	80002048 <_stext+0x24>
8000204e:	f0 1f 00 10 	mcall	8000208c <_stext+0x68>
80002052:	49 0c       	lddpc	r12,80002090 <_stext+0x6c>
80002054:	f0 1f 00 10 	mcall	80002094 <_stext+0x70>
80002058:	f0 1f 00 10 	mcall	80002098 <_stext+0x74>
8000205c:	1a 9c       	mov	r12,sp
8000205e:	30 0b       	mov	r11,0
80002060:	f0 1f 00 0f 	mcall	8000209c <_stext+0x78>
80002064:	5b fc       	cp.w	r12,-1
80002066:	f9 bc 00 00 	moveq	r12,0
8000206a:	f9 ba 00 00 	moveq	r10,0
8000206e:	14 1d       	sub	sp,r10
80002070:	f0 1f 00 0c 	mcall	800020a0 <_stext+0x7c>
80002074:	f0 1f 00 0c 	mcall	800020a4 <_stext+0x80>
80002078:	00 01       	add	r1,r0
8000207a:	00 00       	add	r0,r0
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	b2 a8       	st.b	r9[0x2],r8
80002080:	00 00       	add	r0,r0
80002082:	00 08       	add	r8,r0
80002084:	00 00       	add	r0,r0
80002086:	06 00       	add	r0,r3
80002088:	00 00       	add	r0,r0
8000208a:	0a 30       	cp.w	r0,r5
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	42 f0       	lddsp	r0,sp[0xbc]
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	ac 00       	st.h	r6[0x0],r0
80002094:	80 00       	ld.sh	r0,r0[0x0]
80002096:	4a 8c       	lddpc	r12,80002134 <board_init+0x28>
80002098:	80 00       	ld.sh	r0,r0[0x0]
8000209a:	20 08       	sub	r8,0
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	55 3c       	stdsp	sp[0x14c],r12
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	4a 30       	lddpc	r0,8000212c <board_init+0x20>
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	4a a0       	lddpc	r0,8000214c <gpio_configure_pin+0x10>

800020a8 <__do_global_dtors_aux>:
800020a8:	d4 21       	pushm	r4-r7,lr
800020aa:	48 e8       	lddpc	r8,800020e0 <__do_global_dtors_aux+0x38>
800020ac:	11 89       	ld.ub	r9,r8[0x0]
800020ae:	30 08       	mov	r8,0
800020b0:	f0 09 18 00 	cp.b	r9,r8
800020b4:	c1 41       	brne	800020dc <__do_global_dtors_aux+0x34>
800020b6:	48 c8       	lddpc	r8,800020e4 <__do_global_dtors_aux+0x3c>
800020b8:	48 c6       	lddpc	r6,800020e8 <__do_global_dtors_aux+0x40>
800020ba:	10 95       	mov	r5,r8
800020bc:	10 16       	sub	r6,r8
800020be:	48 c7       	lddpc	r7,800020ec <__do_global_dtors_aux+0x44>
800020c0:	a3 46       	asr	r6,0x2
800020c2:	20 16       	sub	r6,1
800020c4:	c0 68       	rjmp	800020d0 <__do_global_dtors_aux+0x28>
800020c6:	2f f8       	sub	r8,-1
800020c8:	8f 08       	st.w	r7[0x0],r8
800020ca:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020ce:	5d 18       	icall	r8
800020d0:	6e 08       	ld.w	r8,r7[0x0]
800020d2:	0c 38       	cp.w	r8,r6
800020d4:	cf 93       	brcs	800020c6 <__do_global_dtors_aux+0x1e>
800020d6:	30 19       	mov	r9,1
800020d8:	48 28       	lddpc	r8,800020e0 <__do_global_dtors_aux+0x38>
800020da:	b0 89       	st.b	r8[0x0],r9
800020dc:	d8 22       	popm	r4-r7,pc
800020de:	00 00       	add	r0,r0
800020e0:	00 00       	add	r0,r0
800020e2:	06 00       	add	r0,r3
800020e4:	00 00       	add	r0,r0
800020e6:	00 10       	sub	r0,r0
800020e8:	00 00       	add	r0,r0
800020ea:	00 14       	sub	r4,r0
800020ec:	00 00       	add	r0,r0
800020ee:	06 04       	add	r4,r3

800020f0 <frame_dummy>:
800020f0:	d4 01       	pushm	lr
800020f2:	48 5c       	lddpc	r12,80002104 <frame_dummy+0x14>
800020f4:	78 08       	ld.w	r8,r12[0x0]
800020f6:	58 08       	cp.w	r8,0
800020f8:	c0 50       	breq	80002102 <frame_dummy+0x12>
800020fa:	48 48       	lddpc	r8,80002108 <frame_dummy+0x18>
800020fc:	58 08       	cp.w	r8,0
800020fe:	c0 20       	breq	80002102 <frame_dummy+0x12>
80002100:	5d 18       	icall	r8
80002102:	d8 02       	popm	pc
80002104:	00 00       	add	r0,r0
80002106:	00 18       	sub	r8,r0
80002108:	00 00       	add	r0,r0
	...

8000210c <board_init>:
#endif



void board_init (void)
{
8000210c:	d4 01       	pushm	lr
    gpio_configure_pin (LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000210e:	30 3b       	mov	r11,3
80002110:	32 3c       	mov	r12,35
80002112:	f0 1f 00 0a 	mcall	80002138 <board_init+0x2c>
    gpio_configure_pin (LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002116:	30 3b       	mov	r11,3
80002118:	34 9c       	mov	r12,73
8000211a:	f0 1f 00 08 	mcall	80002138 <board_init+0x2c>
    gpio_configure_pin (LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000211e:	30 3b       	mov	r11,3
80002120:	32 2c       	mov	r12,34
80002122:	f0 1f 00 06 	mcall	80002138 <board_init+0x2c>
    gpio_configure_pin (LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002126:	30 3b       	mov	r11,3
80002128:	32 6c       	mov	r12,38
8000212a:	f0 1f 00 04 	mcall	80002138 <board_init+0x2c>

    gpio_configure_pin (GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
8000212e:	30 4b       	mov	r11,4
80002130:	32 1c       	mov	r12,33
80002132:	f0 1f 00 02 	mcall	80002138 <board_init+0x2c>
     * the platform Xplained board has configured basic clock settings,
     * GPIO pin mapping, interrupt controller options, etc.
     */
    sensor_board_init ();
#endif
}
80002136:	d8 02       	popm	pc
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	21 3c       	sub	r12,19

8000213c <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
8000213c:	f8 08 16 05 	lsr	r8,r12,0x5
80002140:	a9 68       	lsl	r8,0x8
80002142:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002146:	16 99       	mov	r9,r11
80002148:	e2 19 00 04 	andl	r9,0x4,COH
8000214c:	c0 70       	breq	8000215a <gpio_configure_pin+0x1e>
            gpio_port->puers = 1 << (pin & 0x1F);
8000214e:	30 19       	mov	r9,1
80002150:	f2 0c 09 49 	lsl	r9,r9,r12
80002154:	f1 49 00 74 	st.w	r8[116],r9
80002158:	c0 68       	rjmp	80002164 <gpio_configure_pin+0x28>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
8000215a:	30 19       	mov	r9,1
8000215c:	f2 0c 09 49 	lsl	r9,r9,r12
80002160:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80002164:	16 99       	mov	r9,r11
80002166:	e2 19 00 80 	andl	r9,0x80,COH
8000216a:	c2 40       	breq	800021b2 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
8000216c:	16 99       	mov	r9,r11
8000216e:	e2 19 01 80 	andl	r9,0x180,COH
80002172:	c0 90       	breq	80002184 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002174:	30 19       	mov	r9,1
80002176:	f2 0c 09 49 	lsl	r9,r9,r12
8000217a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000217e:	f1 49 00 b8 	st.w	r8[184],r9
80002182:	c1 88       	rjmp	800021b2 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_RISING)
80002184:	16 99       	mov	r9,r11
80002186:	e2 19 02 80 	andl	r9,0x280,COH
8000218a:	c0 90       	breq	8000219c <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
8000218c:	30 19       	mov	r9,1
8000218e:	f2 0c 09 49 	lsl	r9,r9,r12
80002192:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002196:	f1 49 00 b8 	st.w	r8[184],r9
8000219a:	c0 c8       	rjmp	800021b2 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
8000219c:	16 99       	mov	r9,r11
8000219e:	e2 19 03 80 	andl	r9,0x380,COH
800021a2:	c0 80       	breq	800021b2 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800021a4:	30 19       	mov	r9,1
800021a6:	f2 0c 09 49 	lsl	r9,r9,r12
800021aa:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
800021ae:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800021b2:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
800021b6:	c1 50       	breq	800021e0 <gpio_configure_pin+0xa4>
            if (flags & GPIO_INIT_HIGH)
800021b8:	e2 1b 00 02 	andl	r11,0x2,COH
800021bc:	c0 70       	breq	800021ca <gpio_configure_pin+0x8e>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800021be:	30 19       	mov	r9,1
800021c0:	f2 0c 09 49 	lsl	r9,r9,r12
800021c4:	f1 49 00 54 	st.w	r8[84],r9
800021c8:	c0 68       	rjmp	800021d4 <gpio_configure_pin+0x98>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800021ca:	30 19       	mov	r9,1
800021cc:	f2 0c 09 49 	lsl	r9,r9,r12
800021d0:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800021d4:	30 19       	mov	r9,1
800021d6:	f2 0c 09 49 	lsl	r9,r9,r12
800021da:	f1 49 00 44 	st.w	r8[68],r9
800021de:	c0 68       	rjmp	800021ea <gpio_configure_pin+0xae>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800021e0:	30 19       	mov	r9,1
800021e2:	f2 0c 09 49 	lsl	r9,r9,r12
800021e6:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800021ea:	30 19       	mov	r9,1
800021ec:	f2 0c 09 4c 	lsl	r12,r9,r12
800021f0:	91 1c       	st.w	r8[0x4],r12
}
800021f2:	5e fc       	retal	r12

800021f4 <gpio_toggle_pin>:
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_toggle_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021f4:	f8 08 16 05 	lsr	r8,r12,0x5
800021f8:	a9 68       	lsl	r8,0x8
800021fa:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
800021fe:	30 19       	mov	r9,1
80002200:	f2 0c 09 4c 	lsl	r12,r9,r12
80002204:	f1 4c 00 5c 	st.w	r8[92],r12
}
80002208:	5e fc       	retal	r12

8000220a <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000220a:	c0 08       	rjmp	8000220a <_unhandled_interrupt>

8000220c <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000220c:	f6 08 16 05 	lsr	r8,r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80002210:	48 99       	lddpc	r9,80002234 <INTC_register_interrupt+0x28>
80002212:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002216:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000221a:	72 19       	ld.w	r9,r9[0x4]
8000221c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80002220:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80002224:	48 59       	lddpc	r9,80002238 <INTC_register_interrupt+0x2c>
80002226:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000222a:	fe 79 08 00 	mov	r9,-63488
8000222e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002232:	5e fc       	retal	r12
80002234:	80 00       	ld.sh	r0,r0[0x0]
80002236:	ac 18       	st.h	r6[0x2],r8
80002238:	80 00       	ld.sh	r0,r0[0x0]
8000223a:	ab 3c       	mul	r12,r5

8000223c <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
8000223c:	d4 21       	pushm	r4-r7,lr
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
8000223e:	49 18       	lddpc	r8,80002280 <INTC_init_interrupts+0x44>
80002240:	e3 b8 00 01 	mtsr	0x4,r8
80002244:	49 0e       	lddpc	lr,80002284 <INTC_init_interrupts+0x48>
80002246:	30 07       	mov	r7,0
80002248:	0e 94       	mov	r4,r7
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000224a:	49 0c       	lddpc	r12,80002288 <INTC_init_interrupts+0x4c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
8000224c:	49 08       	lddpc	r8,8000228c <INTC_init_interrupts+0x50>
8000224e:	70 05       	ld.w	r5,r8[0x0]
80002250:	fe 76 08 00 	mov	r6,-63488
80002254:	c1 08       	rjmp	80002274 <INTC_init_interrupts+0x38>
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002256:	08 98       	mov	r8,r4
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002258:	7c 1b       	ld.w	r11,lr[0x4]

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
8000225a:	7c 0a       	ld.w	r10,lr[0x0]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000225c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002260:	2f f8       	sub	r8,-1
80002262:	10 3a       	cp.w	r10,r8
80002264:	fe 9b ff fc 	brhi	8000225c <INTC_init_interrupts+0x20>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002268:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000226c:	2f f7       	sub	r7,-1
8000226e:	2f 8e       	sub	lr,-8
80002270:	59 e7       	cp.w	r7,30
80002272:	c0 50       	breq	8000227c <INTC_init_interrupts+0x40>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002274:	7c 08       	ld.w	r8,lr[0x0]
80002276:	58 08       	cp.w	r8,0
80002278:	ce f1       	brne	80002256 <INTC_init_interrupts+0x1a>
8000227a:	cf 7b       	rjmp	80002268 <INTC_init_interrupts+0x2c>
8000227c:	d8 22       	popm	r4-r7,pc
8000227e:	00 00       	add	r0,r0
80002280:	80 00       	ld.sh	r0,r0[0x0]
80002282:	aa 00       	st.h	r5[0x0],r0
80002284:	80 00       	ld.sh	r0,r0[0x0]
80002286:	ac 18       	st.h	r6[0x2],r8
80002288:	80 00       	ld.sh	r0,r0[0x0]
8000228a:	22 0a       	sub	r10,32
8000228c:	80 00       	ld.sh	r0,r0[0x0]
8000228e:	ab 3c       	mul	r12,r5

80002290 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002290:	fe 78 08 00 	mov	r8,-63488
80002294:	e0 69 00 83 	mov	r9,131
80002298:	f2 0c 01 0c 	sub	r12,r9,r12
8000229c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
800022a0:	f2 ca ff c0 	sub	r10,r9,-64
800022a4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800022a8:	58 08       	cp.w	r8,0
800022aa:	c0 21       	brne	800022ae <_get_interrupt_handler+0x1e>
800022ac:	5e fd       	retal	0
800022ae:	f0 08 12 00 	clz	r8,r8
800022b2:	48 5a       	lddpc	r10,800022c4 <_get_interrupt_handler+0x34>
800022b4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800022b8:	f0 08 11 1f 	rsub	r8,r8,31
800022bc:	72 19       	ld.w	r9,r9[0x4]
800022be:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
}
800022c2:	5e fc       	retal	r12
800022c4:	80 00       	ld.sh	r0,r0[0x0]
800022c6:	ac 18       	st.h	r6[0x2],r8

800022c8 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800022c8:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800022ca:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800022ce:	99 a8       	st.w	r12[0x28],r8
}
800022d0:	5e fc       	retal	r12
800022d2:	d7 03       	nop

800022d4 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
800022d4:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800022d6:	ec 5b bb 9f 	cp.w	r11,899999
800022da:	e0 8b 00 04 	brhi	800022e2 <pm_enable_osc0_crystal+0xe>
800022de:	30 4b       	mov	r11,4
800022e0:	c1 38       	rjmp	80002306 <pm_enable_osc0_crystal+0x32>
800022e2:	e0 68 c6 bf 	mov	r8,50879
800022e6:	ea 18 00 2d 	orh	r8,0x2d
800022ea:	10 3b       	cp.w	r11,r8
800022ec:	e0 8b 00 04 	brhi	800022f4 <pm_enable_osc0_crystal+0x20>
800022f0:	30 5b       	mov	r11,5
800022f2:	c0 a8       	rjmp	80002306 <pm_enable_osc0_crystal+0x32>
800022f4:	e0 68 12 00 	mov	r8,4608
800022f8:	ea 18 00 7a 	orh	r8,0x7a
800022fc:	10 3b       	cp.w	r11,r8
800022fe:	f9 bb 03 06 	movlo	r11,6
80002302:	f9 bb 02 07 	movhs	r11,7
80002306:	f0 1f 00 02 	mcall	8000230c <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
8000230a:	d8 02       	popm	pc
8000230c:	80 00       	ld.sh	r0,r0[0x0]
8000230e:	22 c8       	sub	r8,44

80002310 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002310:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002312:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002316:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002318:	78 08       	ld.w	r8,r12[0x0]
8000231a:	a3 a8       	sbr	r8,0x2
8000231c:	99 08       	st.w	r12[0x0],r8
}
8000231e:	5e fc       	retal	r12

80002320 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002320:	79 58       	ld.w	r8,r12[0x54]
80002322:	e2 18 00 80 	andl	r8,0x80,COH
80002326:	cf d0       	breq	80002320 <pm_wait_for_clk0_ready>
}
80002328:	5e fc       	retal	r12
8000232a:	d7 03       	nop

8000232c <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
8000232c:	eb cd 40 80 	pushm	r7,lr
80002330:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80002332:	f0 1f 00 04 	mcall	80002340 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002336:	0e 9c       	mov	r12,r7
80002338:	f0 1f 00 03 	mcall	80002344 <pm_enable_clk0+0x18>
}
8000233c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002340:	80 00       	ld.sh	r0,r0[0x0]
80002342:	23 10       	sub	r0,49
80002344:	80 00       	ld.sh	r0,r0[0x0]
80002346:	23 20       	sub	r0,50

80002348 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002348:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
8000234a:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000234e:	99 08       	st.w	r12[0x0],r8
}
80002350:	5e fc       	retal	r12
80002352:	d7 03       	nop

80002354 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002354:	eb cd 40 c0 	pushm	r6-r7,lr
80002358:	18 97       	mov	r7,r12
8000235a:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
8000235c:	f0 1f 00 06 	mcall	80002374 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002360:	0c 9b       	mov	r11,r6
80002362:	0e 9c       	mov	r12,r7
80002364:	f0 1f 00 05 	mcall	80002378 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002368:	30 1b       	mov	r11,1
8000236a:	0e 9c       	mov	r12,r7
8000236c:	f0 1f 00 04 	mcall	8000237c <pm_switch_to_osc0+0x28>
}
80002370:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002374:	80 00       	ld.sh	r0,r0[0x0]
80002376:	22 d4       	sub	r4,45
80002378:	80 00       	ld.sh	r0,r0[0x0]
8000237a:	23 2c       	sub	r12,50
8000237c:	80 00       	ld.sh	r0,r0[0x0]
8000237e:	23 48       	sub	r8,52

80002380 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3C device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80002380:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
80002382:	58 0c       	cp.w	r12,0
80002384:	c0 40       	breq	8000238c <pcl_switch_to_osc+0xc>
80002386:	fe 7c d8 f0 	mov	r12,-10000
8000238a:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
8000238c:	fe 7c 0c 00 	mov	r12,-62464
80002390:	f0 1f 00 02 	mcall	80002398 <pcl_switch_to_osc+0x18>
80002394:	d8 0a       	popm	pc,r12=0
80002396:	00 00       	add	r0,r0
80002398:	80 00       	ld.sh	r0,r0[0x0]
8000239a:	23 54       	sub	r4,53

8000239c <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
8000239c:	5e ff       	retal	1

8000239e <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
8000239e:	5e fd       	retal	0

800023a0 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
800023a0:	fe 68 00 00 	mov	r8,-131072
800023a4:	70 09       	ld.w	r9,r8[0x0]
800023a6:	a7 d9       	cbr	r9,0x7
800023a8:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800023aa:	70 09       	ld.w	r9,r8[0x0]
800023ac:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023b0:	e0 19 ff 80 	andl	r9,0xff80
800023b4:	f9 e9 10 09 	or	r9,r12,r9
800023b8:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800023ba:	70 09       	ld.w	r9,r8[0x0]
800023bc:	a7 b9       	sbr	r9,0x7
800023be:	91 09       	st.w	r8[0x0],r9
}
800023c0:	5e fc       	retal	r12

800023c2 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800023c2:	fe 68 00 00 	mov	r8,-131072
800023c6:	70 0c       	ld.w	r12,r8[0x0]
}
800023c8:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023cc:	5e fc       	retal	r12

800023ce <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800023ce:	fe 68 00 00 	mov	r8,-131072
800023d2:	70 8c       	ld.w	r12,r8[0x20]
}
800023d4:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800023d8:	5e fc       	retal	r12

800023da <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
800023da:	fe 68 00 00 	mov	r8,-131072
800023de:	70 8c       	ld.w	r12,r8[0x20]
}
800023e0:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
800023e4:	5e fc       	retal	r12
800023e6:	d7 03       	nop

800023e8 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
800023e8:	48 28       	lddpc	r8,800023f0 <udd_set_setup_payload+0x8>
800023ea:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
800023ec:	b0 6b       	st.h	r8[0xc],r11
}
800023ee:	5e fc       	retal	r12
800023f0:	00 00       	add	r0,r0
800023f2:	0a 00       	add	r0,r5

800023f4 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
800023f4:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800023f8:	a3 68       	lsl	r8,0x2
800023fa:	e0 38 fe 40 	sub	r8,130624
800023fe:	70 0c       	ld.w	r12,r8[0x0]
}
80002400:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80002404:	5e fc       	retal	r12
80002406:	d7 03       	nop

80002408 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002408:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
8000240c:	30 38       	mov	r8,3
8000240e:	f0 0c 18 00 	cp.b	r12,r8
80002412:	e0 8b 00 35 	brhi	8000247c <udd_ep_set_halt+0x74>
		return false;

	ptr_job = &udd_ep_job[index - 1];
80002416:	18 99       	mov	r9,r12
80002418:	f8 c8 00 01 	sub	r8,r12,1
8000241c:	a5 68       	lsl	r8,0x4
8000241e:	49 9a       	lddpc	r10,80002480 <udd_ep_set_halt+0x78>
80002420:	f4 08 00 08 	add	r8,r10,r8
	if (ptr_job->busy == true) {
80002424:	70 0a       	ld.w	r10,r8[0x0]
80002426:	58 0a       	cp.w	r10,0
80002428:	c2 a5       	brlt	8000247c <udd_ep_set_halt+0x74>
		return false;	// Job on going, stall impossible
	}
	
	if (0 != udd_nb_busy_bank(index)) {
8000242a:	a3 69       	lsl	r9,0x2
8000242c:	fe 6b 01 30 	mov	r11,-130768
80002430:	f2 0b 00 0a 	add	r10,r9,r11
80002434:	74 0a       	ld.w	r10,r10[0x0]
80002436:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
8000243a:	c1 10       	breq	8000245c <udd_ep_set_halt+0x54>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
8000243c:	70 0b       	ld.w	r11,r8[0x0]
8000243e:	30 1a       	mov	r10,1
80002440:	f7 da d3 81 	bfins	r11,r10,0x1c,0x1
80002444:	91 0b       	st.w	r8[0x0],r11
		udd_enable_bank_interrupt(index);
80002446:	e0 39 fe 10 	sub	r9,130576
8000244a:	e0 68 10 00 	mov	r8,4096
8000244e:	93 08       	st.w	r9[0x0],r8
		udd_enable_endpoint_interrupt(index);
80002450:	f0 0c 09 4c 	lsl	r12,r8,r12
80002454:	fe 69 00 00 	mov	r9,-131072
80002458:	93 6c       	st.w	r9[0x18],r12
8000245a:	5e fa       	retal	r10
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
8000245c:	fe 6a 01 00 	mov	r10,-130816
80002460:	f2 0a 00 08 	add	r8,r9,r10
80002464:	70 0a       	ld.w	r10,r8[0x0]
80002466:	a9 da       	cbr	r10,0x9
80002468:	91 0a       	st.w	r8[0x0],r10
		udd_enable_stall_handshake(index);
8000246a:	e0 39 fe 10 	sub	r9,130576
8000246e:	e8 68 00 00 	mov	r8,524288
80002472:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
80002474:	e4 68 00 00 	mov	r8,262144
80002478:	93 08       	st.w	r9[0x0],r8
8000247a:	5e ff       	retal	1
8000247c:	5e fd       	retal	0
8000247e:	00 00       	add	r0,r0
80002480:	00 00       	add	r0,r0
80002482:	07 18       	ld.sh	r8,r3++

80002484 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80002484:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80002486:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
8000248a:	30 38       	mov	r8,3
8000248c:	f0 0c 18 00 	cp.b	r12,r8
80002490:	e0 88 00 03 	brls	80002496 <udd_ep_clear_halt+0x12>
80002494:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
80002496:	f8 c8 00 01 	sub	r8,r12,1
8000249a:	a5 68       	lsl	r8,0x4
8000249c:	49 69       	lddpc	r9,800024f4 <udd_ep_clear_halt+0x70>
8000249e:	f2 08 00 08 	add	r8,r9,r8

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
800024a2:	a3 6c       	lsl	r12,0x2
800024a4:	fe 6a 01 c0 	mov	r10,-130624
800024a8:	f8 0a 00 09 	add	r9,r12,r10
800024ac:	72 09       	ld.w	r9,r9[0x0]
800024ae:	e6 19 00 08 	andh	r9,0x8,COH
800024b2:	c0 51       	brne	800024bc <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
800024b4:	70 09       	ld.w	r9,r8[0x0]
800024b6:	e6 19 10 00 	andh	r9,0x1000,COH
800024ba:	c1 c0       	breq	800024f2 <udd_ep_clear_halt+0x6e>
		// Remove request to stall
		ptr_job->stall_requested = false;
800024bc:	70 09       	ld.w	r9,r8[0x0]
800024be:	30 0a       	mov	r10,0
800024c0:	f3 da d3 81 	bfins	r9,r10,0x1c,0x1
800024c4:	91 09       	st.w	r8[0x0],r9
		// Remove stall
		udd_disable_stall_handshake(ep);
800024c6:	fe 6a 02 20 	mov	r10,-130528
800024ca:	f8 0a 00 09 	add	r9,r12,r10
800024ce:	e8 6a 00 00 	mov	r10,524288
800024d2:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_bank_autoswitch(ep);	
800024d4:	e0 3c ff 00 	sub	r12,130816
800024d8:	78 09       	ld.w	r9,r12[0x0]
800024da:	a9 b9       	sbr	r9,0x9
800024dc:	99 09       	st.w	r12[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
800024de:	70 09       	ld.w	r9,r8[0x0]
800024e0:	58 09       	cp.w	r9,0
800024e2:	c0 84       	brge	800024f2 <udd_ep_clear_halt+0x6e>
			ptr_job->busy = false;
800024e4:	30 0a       	mov	r10,0
800024e6:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
800024ea:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
800024ec:	70 38       	ld.w	r8,r8[0xc]
800024ee:	5d 18       	icall	r8
800024f0:	da 0a       	popm	pc,r12=1
800024f2:	da 0a       	popm	pc,r12=1
800024f4:	00 00       	add	r0,r0
800024f6:	07 18       	ld.sh	r8,r3++

800024f8 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
800024f8:	30 59       	mov	r9,5
800024fa:	48 58       	lddpc	r8,8000250c <udd_ctrl_stall_data+0x14>
800024fc:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
800024fe:	e8 69 00 00 	mov	r9,524288
80002502:	fe 68 01 f0 	mov	r8,-130576
80002506:	91 09       	st.w	r8[0x0],r9
}
80002508:	5e fc       	retal	r12
8000250a:	00 00       	add	r0,r0
8000250c:	00 00       	add	r0,r0
8000250e:	07 4c       	ld.w	r12,--r3

80002510 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80002510:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80002512:	48 48       	lddpc	r8,80002520 <udd_ctrl_endofrequest+0x10>
80002514:	70 48       	ld.w	r8,r8[0x10]
80002516:	58 08       	cp.w	r8,0
80002518:	c0 20       	breq	8000251c <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
8000251a:	5d 18       	icall	r8
8000251c:	d8 02       	popm	pc
8000251e:	00 00       	add	r0,r0
80002520:	00 00       	add	r0,r0
80002522:	0a 00       	add	r0,r5

80002524 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
80002524:	d4 01       	pushm	lr
80002526:	16 99       	mov	r9,r11
	if (ptr_job->busy == false)
80002528:	78 08       	ld.w	r8,r12[0x0]
8000252a:	58 08       	cp.w	r8,0
8000252c:	c0 b4       	brge	80002542 <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
8000252e:	30 0a       	mov	r10,0
80002530:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80002534:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans)
80002536:	78 38       	ld.w	r8,r12[0xc]
80002538:	58 08       	cp.w	r8,0
8000253a:	c0 40       	breq	80002542 <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
8000253c:	78 2b       	ld.w	r11,r12[0x8]
8000253e:	12 9c       	mov	r12,r9
80002540:	5d 18       	icall	r8
80002542:	d8 02       	popm	pc

80002544 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80002544:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
80002546:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000254a:	20 18       	sub	r8,1
8000254c:	a5 68       	lsl	r8,0x4
8000254e:	30 1b       	mov	r11,1
80002550:	48 3c       	lddpc	r12,8000255c <udd_ep_abort_job+0x18>
80002552:	10 0c       	add	r12,r8
80002554:	f0 1f 00 03 	mcall	80002560 <udd_ep_abort_job+0x1c>
}
80002558:	d8 02       	popm	pc
8000255a:	00 00       	add	r0,r0
8000255c:	00 00       	add	r0,r0
8000255e:	07 18       	ld.sh	r8,r3++
80002560:	80 00       	ld.sh	r0,r0[0x0]
80002562:	25 24       	sub	r4,82

80002564 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80002564:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
80002566:	fe 69 00 00 	mov	r9,-131072
8000256a:	72 7b       	ld.w	r11,r9[0x1c]
8000256c:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002570:	30 1a       	mov	r10,1
80002572:	f4 08 09 4a 	lsl	r10,r10,r8
80002576:	5c da       	com	r10
80002578:	16 6a       	and	r10,r11
8000257a:	93 7a       	st.w	r9[0x1c],r10
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
8000257c:	a3 68       	lsl	r8,0x2
8000257e:	e0 38 ff 00 	sub	r8,130816
80002582:	70 09       	ld.w	r9,r8[0x0]
80002584:	a1 d9       	cbr	r9,0x1
80002586:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80002588:	f0 1f 00 02 	mcall	80002590 <udd_ep_free+0x2c>
}
8000258c:	d8 02       	popm	pc
8000258e:	00 00       	add	r0,r0
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	25 44       	sub	r4,84

80002594 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80002594:	eb cd 40 fc 	pushm	r2-r7,lr
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
80002598:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
8000259c:	30 37       	mov	r7,3
8000259e:	ee 0e 18 00 	cp.b	lr,r7
800025a2:	e0 8b 00 99 	brhi	800026d4 <udd_ep_run+0x140>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025a6:	fe 67 00 00 	mov	r7,-131072
800025aa:	6e 76       	ld.w	r6,r7[0x1c]
800025ac:	1c 95       	mov	r5,lr
800025ae:	30 17       	mov	r7,1
800025b0:	ee 0e 09 47 	lsl	r7,r7,lr
800025b4:	0c 67       	and	r7,r6
800025b6:	e0 80 00 8f 	breq	800026d4 <udd_ep_run+0x140>
			|| Is_udd_endpoint_stall_requested(ep)
800025ba:	fc 06 15 02 	lsl	r6,lr,0x2
800025be:	fe 64 01 c0 	mov	r4,-130624
800025c2:	ec 04 00 07 	add	r7,r6,r4
800025c6:	6e 07       	ld.w	r7,r7[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025c8:	e6 17 00 08 	andh	r7,0x8,COH
800025cc:	e0 81 00 84 	brne	800026d4 <udd_ep_run+0x140>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
800025d0:	fc c7 00 01 	sub	r7,lr,1
800025d4:	a5 67       	lsl	r7,0x4
800025d6:	4c 14       	lddpc	r4,800026d8 <udd_ep_run+0x144>
800025d8:	e8 07 00 07 	add	r7,r4,r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
800025dc:	6e 04       	ld.w	r4,r7[0x0]
800025de:	e6 14 10 00 	andh	r4,0x1000,COH
800025e2:	c7 91       	brne	800026d4 <udd_ep_run+0x140>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025e4:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
800025e8:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
800025ea:	6e 03       	ld.w	r3,r7[0x0]
800025ec:	58 03       	cp.w	r3,0
800025ee:	c0 54       	brge	800025f8 <udd_ep_run+0x64>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800025f0:	e3 b4 00 00 	mtsr	0x0,r4
#endif
	barrier();
800025f4:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
800025f8:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
800025fc:	6e 03       	ld.w	r3,r7[0x0]
800025fe:	30 12       	mov	r2,1
80002600:	e7 d2 d3 e1 	bfins	r3,r2,0x1f,0x1
80002604:	8f 03       	st.w	r7[0x0],r3
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002606:	e3 b4 00 00 	mtsr	0x0,r4
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
8000260a:	8f 1a       	st.w	r7[0x4],r10
	ptr_job->call_trans = callback;
8000260c:	8f 38       	st.w	r7[0xc],r8
	ptr_job->b_raise_dma = false;
8000260e:	6e 08       	ld.w	r8,r7[0x0]
80002610:	30 04       	mov	r4,0
80002612:	f1 d4 d3 a1 	bfins	r8,r4,0x1d,0x1
80002616:	8f 08       	st.w	r7[0x0],r8

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
80002618:	e0 49 ff ff 	cp.w	r9,65535
8000261c:	e0 88 00 07 	brls	8000262a <udd_ep_run+0x96>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
80002620:	e0 78 00 00 	mov	r8,65536
80002624:	8f 28       	st.w	r7[0x8],r8
80002626:	08 99       	mov	r9,r4
80002628:	c3 58       	rjmp	80002692 <udd_ep_run+0xfe>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
8000262a:	8f 29       	st.w	r7[0x8],r9
		if (b_dir_in) {
8000262c:	58 0c       	cp.w	r12,0
8000262e:	c3 20       	breq	80002692 <udd_ep_run+0xfe>
			if (buf_size==0) {
80002630:	58 09       	cp.w	r9,0
80002632:	c1 71       	brne	80002660 <udd_ep_run+0xcc>
				// The USB DMA can't send a empty buffer
				// thus we raise the DMA interrupt end of transfert 
				// to execute ZLP process
				ptr_job->b_raise_dma = true;
80002634:	6e 08       	ld.w	r8,r7[0x0]
80002636:	30 1c       	mov	r12,1
				ptr_job->b_send_zlp = true;
80002638:	bd b8       	sbr	r8,0x1d
8000263a:	f1 dc d3 c1 	bfins	r8,r12,0x1e,0x1
8000263e:	8f 08       	st.w	r7[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002640:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002644:	d3 03       	ssrf	0x10
				flags = cpu_irq_save();
				udd_enable_endpoint_dma_interrupt(ep);
80002646:	20 15       	sub	r5,1
80002648:	fc 19 02 00 	movh	r9,0x200
8000264c:	f2 05 09 49 	lsl	r9,r9,r5
80002650:	fe 68 00 00 	mov	r8,-131072
80002654:	91 69       	st.w	r8[0x18],r9
				udd_raise_endpoint_dma_interrupt(ep);
80002656:	91 39       	st.w	r8[0xc],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002658:	e3 ba 00 00 	mtsr	0x0,r10
				cpu_irq_restore(flags);
				return true;
8000265c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
			}
			if (0 != buf_size % udd_get_endpoint_size(ep)) {
80002660:	e0 36 ff 00 	sub	r6,130816
80002664:	6c 08       	ld.w	r8,r6[0x0]
80002666:	f1 d8 c0 83 	bfextu	r8,r8,0x4,0x3
8000266a:	30 86       	mov	r6,8
8000266c:	ec 08 09 48 	lsl	r8,r6,r8
80002670:	20 18       	sub	r8,1
80002672:	12 68       	and	r8,r9
80002674:	c0 b0       	breq	8000268a <udd_ep_run+0xf6>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
80002676:	6e 08       	ld.w	r8,r7[0x0]
80002678:	30 0b       	mov	r11,0
8000267a:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
8000267e:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
80002680:	a5 6e       	lsl	lr,0x4
80002682:	e0 3e fd 00 	sub	lr,130304
80002686:	9d 1a       	st.w	lr[0x4],r10
80002688:	c1 18       	rjmp	800026aa <udd_ep_run+0x116>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
			}else{
				ptr_job->b_send_zlp = b_shortpacket;
8000268a:	6e 08       	ld.w	r8,r7[0x0]
8000268c:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
80002690:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
80002692:	a5 6e       	lsl	lr,0x4
80002694:	e0 3e fd 00 	sub	lr,130304
80002698:	9d 1a       	st.w	lr[0x4],r10
	if (b_shortpacket) {
8000269a:	58 0b       	cp.w	r11,0
8000269c:	c0 31       	brne	800026a2 <udd_ep_run+0x10e>
8000269e:	30 08       	mov	r8,0
800026a0:	c0 68       	rjmp	800026ac <udd_ep_run+0x118>
		if (b_dir_in) {
800026a2:	58 0c       	cp.w	r12,0
800026a4:	c0 31       	brne	800026aa <udd_ep_run+0x116>
800026a6:	31 48       	mov	r8,20
800026a8:	c0 28       	rjmp	800026ac <udd_ep_run+0x118>
800026aa:	30 88       	mov	r8,8
		} else {
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
800026ac:	e8 18 00 21 	orl	r8,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800026b0:	f1 e9 11 09 	or	r9,r8,r9<<0x10
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
800026b4:	9d 29       	st.w	lr[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026b6:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800026ba:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
800026bc:	20 15       	sub	r5,1
800026be:	fc 19 02 00 	movh	r9,0x200
800026c2:	f2 05 09 45 	lsl	r5,r9,r5
800026c6:	fe 69 00 00 	mov	r9,-131072
800026ca:	93 65       	st.w	r9[0x18],r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800026cc:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
800026d0:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
	cpu_irq_restore(flags);

	return true;
800026d4:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800026d8:	00 00       	add	r0,r0
800026da:	07 18       	ld.sh	r8,r3++

800026dc <udd_sleep_mode>:
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
800026dc:	58 0c       	cp.w	r12,0
800026de:	c1 11       	brne	80002700 <udd_sleep_mode+0x24>
800026e0:	49 18       	lddpc	r8,80002724 <udd_sleep_mode+0x48>
800026e2:	11 89       	ld.ub	r9,r8[0x0]
800026e4:	30 08       	mov	r8,0
800026e6:	f0 09 18 00 	cp.b	r9,r8
800026ea:	c1 a0       	breq	8000271e <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026ec:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800026f0:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800026f2:	48 e8       	lddpc	r8,80002728 <udd_sleep_mode+0x4c>
800026f4:	11 9a       	ld.ub	r10,r8[0x1]
800026f6:	2f fa       	sub	r10,-1
800026f8:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800026fa:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
800026fe:	c1 08       	rjmp	8000271e <udd_sleep_mode+0x42>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80002700:	48 98       	lddpc	r8,80002724 <udd_sleep_mode+0x48>
80002702:	11 89       	ld.ub	r9,r8[0x0]
80002704:	30 08       	mov	r8,0
80002706:	f0 09 18 00 	cp.b	r9,r8
8000270a:	c0 a1       	brne	8000271e <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000270c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002710:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80002712:	48 68       	lddpc	r8,80002728 <udd_sleep_mode+0x4c>
80002714:	11 9a       	ld.ub	r10,r8[0x1]
80002716:	20 1a       	sub	r10,1
80002718:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000271a:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
8000271e:	48 28       	lddpc	r8,80002724 <udd_sleep_mode+0x48>
80002720:	b0 8c       	st.b	r8[0x0],r12
}
80002722:	5e fc       	retal	r12
80002724:	00 00       	add	r0,r0
80002726:	07 48       	ld.w	r8,--r3
80002728:	00 00       	add	r0,r0
8000272a:	0a 18       	sub	r8,r5

8000272c <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
8000272c:	d4 01       	pushm	lr
	otg_unfreeze_clock();
8000272e:	fe 68 00 00 	mov	r8,-131072
80002732:	f0 f9 08 00 	ld.w	r9,r8[2048]
80002736:	af c9       	cbr	r9,0xe
80002738:	f1 49 08 00 	st.w	r8[2048],r9
	// Detach device from the bus
	udd_detach_device();
8000273c:	70 09       	ld.w	r9,r8[0x0]
8000273e:	a9 a9       	sbr	r9,0x8
80002740:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80002742:	30 0c       	mov	r12,0
80002744:	f0 1f 00 02 	mcall	8000274c <udd_detach+0x20>
}
80002748:	d8 02       	popm	pc
8000274a:	00 00       	add	r0,r0
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	26 dc       	sub	r12,109

80002750 <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002750:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002754:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002756:	30 1a       	mov	r10,1
80002758:	fe 69 02 20 	mov	r9,-130528
8000275c:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000275e:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80002762:	30 29       	mov	r9,2
80002764:	fe 68 01 60 	mov	r8,-130720
80002768:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
8000276a:	48 59       	lddpc	r9,8000277c <udd_ctrl_init+0x2c>
8000276c:	30 08       	mov	r8,0
8000276e:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80002770:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
80002772:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80002774:	48 39       	lddpc	r9,80002780 <udd_ctrl_init+0x30>
80002776:	93 08       	st.w	r9[0x0],r8
}
80002778:	5e fc       	retal	r12
8000277a:	00 00       	add	r0,r0
8000277c:	00 00       	add	r0,r0
8000277e:	0a 00       	add	r0,r5
80002780:	00 00       	add	r0,r0
80002782:	07 4c       	ld.w	r12,--r3

80002784 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002784:	30 39       	mov	r9,3
80002786:	48 a8       	lddpc	r8,800027ac <udd_ctrl_send_zlp_in+0x28>
80002788:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000278a:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
8000278e:	d3 03       	ssrf	0x10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80002790:	fe 6a 01 60 	mov	r10,-130720
80002794:	30 19       	mov	r9,1
80002796:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
80002798:	fe 68 01 f0 	mov	r8,-130576
8000279c:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
8000279e:	30 89       	mov	r9,8
800027a0:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800027a2:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027a4:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
800027a8:	5e fc       	retal	r12
800027aa:	00 00       	add	r0,r0
800027ac:	00 00       	add	r0,r0
800027ae:	07 4c       	ld.w	r12,--r3

800027b0 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
800027b0:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027b4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800027b8:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
800027ba:	30 1a       	mov	r10,1
800027bc:	fe 69 02 20 	mov	r9,-130528
800027c0:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027c2:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800027c6:	4c 38       	lddpc	r8,800028d0 <udd_ctrl_in_sent+0x120>
800027c8:	70 08       	ld.w	r8,r8[0x0]
800027ca:	58 38       	cp.w	r8,3
800027cc:	c0 71       	brne	800027da <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
800027ce:	f0 1f 00 42 	mcall	800028d4 <udd_ctrl_in_sent+0x124>
		// Reinitializes control endpoint management
		udd_ctrl_init();
800027d2:	f0 1f 00 42 	mcall	800028d8 <udd_ctrl_in_sent+0x128>
		return;
800027d6:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
800027da:	4c 18       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x12c>
800027dc:	90 68       	ld.sh	r8,r8[0xc]
800027de:	4c 19       	lddpc	r9,800028e0 <udd_ctrl_in_sent+0x130>
800027e0:	92 07       	ld.sh	r7,r9[0x0]
800027e2:	f0 07 01 07 	sub	r7,r8,r7
800027e6:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
800027e8:	c3 b1       	brne	8000285e <udd_ctrl_in_sent+0xae>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
800027ea:	4b f9       	lddpc	r9,800028e4 <udd_ctrl_in_sent+0x134>
800027ec:	13 8a       	ld.ub	r10,r9[0x0]
800027ee:	30 09       	mov	r9,0
800027f0:	f2 0a 18 00 	cp.b	r10,r9
800027f4:	c1 21       	brne	80002818 <udd_ctrl_in_sent+0x68>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800027f6:	30 49       	mov	r9,4
800027f8:	4b 68       	lddpc	r8,800028d0 <udd_ctrl_in_sent+0x120>
800027fa:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027fc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002800:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80002802:	31 08       	mov	r8,16
80002804:	fe 6a 01 60 	mov	r10,-130720
80002808:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
8000280a:	fe 6a 01 f0 	mov	r10,-130576
8000280e:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002810:	e3 b9 00 00 	mtsr	0x0,r9
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80002814:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002818:	4b 19       	lddpc	r9,800028dc <udd_ctrl_in_sent+0x12c>
8000281a:	92 b9       	ld.uh	r9,r9[0x6]
8000281c:	5c 78       	castu.h	r8
8000281e:	4b 3a       	lddpc	r10,800028e8 <udd_ctrl_in_sent+0x138>
80002820:	94 8a       	ld.uh	r10,r10[0x0]
80002822:	14 08       	add	r8,r10
80002824:	10 39       	cp.w	r9,r8
80002826:	e0 89 00 08 	brgt	80002836 <udd_ctrl_in_sent+0x86>
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
8000282a:	4a d8       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x12c>
8000282c:	70 5c       	ld.w	r12,r8[0x14]
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000282e:	58 0c       	cp.w	r12,0
80002830:	c0 30       	breq	80002836 <udd_ctrl_in_sent+0x86>
80002832:	5d 1c       	icall	r12
80002834:	c0 51       	brne	8000283e <udd_ctrl_in_sent+0x8e>
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
80002836:	30 09       	mov	r9,0
80002838:	4a b8       	lddpc	r8,800028e4 <udd_ctrl_in_sent+0x134>
8000283a:	b0 89       	st.b	r8[0x0],r9
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000283c:	c1 18       	rjmp	8000285e <udd_ctrl_in_sent+0xae>
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
8000283e:	4a b9       	lddpc	r9,800028e8 <udd_ctrl_in_sent+0x138>
80002840:	4a 88       	lddpc	r8,800028e0 <udd_ctrl_in_sent+0x130>
80002842:	90 0b       	ld.sh	r11,r8[0x0]
80002844:	92 0a       	ld.sh	r10,r9[0x0]
80002846:	f6 0a 00 0a 	add	r10,r11,r10
8000284a:	b2 0a       	st.h	r9[0x0],r10
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
8000284c:	30 09       	mov	r9,0
8000284e:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80002850:	4a 38       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x12c>
80002852:	90 67       	ld.sh	r7,r8[0xc]
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
80002854:	f1 d7 c0 06 	bfextu	r8,r7,0x0,0x6
80002858:	5f 09       	sreq	r9
8000285a:	4a 38       	lddpc	r8,800028e4 <udd_ctrl_in_sent+0x134>
8000285c:	b0 89       	st.b	r8[0x0],r9
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000285e:	4a 08       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x12c>
80002860:	70 2a       	ld.w	r10,r8[0x8]
80002862:	4a 08       	lddpc	r8,800028e0 <udd_ctrl_in_sent+0x130>
80002864:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002866:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
8000286a:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
8000286c:	fe 68 01 30 	mov	r8,-130768
80002870:	70 08       	ld.w	r8,r8[0x0]
80002872:	e2 18 00 02 	andl	r8,0x2,COH
80002876:	c0 91       	brne	80002888 <udd_ctrl_in_sent+0xd8>
80002878:	34 08       	mov	r8,64
8000287a:	f0 07 19 00 	cp.h	r7,r8
8000287e:	f9 b7 0b 40 	movhi	r7,64
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80002882:	58 07       	cp.w	r7,0
80002884:	c0 91       	brne	80002896 <udd_ctrl_in_sent+0xe6>
80002886:	c1 48       	rjmp	800028ae <udd_ctrl_in_sent+0xfe>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002888:	e3 bb 00 00 	mtsr	0x0,r11
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000288c:	30 49       	mov	r9,4
8000288e:	49 18       	lddpc	r8,800028d0 <udd_ctrl_in_sent+0x120>
80002890:	91 09       	st.w	r8[0x0],r9
		return;	// Exit of IN DATA phase
80002892:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002896:	5c 79       	castu.h	r9
80002898:	f4 09 00 09 	add	r9,r10,r9
8000289c:	fc 18 e0 00 	movh	r8,0xe000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
800028a0:	13 3a       	ld.ub	r10,r9++
800028a2:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800028a4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800028a8:	ee 0a 19 00 	cp.h	r10,r7
800028ac:	cf a3       	brcs	800028a0 <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800028ae:	48 d8       	lddpc	r8,800028e0 <udd_ctrl_in_sent+0x130>
800028b0:	90 09       	ld.sh	r9,r8[0x0]
800028b2:	f2 07 00 07 	add	r7,r9,r7
800028b6:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800028b8:	30 18       	mov	r8,1
800028ba:	fe 69 01 60 	mov	r9,-130720
800028be:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
800028c0:	fe 69 01 f0 	mov	r9,-130576
800028c4:	93 08       	st.w	r9[0x0],r8
800028c6:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
800028ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800028ce:	00 00       	add	r0,r0
800028d0:	00 00       	add	r0,r0
800028d2:	07 4c       	ld.w	r12,--r3
800028d4:	80 00       	ld.sh	r0,r0[0x0]
800028d6:	25 10       	sub	r0,81
800028d8:	80 00       	ld.sh	r0,r0[0x0]
800028da:	27 50       	sub	r0,117
800028dc:	00 00       	add	r0,r0
800028de:	0a 00       	add	r0,r5
800028e0:	00 00       	add	r0,r0
800028e2:	07 4a       	ld.w	r10,--r3
800028e4:	00 00       	add	r0,r0
800028e6:	07 50       	ld.sh	r0,--r3
800028e8:	00 00       	add	r0,r0
800028ea:	07 14       	ld.sh	r4,r3++

800028ec <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
800028ec:	eb cd 40 e0 	pushm	r5-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
800028f0:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP)
800028f4:	30 39       	mov	r9,3
800028f6:	f2 08 18 00 	cp.b	r8,r9
800028fa:	e0 8b 00 88 	brhi	80002a0a <udd_ep_alloc+0x11e>
		return false;
	if (Is_udd_endpoint_enabled(ep))
800028fe:	fe 69 00 00 	mov	r9,-131072
80002902:	72 79       	ld.w	r9,r9[0x1c]
80002904:	30 17       	mov	r7,1
80002906:	ee 08 09 47 	lsl	r7,r7,r8
8000290a:	ef e9 00 09 	and	r9,r7,r9
8000290e:	c7 e1       	brne	80002a0a <udd_ep_alloc+0x11e>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80002910:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
80002914:	58 19       	cp.w	r9,1
80002916:	c7 a5       	brlt	80002a0a <udd_ep_alloc+0x11e>
80002918:	58 29       	cp.w	r9,2
8000291a:	e0 8a 00 06 	brle	80002926 <udd_ep_alloc+0x3a>
8000291e:	58 39       	cp.w	r9,3
80002920:	c7 51       	brne	80002a0a <udd_ep_alloc+0x11e>
80002922:	30 06       	mov	r6,0
80002924:	c0 28       	rjmp	80002928 <udd_ep_alloc+0x3c>
80002926:	30 16       	mov	r6,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80002928:	f0 09 15 02 	lsl	r9,r8,0x2
8000292c:	e0 39 ff 00 	sub	r9,130816
80002930:	72 0e       	ld.w	lr,r9[0x0]
80002932:	5c 7a       	castu.h	r10
80002934:	30 85       	mov	r5,8
80002936:	f4 05 0c 4a 	max	r10,r10,r5
8000293a:	e0 65 04 00 	mov	r5,1024
8000293e:	f4 05 0d 4a 	min	r10,r10,r5
80002942:	a1 7a       	lsl	r10,0x1
80002944:	20 1a       	sub	r10,1
80002946:	f4 0a 12 00 	clz	r10,r10
8000294a:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
8000294e:	ab 7b       	lsl	r11,0xb
80002950:	e2 1b 18 00 	andl	r11,0x1800,COH
80002954:	f7 ec 10 8c 	or	r12,r11,r12<<0x8
80002958:	f4 0b 11 1c 	rsub	r11,r10,28
8000295c:	f9 eb 10 4b 	or	r11,r12,r11<<0x4
80002960:	f7 e6 10 2b 	or	r11,r11,r6<<0x2
80002964:	e2 1b 19 7c 	andl	r11,0x197c,COH
80002968:	1c 9a       	mov	r10,lr
8000296a:	e0 1a e6 83 	andl	r10,0xe683
8000296e:	f7 ea 10 0a 	or	r10,r11,r10
80002972:	93 0a       	st.w	r9[0x0],r10
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80002974:	5c 87       	casts.h	r7

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80002976:	30 29       	mov	r9,2
80002978:	f2 08 18 00 	cp.b	r8,r9
8000297c:	e0 8b 00 1d 	brhi	800029b6 <udd_ep_alloc+0xca>
80002980:	fe 6a 01 0c 	mov	r10,-130804
80002984:	30 39       	mov	r9,3
		if (Is_udd_endpoint_enabled(i)) {
80002986:	fe 6c 00 00 	mov	r12,-131072
8000298a:	30 16       	mov	r6,1
8000298c:	78 7e       	ld.w	lr,r12[0x1c]
8000298e:	ec 09 09 4b 	lsl	r11,r6,r9
80002992:	f7 ee 00 0e 	and	lr,r11,lr
80002996:	c0 b0       	breq	800029ac <udd_ep_alloc+0xc0>
			ep_allocated |= 1 << i;
80002998:	f7 e7 10 07 	or	r7,r11,r7
8000299c:	5c 87       	casts.h	r7
			udd_disable_endpoint(i);
8000299e:	78 7e       	ld.w	lr,r12[0x1c]
800029a0:	5c db       	com	r11
800029a2:	1c 6b       	and	r11,lr
800029a4:	99 7b       	st.w	r12[0x1c],r11
			udd_unallocate_memory(i);
800029a6:	74 0b       	ld.w	r11,r10[0x0]
800029a8:	a1 db       	cbr	r11,0x1
800029aa:	95 0b       	st.w	r10[0x0],r11
800029ac:	20 19       	sub	r9,1
800029ae:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800029b0:	f2 08 18 00 	cp.b	r8,r9
800029b4:	ce c3       	brcs	8000298c <udd_ep_alloc+0xa0>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
800029b6:	0e 9c       	mov	r12,r7
800029b8:	5c 7c       	castu.h	r12
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
800029ba:	fe 6e 00 00 	mov	lr,-131072
800029be:	30 16       	mov	r6,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800029c0:	30 37       	mov	r7,3
		if (ep_allocated & (1 << i)) {
800029c2:	f8 08 08 49 	asr	r9,r12,r8
800029c6:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800029ca:	c1 80       	breq	800029fa <udd_ep_alloc+0x10e>
			udd_allocate_memory(i);
800029cc:	f0 0b 15 02 	lsl	r11,r8,0x2
800029d0:	fe 65 01 00 	mov	r5,-130816
800029d4:	f6 05 00 09 	add	r9,r11,r5
800029d8:	72 05       	ld.w	r5,r9[0x0]
800029da:	a1 b5       	sbr	r5,0x1
800029dc:	93 05       	st.w	r9[0x0],r5
			udd_enable_endpoint(i);
800029de:	7c 75       	ld.w	r5,lr[0x1c]
800029e0:	ec 08 09 4a 	lsl	r10,r6,r8
800029e4:	0a 4a       	or	r10,r5
800029e6:	9d 7a       	st.w	lr[0x1c],r10
			if (!Is_udd_endpoint_configured(i))
800029e8:	e0 3b fe d0 	sub	r11,130768
800029ec:	76 0a       	ld.w	r10,r11[0x0]
800029ee:	e6 1a 00 04 	andh	r10,0x4,COH
800029f2:	c0 c0       	breq	80002a0a <udd_ep_alloc+0x11e>
				return false;
			udd_enable_endpoint_bank_autoswitch(i);	
800029f4:	72 0a       	ld.w	r10,r9[0x0]
800029f6:	a9 ba       	sbr	r10,0x9
800029f8:	93 0a       	st.w	r9[0x0],r10
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800029fa:	2f f8       	sub	r8,-1
800029fc:	5c 58       	castu.b	r8
800029fe:	ee 08 18 00 	cp.b	r8,r7
80002a02:	fe 98 ff e0 	brls	800029c2 <udd_ep_alloc+0xd6>
80002a06:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002a0a:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80002a0e <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
80002a0e:	fe 68 00 00 	mov	r8,-131072
80002a12:	70 09       	ld.w	r9,r8[0x0]
80002a14:	e0 19 ff 80 	andl	r9,0xff80
80002a18:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002a1a:	70 09       	ld.w	r9,r8[0x0]
80002a1c:	a7 b9       	sbr	r9,0x7
80002a1e:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80002a20:	fe 69 01 00 	mov	r9,-130816
80002a24:	72 0b       	ld.w	r11,r9[0x0]
80002a26:	30 8c       	mov	r12,8
80002a28:	34 0a       	mov	r10,64
80002a2a:	f4 0c 0c 4a 	max	r10,r10,r12
80002a2e:	e0 6c 04 00 	mov	r12,1024
80002a32:	f4 0c 0d 4a 	min	r10,r10,r12
80002a36:	a1 7a       	lsl	r10,0x1
80002a38:	20 1a       	sub	r10,1
80002a3a:	f4 0a 12 00 	clz	r10,r10
80002a3e:	f4 0a 11 1c 	rsub	r10,r10,28
80002a42:	a5 6a       	lsl	r10,0x4
80002a44:	e2 1a 19 7c 	andl	r10,0x197c,COH
80002a48:	e0 1b e6 83 	andl	r11,0xe683
80002a4c:	16 4a       	or	r10,r11
80002a4e:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80002a50:	72 0a       	ld.w	r10,r9[0x0]
80002a52:	a1 ba       	sbr	r10,0x1
80002a54:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80002a56:	70 79       	ld.w	r9,r8[0x1c]
80002a58:	a1 a9       	sbr	r9,0x0
80002a5a:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a5c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002a60:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80002a62:	fe 69 01 f0 	mov	r9,-130576
80002a66:	30 4b       	mov	r11,4
80002a68:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80002a6a:	30 2b       	mov	r11,2
80002a6c:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80002a6e:	e0 69 10 00 	mov	r9,4096
80002a72:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002a74:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
80002a78:	5e fc       	retal	r12
80002a7a:	d7 03       	nop

80002a7c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002a7c:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a80:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002a84:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002a86:	30 1c       	mov	r12,1
80002a88:	f0 1f 00 15 	mcall	80002adc <udd_attach+0x60>
	otg_unfreeze_clock();
80002a8c:	fe 67 00 00 	mov	r7,-131072
80002a90:	ee f8 08 00 	ld.w	r8,r7[2048]
80002a94:	af c8       	cbr	r8,0xe
80002a96:	ef 48 08 00 	st.w	r7[2048],r8
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
80002a9a:	6e 08       	ld.w	r8,r7[0x0]
80002a9c:	a9 c8       	cbr	r8,0x8
80002a9e:	8f 08       	st.w	r7[0x0],r8

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
80002aa0:	f0 1f 00 10 	mcall	80002ae0 <udd_attach+0x64>
	udd_reset_ep_ctrl();	// Reset endpoint control
80002aa4:	f0 1f 00 10 	mcall	80002ae4 <udd_attach+0x68>
	udd_ctrl_init();	// Reset endpoint control management
80002aa8:	f0 1f 00 10 	mcall	80002ae8 <udd_attach+0x6c>

	// Enable USB line events
	udd_enable_reset_interrupt();
80002aac:	30 8b       	mov	r11,8
80002aae:	8f 6b       	st.w	r7[0x18],r11
	udd_enable_suspend_interrupt();
80002ab0:	30 19       	mov	r9,1
80002ab2:	8f 69       	st.w	r7[0x18],r9
	udd_enable_wake_up_interrupt();
80002ab4:	31 08       	mov	r8,16
80002ab6:	8f 68       	st.w	r7[0x18],r8
	udd_enable_sof_interrupt();
80002ab8:	30 4a       	mov	r10,4
80002aba:	8f 6a       	st.w	r7[0x18],r10
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
80002abc:	8f 2b       	st.w	r7[0x8],r11
	udd_ack_sof();
80002abe:	8f 2a       	st.w	r7[0x8],r10
	udd_ack_msof();
80002ac0:	30 2a       	mov	r10,2
80002ac2:	8f 2a       	st.w	r7[0x8],r10

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80002ac4:	8f 29       	st.w	r7[0x8],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80002ac6:	8f 28       	st.w	r7[0x8],r8
	otg_freeze_clock();
80002ac8:	ee f8 08 00 	ld.w	r8,r7[2048]
80002acc:	af a8       	sbr	r8,0xe
80002ace:	ef 48 08 00 	st.w	r7[2048],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002ad2:	e3 b6 00 00 	mtsr	0x0,r6
	cpu_irq_restore(flags);
}
80002ad6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ada:	00 00       	add	r0,r0
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	26 dc       	sub	r12,109
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	39 b0       	mov	r0,-101
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	2a 0e       	sub	lr,-96
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	27 50       	sub	r0,117

80002aec <udd_enable>:
	return true;
}


void udd_enable(void)
{
80002aec:	eb cd 40 c0 	pushm	r6-r7,lr
	irqflags_t flags;
	sysclk_enable_usb();
80002af0:	f0 1f 00 39 	mcall	80002bd4 <udd_enable+0xe8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002af4:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002af8:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
80002afa:	fe 67 00 00 	mov	r7,-131072
80002afe:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b02:	af d8       	cbr	r8,0xf
80002b04:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_enabled();
80002b08:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return false;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
80002b0c:	30 0a       	mov	r10,0
80002b0e:	e0 6b 02 20 	mov	r11,544
80002b12:	4b 2c       	lddpc	r12,80002bd8 <udd_enable+0xec>
80002b14:	f0 1f 00 32 	mcall	80002bdc <udd_enable+0xf0>
	otg_force_device_mode();
80002b18:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b1c:	b9 b8       	sbr	r8,0x19
80002b1e:	ef 48 08 00 	st.w	r7[2048],r8
80002b22:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b26:	b9 c8       	cbr	r8,0x18
80002b28:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
80002b2c:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b30:	ad c8       	cbr	r8,0xc
80002b32:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
80002b36:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b3a:	ad a8       	sbr	r8,0xc
80002b3c:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
80002b40:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b44:	af b8       	sbr	r8,0xf
80002b46:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
80002b4a:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b4e:	af c8       	cbr	r8,0xe
80002b50:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
80002b54:	ee f8 08 00 	ld.w	r8,r7[2048]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b58:	4a 28       	lddpc	r8,80002be0 <udd_enable+0xf4>
80002b5a:	70 0a       	ld.w	r10,r8[0x0]
80002b5c:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
80002b5e:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b62:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b66:	91 0a       	st.w	r8[0x0],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b68:	70 4a       	ld.w	r10,r8[0x10]
		udd_ep_job[i].stall_requested = false;
80002b6a:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b6e:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b72:	91 4a       	st.w	r8[0x10],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b74:	70 8a       	ld.w	r10,r8[0x20]
		udd_ep_job[i].stall_requested = false;
80002b76:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b7a:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b7e:	91 8a       	st.w	r8[0x20],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002b80:	6e 08       	ld.w	r8,r7[0x0]
80002b82:	ad c8       	cbr	r8,0xc
80002b84:	8f 08       	st.w	r7[0x0],r8
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80002b86:	6e 08       	ld.w	r8,r7[0x0]
80002b88:	e8 18 0c 00 	orl	r8,0xc00
80002b8c:	8f 08       	st.w	r7[0x0],r8
#  endif
#endif
	udd_enable_vbus_interrupt();
80002b8e:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b92:	a1 b8       	sbr	r8,0x1
80002b94:	ef 48 08 00 	st.w	r7[2048],r8
	otg_freeze_clock();
80002b98:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b9c:	af a8       	sbr	r8,0xe
80002b9e:	ef 48 08 00 	st.w	r7[2048],r8
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
80002ba2:	fe 78 0c 00 	mov	r8,-62464
80002ba6:	f0 fa 01 44 	ld.w	r10,r8[324]
80002baa:	30 1b       	mov	r11,1
80002bac:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80002bb0:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80002bb4:	48 c8       	lddpc	r8,80002be4 <udd_enable+0xf8>
80002bb6:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002bb8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002bbc:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002bbe:	48 b8       	lddpc	r8,80002be8 <udd_enable+0xfc>
80002bc0:	11 ba       	ld.ub	r10,r8[0x3]
80002bc2:	2f fa       	sub	r10,-1
80002bc4:	b0 ba       	st.b	r8[0x3],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002bc6:	e3 b9 00 00 	mtsr	0x0,r9
80002bca:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80002bce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bd2:	00 00       	add	r0,r0
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	32 94       	mov	r4,41
80002bd8:	80 00       	ld.sh	r0,r0[0x0]
80002bda:	2b ec       	sub	r12,-66
80002bdc:	80 00       	ld.sh	r0,r0[0x0]
80002bde:	22 0c       	sub	r12,32
80002be0:	00 00       	add	r0,r0
80002be2:	07 18       	ld.sh	r8,r3++
80002be4:	00 00       	add	r0,r0
80002be6:	07 48       	ld.w	r8,--r3
80002be8:	00 00       	add	r0,r0
80002bea:	0a 18       	sub	r8,r5

80002bec <udd_interrupt>:
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
80002bec:	eb cd 40 fc 	pushm	r2-r7,lr
	if (Is_udd_sof()) {
80002bf0:	fe 68 00 00 	mov	r8,-131072
80002bf4:	70 18       	ld.w	r8,r8[0x4]
80002bf6:	e2 18 00 04 	andl	r8,0x4,COH
80002bfa:	c0 f0       	breq	80002c18 <udd_interrupt+0x2c>
		udd_ack_sof();
80002bfc:	fe 68 00 00 	mov	r8,-131072
80002c00:	30 49       	mov	r9,4
80002c02:	91 29       	st.w	r8[0x8],r9
		if (Is_udd_full_speed_mode()) {
80002c04:	f0 f8 08 04 	ld.w	r8,r8[2052]
80002c08:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002c0c:	e0 81 02 ce 	brne	800031a8 <udd_interrupt+0x5bc>
		udc_sof_notify();
80002c10:	f0 1f 01 6f 	mcall	800031cc <udd_interrupt+0x5e0>
80002c14:	e0 8f 02 ca 	bral	800031a8 <udd_interrupt+0x5bc>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
80002c18:	fe 68 00 00 	mov	r8,-131072
80002c1c:	70 18       	ld.w	r8,r8[0x4]
80002c1e:	e2 18 00 02 	andl	r8,0x2,COH
80002c22:	c0 90       	breq	80002c34 <udd_interrupt+0x48>
		udd_ack_msof();
80002c24:	30 29       	mov	r9,2
80002c26:	fe 68 00 00 	mov	r8,-131072
80002c2a:	91 29       	st.w	r8[0x8],r9
		udc_sof_notify();
80002c2c:	f0 1f 01 68 	mcall	800031cc <udd_interrupt+0x5e0>
		goto udd_interrupt_end;
80002c30:	e0 8f 02 bc 	bral	800031a8 <udd_interrupt+0x5bc>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80002c34:	fe 68 00 00 	mov	r8,-131072
80002c38:	70 18       	ld.w	r8,r8[0x4]
80002c3a:	e2 18 10 00 	andl	r8,0x1000,COH
80002c3e:	e0 80 01 6f 	breq	80002f1c <udd_interrupt+0x330>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80002c42:	fe 68 02 20 	mov	r8,-130528
80002c46:	31 09       	mov	r9,16
80002c48:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80002c4a:	30 89       	mov	r9,8
80002c4c:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80002c4e:	fe 68 01 30 	mov	r8,-130768
80002c52:	70 08       	ld.w	r8,r8[0x0]
80002c54:	e2 18 00 04 	andl	r8,0x4,COH
80002c58:	e0 80 00 87 	breq	80002d66 <udd_interrupt+0x17a>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80002c5c:	fe f8 05 74 	ld.w	r8,pc[1396]
80002c60:	70 08       	ld.w	r8,r8[0x0]
80002c62:	58 08       	cp.w	r8,0
80002c64:	c0 50       	breq	80002c6e <udd_interrupt+0x82>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80002c66:	f0 1f 01 5c 	mcall	800031d4 <udd_interrupt+0x5e8>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002c6a:	f0 1f 01 5c 	mcall	800031d8 <udd_interrupt+0x5ec>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80002c6e:	fe 68 01 30 	mov	r8,-130768
80002c72:	70 08       	ld.w	r8,r8[0x0]
80002c74:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80002c78:	58 88       	cp.w	r8,8
80002c7a:	c0 90       	breq	80002c8c <udd_interrupt+0xa0>
		udd_ctrl_stall_data();
80002c7c:	f0 1f 01 58 	mcall	800031dc <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002c80:	30 49       	mov	r9,4
80002c82:	fe 68 01 60 	mov	r8,-130720
80002c86:	91 09       	st.w	r8[0x0],r9
80002c88:	e0 8f 02 90 	bral	800031a8 <udd_interrupt+0x5bc>
80002c8c:	fc 18 e0 00 	movh	r8,0xe000
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80002c90:	fe fc 05 50 	ld.w	r12,pc[1360]
80002c94:	fc 1b 20 00 	movh	r11,0x2000
80002c98:	f0 0c 00 09 	add	r9,r8,r12
80002c9c:	11 3a       	ld.ub	r10,r8++
80002c9e:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80002ca2:	30 8a       	mov	r10,8
80002ca4:	ea 1a e0 00 	orh	r10,0xe000
80002ca8:	14 38       	cp.w	r8,r10
80002caa:	cf 71       	brne	80002c98 <udd_interrupt+0xac>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002cac:	fe f8 05 34 	ld.w	r8,pc[1332]
80002cb0:	90 19       	ld.sh	r9,r8[0x2]
80002cb2:	5c c9       	swap.bh	r9
80002cb4:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002cb6:	90 29       	ld.sh	r9,r8[0x4]
80002cb8:	5c c9       	swap.bh	r9
80002cba:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002cbc:	90 39       	ld.sh	r9,r8[0x6]
80002cbe:	5c c9       	swap.bh	r9
80002cc0:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80002cc2:	f0 1f 01 49 	mcall	800031e4 <udd_interrupt+0x5f8>
80002cc6:	c0 91       	brne	80002cd8 <udd_interrupt+0xec>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
80002cc8:	f0 1f 01 45 	mcall	800031dc <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002ccc:	30 49       	mov	r9,4
80002cce:	fe 68 01 60 	mov	r8,-130720
80002cd2:	91 09       	st.w	r8[0x0],r9
80002cd4:	e0 8f 02 6a 	bral	800031a8 <udd_interrupt+0x5bc>
		return;
	}
	udd_ack_setup_received(0);
80002cd8:	30 49       	mov	r9,4
80002cda:	fe 68 01 60 	mov	r8,-130720
80002cde:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002ce0:	fe f8 05 00 	ld.w	r8,pc[1280]
80002ce4:	11 89       	ld.ub	r9,r8[0x0]
80002ce6:	30 08       	mov	r8,0
80002ce8:	f0 09 18 00 	cp.b	r9,r8
80002cec:	c1 94       	brge	80002d1e <udd_interrupt+0x132>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80002cee:	fe f8 04 f2 	ld.w	r8,pc[1266]
80002cf2:	90 e8       	ld.uh	r8,r8[0xc]
80002cf4:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002cf8:	5f 09       	sreq	r9
80002cfa:	fe f8 04 ee 	ld.w	r8,pc[1262]
80002cfe:	b0 89       	st.b	r8[0x0],r9
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d00:	30 08       	mov	r8,0
80002d02:	fe f9 04 ea 	ld.w	r9,pc[1258]
80002d06:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d08:	fe f9 04 e8 	ld.w	r9,pc[1256]
80002d0c:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002d0e:	30 29       	mov	r9,2
80002d10:	fe f8 04 c0 	ld.w	r8,pc[1216]
80002d14:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent();	// Send first data transfer
80002d16:	f0 1f 01 38 	mcall	800031f4 <udd_interrupt+0x608>
80002d1a:	e0 8f 02 47 	bral	800031a8 <udd_interrupt+0x5bc>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002d1e:	fe f8 04 c2 	ld.w	r8,pc[1218]
80002d22:	90 39       	ld.sh	r9,r8[0x6]
80002d24:	30 08       	mov	r8,0
80002d26:	f0 09 19 00 	cp.h	r9,r8
80002d2a:	c0 51       	brne	80002d34 <udd_interrupt+0x148>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80002d2c:	f0 1f 01 33 	mcall	800031f8 <udd_interrupt+0x60c>
80002d30:	e0 8f 02 3c 	bral	800031a8 <udd_interrupt+0x5bc>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d34:	30 08       	mov	r8,0
80002d36:	fe f9 04 b6 	ld.w	r9,pc[1206]
80002d3a:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d3c:	fe f9 04 b4 	ld.w	r9,pc[1204]
80002d40:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002d42:	30 19       	mov	r9,1
80002d44:	fe f8 04 8c 	ld.w	r8,pc[1164]
80002d48:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002d4a:	31 08       	mov	r8,16
80002d4c:	fe 69 01 60 	mov	r9,-130720
80002d50:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d52:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002d56:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002d58:	fe 6a 01 f0 	mov	r10,-130576
80002d5c:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002d5e:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002d62:	e0 8f 02 23 	bral	800031a8 <udd_interrupt+0x5bc>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80002d66:	fe 68 01 30 	mov	r8,-130768
80002d6a:	70 08       	ld.w	r8,r8[0x0]
80002d6c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002d70:	c0 b0       	breq	80002d86 <udd_interrupt+0x19a>
80002d72:	fe 68 01 c0 	mov	r8,-130624
80002d76:	70 08       	ld.w	r8,r8[0x0]
80002d78:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002d7c:	c0 50       	breq	80002d86 <udd_interrupt+0x19a>
		// IN packet sent
		udd_ctrl_in_sent();
80002d7e:	f0 1f 01 1e 	mcall	800031f4 <udd_interrupt+0x608>
80002d82:	e0 8f 02 13 	bral	800031a8 <udd_interrupt+0x5bc>
		return true;
	}
	if (Is_udd_out_received(0)) {
80002d86:	fe 68 01 30 	mov	r8,-130768
80002d8a:	70 08       	ld.w	r8,r8[0x0]
80002d8c:	e2 18 00 02 	andl	r8,0x2,COH
80002d90:	e0 80 00 a3 	breq	80002ed6 <udd_interrupt+0x2ea>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002d94:	fe f8 04 3c 	ld.w	r8,pc[1084]
80002d98:	70 08       	ld.w	r8,r8[0x0]
80002d9a:	58 18       	cp.w	r8,1
80002d9c:	c1 10       	breq	80002dbe <udd_interrupt+0x1d2>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80002d9e:	58 28       	cp.w	r8,2
80002da0:	5f 09       	sreq	r9
80002da2:	58 48       	cp.w	r8,4
80002da4:	5f 08       	sreq	r8
80002da6:	f3 e8 10 08 	or	r8,r9,r8
80002daa:	c0 40       	breq	80002db2 <udd_interrupt+0x1c6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
80002dac:	f0 1f 01 0a 	mcall	800031d4 <udd_interrupt+0x5e8>
80002db0:	c0 38       	rjmp	80002db6 <udd_interrupt+0x1ca>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80002db2:	f0 1f 01 0b 	mcall	800031dc <udd_interrupt+0x5f0>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002db6:	f0 1f 01 09 	mcall	800031d8 <udd_interrupt+0x5ec>
80002dba:	e0 8f 01 f7 	bral	800031a8 <udd_interrupt+0x5bc>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80002dbe:	fe 68 01 30 	mov	r8,-130768
80002dc2:	70 0b       	ld.w	r11,r8[0x0]
80002dc4:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002dc8:	fe f8 04 18 	ld.w	r8,pc[1048]
80002dcc:	90 69       	ld.sh	r9,r8[0xc]
80002dce:	fe f8 04 22 	ld.w	r8,pc[1058]
80002dd2:	90 08       	ld.sh	r8,r8[0x0]
80002dd4:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80002dd8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80002ddc:	f6 0a 00 0a 	add	r10,r11,r10
80002de0:	14 3c       	cp.w	r12,r10
80002de2:	c0 44       	brge	80002dea <udd_interrupt+0x1fe>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002de4:	10 19       	sub	r9,r8
80002de6:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002dea:	fe f9 03 f6 	ld.w	r9,pc[1014]
80002dee:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80002df0:	58 0b       	cp.w	r11,0
80002df2:	e0 80 01 e2 	breq	800031b6 <udd_interrupt+0x5ca>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002df6:	5c 78       	castu.h	r8
80002df8:	10 09       	add	r9,r8
80002dfa:	fc 18 e0 00 	movh	r8,0xe000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80002dfe:	11 3a       	ld.ub	r10,r8++
80002e00:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80002e02:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80002e06:	f6 0a 19 00 	cp.h	r10,r11
80002e0a:	cf a3       	brcs	80002dfe <udd_interrupt+0x212>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80002e0c:	fe f9 03 e4 	ld.w	r9,pc[996]
80002e10:	92 08       	ld.sh	r8,r9[0x0]
80002e12:	16 08       	add	r8,r11
80002e14:	5c 88       	casts.h	r8
80002e16:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80002e18:	34 09       	mov	r9,64
80002e1a:	f2 0b 19 00 	cp.h	r11,r9
80002e1e:	c0 e1       	brne	80002e3a <udd_interrupt+0x24e>
80002e20:	fe f9 03 c0 	ld.w	r9,pc[960]
80002e24:	92 ba       	ld.uh	r10,r9[0x6]
80002e26:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80002e2a:	fe f9 03 c2 	ld.w	r9,pc[962]
80002e2e:	92 89       	ld.uh	r9,r9[0x0]
80002e30:	f6 09 00 09 	add	r9,r11,r9
80002e34:	12 3a       	cp.w	r10,r9
80002e36:	e0 89 00 1a 	brgt	80002e6a <udd_interrupt+0x27e>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002e3a:	fe f9 03 a6 	ld.w	r9,pc[934]
80002e3e:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002e40:	72 5c       	ld.w	r12,r9[0x14]
80002e42:	58 0c       	cp.w	r12,0
80002e44:	c0 b0       	breq	80002e5a <udd_interrupt+0x26e>
			if (!udd_g_ctrlreq.over_under_run()) {
80002e46:	5d 1c       	icall	r12
80002e48:	c0 91       	brne	80002e5a <udd_interrupt+0x26e>
				// Stall ZLP
				udd_ctrl_stall_data();
80002e4a:	f0 1f 00 e5 	mcall	800031dc <udd_interrupt+0x5f0>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80002e4e:	30 29       	mov	r9,2
80002e50:	fe 68 01 60 	mov	r8,-130720
80002e54:	91 09       	st.w	r8[0x0],r9
80002e56:	e0 8f 01 a9 	bral	800031a8 <udd_interrupt+0x5bc>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002e5a:	30 29       	mov	r9,2
80002e5c:	fe 68 01 60 	mov	r8,-130720
80002e60:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80002e62:	f0 1f 00 e6 	mcall	800031f8 <udd_interrupt+0x60c>
80002e66:	e0 8f 01 a1 	bral	800031a8 <udd_interrupt+0x5bc>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80002e6a:	fe f9 03 76 	ld.w	r9,pc[886]
80002e6e:	92 69       	ld.sh	r9,r9[0xc]
80002e70:	f0 09 19 00 	cp.h	r9,r8
80002e74:	c2 21       	brne	80002eb8 <udd_interrupt+0x2cc>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80002e76:	fe f8 03 6a 	ld.w	r8,pc[874]
80002e7a:	70 5c       	ld.w	r12,r8[0x14]
80002e7c:	58 0c       	cp.w	r12,0
80002e7e:	c0 91       	brne	80002e90 <udd_interrupt+0x2a4>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
80002e80:	f0 1f 00 d7 	mcall	800031dc <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002e84:	30 29       	mov	r9,2
80002e86:	fe 68 01 60 	mov	r8,-130720
80002e8a:	91 09       	st.w	r8[0x0],r9
80002e8c:	e0 8f 01 8e 	bral	800031a8 <udd_interrupt+0x5bc>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80002e90:	5d 1c       	icall	r12
80002e92:	c0 81       	brne	80002ea2 <udd_interrupt+0x2b6>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80002e94:	f0 1f 00 d2 	mcall	800031dc <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002e98:	30 29       	mov	r9,2
80002e9a:	fe 68 01 60 	mov	r8,-130720
80002e9e:	91 09       	st.w	r8[0x0],r9
80002ea0:	c8 49       	rjmp	800031a8 <udd_interrupt+0x5bc>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002ea2:	fe f9 03 4a 	ld.w	r9,pc[842]
80002ea6:	fe f8 03 4a 	ld.w	r8,pc[842]
80002eaa:	90 0b       	ld.sh	r11,r8[0x0]
80002eac:	92 0a       	ld.sh	r10,r9[0x0]
80002eae:	f6 0a 00 0a 	add	r10,r11,r10
80002eb2:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80002eb4:	30 09       	mov	r9,0
80002eb6:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80002eb8:	fe 69 01 60 	mov	r9,-130720
80002ebc:	30 28       	mov	r8,2
80002ebe:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80002ec0:	31 08       	mov	r8,16
80002ec2:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ec4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002ec8:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80002eca:	fe 6a 01 f0 	mov	r10,-130576
80002ece:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002ed0:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002ed4:	c6 a9       	rjmp	800031a8 <udd_interrupt+0x5bc>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80002ed6:	fe 68 01 30 	mov	r8,-130768
80002eda:	70 08       	ld.w	r8,r8[0x0]
80002edc:	e2 18 00 08 	andl	r8,0x8,COH
80002ee0:	c1 80       	breq	80002f10 <udd_interrupt+0x324>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80002ee2:	30 89       	mov	r9,8
80002ee4:	fe 68 01 60 	mov	r8,-130720
80002ee8:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80002eea:	fe 68 01 30 	mov	r8,-130768
80002eee:	70 08       	ld.w	r8,r8[0x0]
80002ef0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002ef4:	e0 81 01 5a 	brne	800031a8 <udd_interrupt+0x5bc>
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002ef8:	fe f8 02 d8 	ld.w	r8,pc[728]
80002efc:	70 08       	ld.w	r8,r8[0x0]
80002efe:	58 38       	cp.w	r8,3
80002f00:	e0 81 01 54 	brne	800031a8 <udd_interrupt+0x5bc>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80002f04:	e8 69 00 00 	mov	r9,524288
80002f08:	fe 68 01 f0 	mov	r8,-130576
80002f0c:	91 09       	st.w	r8[0x0],r9
80002f0e:	c4 d9       	rjmp	800031a8 <udd_interrupt+0x5bc>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80002f10:	fe 68 01 30 	mov	r8,-130768
80002f14:	70 08       	ld.w	r8,r8[0x0]
80002f16:	e2 18 00 10 	andl	r8,0x10,COH
80002f1a:	c0 e1       	brne	80002f36 <udd_interrupt+0x34a>
80002f1c:	fe f7 02 e0 	ld.w	r7,pc[736]
80002f20:	0e 9a       	mov	r10,r7
80002f22:	fe 69 01 34 	mov	r9,-130764
80002f26:	30 0b       	mov	r11,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f28:	fe 66 00 00 	mov	r6,-131072
80002f2c:	fc 14 02 00 	movh	r4,0x200
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002f30:	e0 63 10 00 	mov	r3,4096
80002f34:	c1 e8       	rjmp	80002f70 <udd_interrupt+0x384>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80002f36:	31 09       	mov	r9,16
80002f38:	fe 68 01 60 	mov	r8,-130720
80002f3c:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80002f3e:	fe 68 01 30 	mov	r8,-130768
80002f42:	70 08       	ld.w	r8,r8[0x0]
80002f44:	e2 18 00 02 	andl	r8,0x2,COH
80002f48:	e0 81 01 30 	brne	800031a8 <udd_interrupt+0x5bc>
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80002f4c:	fe f8 02 84 	ld.w	r8,pc[644]
80002f50:	70 08       	ld.w	r8,r8[0x0]
80002f52:	58 18       	cp.w	r8,1
80002f54:	c0 41       	brne	80002f5c <udd_interrupt+0x370>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80002f56:	f0 1f 00 a9 	mcall	800031f8 <udd_interrupt+0x60c>
80002f5a:	c2 79       	rjmp	800031a8 <udd_interrupt+0x5bc>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80002f5c:	58 48       	cp.w	r8,4
80002f5e:	e0 81 01 25 	brne	800031a8 <udd_interrupt+0x5bc>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002f62:	e8 69 00 00 	mov	r9,524288
80002f66:	fe 68 01 f0 	mov	r8,-130576
80002f6a:	91 09       	st.w	r8[0x0],r9
80002f6c:	c1 e9       	rjmp	800031a8 <udd_interrupt+0x5bc>
80002f6e:	10 9b       	mov	r11,r8
80002f70:	f6 c8 ff ff 	sub	r8,r11,-1
80002f74:	14 9c       	mov	r12,r10
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f76:	6c 45       	ld.w	r5,r6[0x10]
80002f78:	10 9e       	mov	lr,r8
80002f7a:	e8 0b 09 4b 	lsl	r11,r4,r11
80002f7e:	f7 e5 00 05 	and	r5,r11,r5
80002f82:	c4 b0       	breq	80003018 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80002f84:	6c 15       	ld.w	r5,r6[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f86:	f7 e5 00 05 	and	r5,r11,r5
80002f8a:	c4 70       	breq	80003018 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80002f8c:	fe 69 00 00 	mov	r9,-131072
80002f90:	93 5b       	st.w	r9[0x14],r11
			if (ptr_job->b_raise_dma) {
80002f92:	74 09       	ld.w	r9,r10[0x0]
80002f94:	e6 19 20 00 	andh	r9,0x2000,COH
80002f98:	c0 50       	breq	80002fa2 <udd_interrupt+0x3b6>
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
80002f9a:	fe 69 00 00 	mov	r9,-131072
80002f9e:	93 3b       	st.w	r9[0xc],r11
80002fa0:	c0 a8       	rjmp	80002fb4 <udd_interrupt+0x3c8>
			}else{
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
80002fa2:	f0 09 15 04 	lsl	r9,r8,0x4
80002fa6:	e0 39 fd 00 	sub	r9,130304
80002faa:	72 39       	ld.w	r9,r9[0xc]
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002fac:	b1 89       	lsr	r9,0x10
80002fae:	74 2a       	ld.w	r10,r10[0x8]
80002fb0:	12 1a       	sub	r10,r9
80002fb2:	99 2a       	st.w	r12[0x8],r10
			}

			if (Is_udd_endpoint_in(ep)) {
80002fb4:	a3 68       	lsl	r8,0x2
80002fb6:	fe 6b 01 00 	mov	r11,-130816
80002fba:	f0 0b 00 09 	add	r9,r8,r11
80002fbe:	72 09       	ld.w	r9,r9[0x0]
80002fc0:	e2 19 01 00 	andl	r9,0x100,COH
80002fc4:	c2 60       	breq	80003010 <udd_interrupt+0x424>
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
80002fc6:	78 09       	ld.w	r9,r12[0x0]
80002fc8:	e6 19 40 00 	andh	r9,0x4000,COH
80002fcc:	c2 20       	breq	80003010 <udd_interrupt+0x424>
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
80002fce:	fe 6a 01 60 	mov	r10,-130720
80002fd2:	f0 0a 00 09 	add	r9,r8,r10
80002fd6:	30 1a       	mov	r10,1
80002fd8:	93 0a       	st.w	r9[0x0],r10
					if (Is_udd_write_enabled(ep)) {
80002fda:	fe 6b 01 30 	mov	r11,-130768
80002fde:	f0 0b 00 09 	add	r9,r8,r11
80002fe2:	72 0a       	ld.w	r10,r9[0x0]
						udd_raise_in_send(ep);
80002fe4:	fe 6b 01 90 	mov	r11,-130672
80002fe8:	f0 0b 00 09 	add	r9,r8,r11
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002fec:	e6 1a 00 01 	andh	r10,0x1,COH
						udd_raise_in_send(ep);
80002ff0:	f9 ba 01 01 	movne	r10,1
80002ff4:	f3 fa 1a 00 	st.wne	r9[0x0],r10
					}
					udd_enable_in_send_interrupt(ep);
80002ff8:	e0 38 fe 10 	sub	r8,130576
80002ffc:	30 19       	mov	r9,1
80002ffe:	91 09       	st.w	r8[0x0],r9
					udd_enable_endpoint_interrupt(ep);
80003000:	e0 68 10 00 	mov	r8,4096
80003004:	f0 0e 09 4e 	lsl	lr,r8,lr
80003008:	fe 68 00 00 	mov	r8,-131072
8000300c:	91 6e       	st.w	r8[0x18],lr
8000300e:	cc d8       	rjmp	800031a8 <udd_interrupt+0x5bc>
					return true;
				}
			}
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
80003010:	30 0b       	mov	r11,0
80003012:	f0 1f 00 7c 	mcall	80003200 <udd_interrupt+0x614>
80003016:	cc 98       	rjmp	800031a8 <udd_interrupt+0x5bc>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80003018:	6c 4b       	ld.w	r11,r6[0x10]
8000301a:	e6 0e 09 4e 	lsl	lr,r3,lr
8000301e:	fd eb 00 0b 	and	r11,lr,r11
80003022:	c4 60       	breq	800030ae <udd_interrupt+0x4c2>
80003024:	e0 7b fe d0 	mov	r11,130768
80003028:	f2 0b 00 02 	add	r2,r9,r11
8000302c:	f2 cb ff 70 	sub	r11,r9,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80003030:	76 05       	ld.w	r5,r11[0x0]
80003032:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
80003036:	c1 50       	breq	80003060 <udd_interrupt+0x474>
80003038:	72 05       	ld.w	r5,r9[0x0]
8000303a:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8000303e:	c1 10       	breq	80003060 <udd_interrupt+0x474>
				udd_disable_in_send_interrupt(ep);
80003040:	fe 6a 02 20 	mov	r10,-130528
80003044:	e4 0a 00 08 	add	r8,r2,r10
80003048:	30 19       	mov	r9,1
8000304a:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000304c:	e0 32 fe a0 	sub	r2,130720
80003050:	85 09       	st.w	r2[0x0],r9
				udd_ack_fifocon(ep);
80003052:	e0 69 40 00 	mov	r9,16384
80003056:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false);
80003058:	30 0b       	mov	r11,0
8000305a:	f0 1f 00 6a 	mcall	80003200 <udd_interrupt+0x614>
8000305e:	ca 58       	rjmp	800031a8 <udd_interrupt+0x5bc>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
80003060:	76 0b       	ld.w	r11,r11[0x0]
80003062:	e2 1b 10 00 	andl	r11,0x1000,COH
80003066:	c2 40       	breq	800030ae <udd_interrupt+0x4c2>
80003068:	72 0b       	ld.w	r11,r9[0x0]
8000306a:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
8000306e:	c2 01       	brne	800030ae <udd_interrupt+0x4c2>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80003070:	fe 69 02 20 	mov	r9,-130528
80003074:	e4 09 00 08 	add	r8,r2,r9
80003078:	e0 69 10 00 	mov	r9,4096
8000307c:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
8000307e:	fe 68 00 00 	mov	r8,-131072
80003082:	91 5e       	st.w	r8[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
80003084:	78 08       	ld.w	r8,r12[0x0]
80003086:	30 09       	mov	r9,0
80003088:	f1 d9 d3 81 	bfins	r8,r9,0x1c,0x1
8000308c:	99 08       	st.w	r12[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
8000308e:	fe 6b 01 00 	mov	r11,-130816
80003092:	e4 0b 00 08 	add	r8,r2,r11
80003096:	70 09       	ld.w	r9,r8[0x0]
80003098:	a9 d9       	cbr	r9,0x9
8000309a:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
8000309c:	e0 32 fe 10 	sub	r2,130576
800030a0:	e8 68 00 00 	mov	r8,524288
800030a4:	85 08       	st.w	r2[0x0],r8
				udd_reset_data_toggle(ep);
800030a6:	e4 68 00 00 	mov	r8,262144
800030aa:	85 08       	st.w	r2[0x0],r8
800030ac:	c7 e8       	rjmp	800031a8 <udd_interrupt+0x5bc>
800030ae:	2f 0a       	sub	r10,-16
800030b0:	2f c9       	sub	r9,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
800030b2:	58 38       	cp.w	r8,3
800030b4:	fe 91 ff 5d 	brne	80002f6e <udd_interrupt+0x382>
800030b8:	c8 38       	rjmp	800031be <udd_interrupt+0x5d2>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
800030ba:	30 89       	mov	r9,8
800030bc:	fe 68 00 00 	mov	r8,-131072
800030c0:	91 29       	st.w	r8[0x8],r9
#if __ICCAVR32__
#if !defined(AVR32_USBB_IRQ_GROUP)
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
800030c2:	ee c6 ff d0 	sub	r6,r7,-48
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
800030c6:	30 15       	mov	r5,1
800030c8:	0a 9b       	mov	r11,r5
800030ca:	0e 9c       	mov	r12,r7
800030cc:	f0 1f 00 4d 	mcall	80003200 <udd_interrupt+0x614>
800030d0:	2f 07       	sub	r7,-16

static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
800030d2:	0c 37       	cp.w	r7,r6
800030d4:	cf a1       	brne	800030c8 <udd_interrupt+0x4dc>
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
800030d6:	f0 1f 00 4c 	mcall	80003204 <udd_interrupt+0x618>
		// Reset endpoint control
		udd_reset_ep_ctrl();
800030da:	f0 1f 00 4c 	mcall	80003208 <udd_interrupt+0x61c>
		// Reset endpoint control management
		udd_ctrl_init();
800030de:	f0 1f 00 3f 	mcall	800031d8 <udd_interrupt+0x5ec>
		goto udd_interrupt_end;
800030e2:	c6 38       	rjmp	800031a8 <udd_interrupt+0x5bc>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800030e4:	fe 68 00 00 	mov	r8,-131072
800030e8:	70 48       	ld.w	r8,r8[0x10]
800030ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800030ee:	c1 b0       	breq	80003124 <udd_interrupt+0x538>
800030f0:	fe 68 00 00 	mov	r8,-131072
800030f4:	70 18       	ld.w	r8,r8[0x4]
800030f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800030fa:	c1 50       	breq	80003124 <udd_interrupt+0x538>
		otg_unfreeze_clock();
800030fc:	fe 68 00 00 	mov	r8,-131072
80003100:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003104:	af c9       	cbr	r9,0xe
80003106:	f1 49 08 00 	st.w	r8[2048],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
8000310a:	30 19       	mov	r9,1
8000310c:	91 59       	st.w	r8[0x14],r9
		udd_enable_wake_up_interrupt();
8000310e:	31 09       	mov	r9,16
80003110:	91 69       	st.w	r8[0x18],r9
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
80003112:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003116:	af a9       	sbr	r9,0xe
80003118:	f1 49 08 00 	st.w	r8[2048],r9
		udd_sleep_mode(false);	// Enter in SUSPEND mode
8000311c:	30 0c       	mov	r12,0
8000311e:	f0 1f 00 3c 	mcall	8000320c <udd_interrupt+0x620>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
80003122:	c4 38       	rjmp	800031a8 <udd_interrupt+0x5bc>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80003124:	fe 68 00 00 	mov	r8,-131072
80003128:	70 48       	ld.w	r8,r8[0x10]
8000312a:	e2 18 00 10 	andl	r8,0x10,COH
8000312e:	c2 10       	breq	80003170 <udd_interrupt+0x584>
80003130:	fe 68 00 00 	mov	r8,-131072
80003134:	70 18       	ld.w	r8,r8[0x4]
80003136:	e2 18 00 10 	andl	r8,0x10,COH
8000313a:	c1 b0       	breq	80003170 <udd_interrupt+0x584>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
8000313c:	fe 68 00 00 	mov	r8,-131072
80003140:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003144:	af c9       	cbr	r9,0xe
80003146:	f1 49 08 00 	st.w	r8[2048],r9
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
8000314a:	c0 58       	rjmp	80003154 <udd_interrupt+0x568>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
8000314c:	70 19       	ld.w	r9,r8[0x4]
8000314e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003152:	c0 61       	brne	8000315e <udd_interrupt+0x572>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80003154:	f0 f9 08 04 	ld.w	r9,r8[2052]
80003158:	e2 19 40 00 	andl	r9,0x4000,COH
8000315c:	cf 80       	breq	8000314c <udd_interrupt+0x560>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
8000315e:	fe 68 00 00 	mov	r8,-131072
80003162:	31 09       	mov	r9,16
80003164:	91 59       	st.w	r8[0x14],r9
		udd_enable_suspend_interrupt();
80003166:	30 1c       	mov	r12,1
80003168:	91 6c       	st.w	r8[0x18],r12
		udd_sleep_mode(true);	// Enter in IDLE mode
8000316a:	f0 1f 00 29 	mcall	8000320c <udd_interrupt+0x620>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
8000316e:	c1 d8       	rjmp	800031a8 <udd_interrupt+0x5bc>
	}

	if (Is_udd_vbus_transition()) {
80003170:	fe 68 00 00 	mov	r8,-131072
80003174:	f0 f8 08 04 	ld.w	r8,r8[2052]
80003178:	e2 18 00 02 	andl	r8,0x2,COH
8000317c:	c1 60       	breq	800031a8 <udd_interrupt+0x5bc>
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
8000317e:	fe 68 00 00 	mov	r8,-131072
80003182:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003186:	af c9       	cbr	r9,0xe
80003188:	f1 49 08 00 	st.w	r8[2048],r9
		udd_ack_vbus_transition();
8000318c:	30 29       	mov	r9,2
8000318e:	f1 49 08 08 	st.w	r8[2056],r9
		otg_freeze_clock();
80003192:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003196:	af a9       	sbr	r9,0xe
80003198:	f1 49 08 00 	st.w	r8[2048],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_udd_vbus_high());
8000319c:	f0 fc 08 04 	ld.w	r12,r8[2052]
800031a0:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
800031a4:	f0 1f 00 1b 	mcall	80003210 <udd_interrupt+0x624>
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
800031a8:	fe 68 00 00 	mov	r8,-131072
800031ac:	f0 f8 08 18 	ld.w	r8,r8[2072]
	return;
}
800031b0:	e3 cd 40 fc 	ldm	sp++,r2-r7,lr
800031b4:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800031b6:	48 f9       	lddpc	r9,800031f0 <udd_interrupt+0x604>
800031b8:	b2 08       	st.h	r9[0x0],r8
800031ba:	fe 9f fe 40 	bral	80002e3a <udd_interrupt+0x24e>
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800031be:	fe 68 00 00 	mov	r8,-131072
800031c2:	70 18       	ld.w	r8,r8[0x4]
800031c4:	e2 18 00 08 	andl	r8,0x8,COH
800031c8:	c8 e0       	breq	800030e4 <udd_interrupt+0x4f8>
800031ca:	c7 8b       	rjmp	800030ba <udd_interrupt+0x4ce>
800031cc:	80 00       	ld.sh	r0,r0[0x0]
800031ce:	37 90       	mov	r0,121
800031d0:	00 00       	add	r0,r0
800031d2:	07 4c       	ld.w	r12,--r3
800031d4:	80 00       	ld.sh	r0,r0[0x0]
800031d6:	25 10       	sub	r0,81
800031d8:	80 00       	ld.sh	r0,r0[0x0]
800031da:	27 50       	sub	r0,117
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	24 f8       	sub	r8,79
800031e0:	00 00       	add	r0,r0
800031e2:	0a 00       	add	r0,r5
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	3a 10       	mov	r0,-95
800031e8:	00 00       	add	r0,r0
800031ea:	07 50       	ld.sh	r0,--r3
800031ec:	00 00       	add	r0,r0
800031ee:	07 14       	ld.sh	r4,r3++
800031f0:	00 00       	add	r0,r0
800031f2:	07 4a       	ld.w	r10,--r3
800031f4:	80 00       	ld.sh	r0,r0[0x0]
800031f6:	27 b0       	sub	r0,123
800031f8:	80 00       	ld.sh	r0,r0[0x0]
800031fa:	27 84       	sub	r4,120
800031fc:	00 00       	add	r0,r0
800031fe:	07 18       	ld.sh	r8,r3++
80003200:	80 00       	ld.sh	r0,r0[0x0]
80003202:	25 24       	sub	r4,82
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	39 b0       	mov	r0,-101
80003208:	80 00       	ld.sh	r0,r0[0x0]
8000320a:	2a 0e       	sub	lr,-96
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	26 dc       	sub	r12,109
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	3f 10       	mov	r0,-15

80003214 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003214:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003218:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000321a:	fe 78 0c 00 	mov	r8,-62464
8000321e:	71 59       	ld.w	r9,r8[0x54]
80003220:	e2 19 00 40 	andl	r9,0x40,COH
80003224:	cf d0       	breq	8000321e <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80003226:	a3 6c       	lsl	r12,0x2
80003228:	e0 2c f3 f8 	sub	r12,62456
8000322c:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
8000322e:	30 19       	mov	r9,1
80003230:	f2 0b 09 4b 	lsl	r11,r9,r11
80003234:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80003236:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003238:	e3 ba 00 00 	mtsr	0x0,r10

	cpu_irq_restore(flags);
}
8000323c:	5e fc       	retal	r12
8000323e:	d7 03       	nop

80003240 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80003240:	eb cd 40 e0 	pushm	r5-r7,lr
80003244:	18 96       	mov	r6,r12
80003246:	58 9c       	cp.w	r12,9
80003248:	5f 07       	sreq	r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000324a:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
8000324e:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
80003250:	48 f8       	lddpc	r8,8000328c <sysclk_enable_pbb_module+0x4c>
80003252:	f0 07 07 09 	ld.ub	r9,r8[r7]
80003256:	30 08       	mov	r8,0
80003258:	f0 09 18 00 	cp.b	r9,r8
8000325c:	c0 a1       	brne	80003270 <sysclk_enable_pbb_module+0x30>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000325e:	ee 0b 15 01 	lsl	r11,r7,0x1
80003262:	f9 bb 01 06 	movne	r11,6
80003266:	f9 bb 00 02 	moveq	r11,2
8000326a:	30 1c       	mov	r12,1
8000326c:	f0 1f 00 09 	mcall	80003290 <sysclk_enable_pbb_module+0x50>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
80003270:	48 78       	lddpc	r8,8000328c <sysclk_enable_pbb_module+0x4c>
80003272:	f0 07 07 09 	ld.ub	r9,r8[r7]
80003276:	2f f9       	sub	r9,-1
80003278:	f0 07 0b 09 	st.b	r8[r7],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000327c:	e3 b5 00 00 	mtsr	0x0,r5

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80003280:	0c 9b       	mov	r11,r6
80003282:	30 3c       	mov	r12,3
80003284:	f0 1f 00 03 	mcall	80003290 <sysclk_enable_pbb_module+0x50>
}
80003288:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000328c:	00 00       	add	r0,r0
8000328e:	07 54       	ld.sh	r4,--r3
80003290:	80 00       	ld.sh	r0,r0[0x0]
80003292:	32 14       	mov	r4,33

80003294 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80003294:	d4 01       	pushm	lr
	struct genclk_config gcfg;

	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80003296:	30 1c       	mov	r12,1
80003298:	f0 1f 00 0f 	mcall	800032d4 <sysclk_enable_usb+0x40>
8000329c:	30 3b       	mov	r11,3
8000329e:	30 1c       	mov	r12,1
800032a0:	f0 1f 00 0e 	mcall	800032d8 <sysclk_enable_usb+0x44>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032a4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032a8:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800032aa:	fe 78 0c 00 	mov	r8,-62464
800032ae:	e0 6a 03 07 	mov	r10,775
800032b2:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800032b4:	70 0a       	ld.w	r10,r8[0x0]
800032b6:	a3 aa       	sbr	r10,0x2
800032b8:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032ba:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
800032be:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800032c0:	e2 19 00 80 	andl	r9,0x80,COH
800032c4:	cf d0       	breq	800032be <sysclk_enable_usb+0x2a>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800032c6:	30 49       	mov	r9,4
800032c8:	fe 78 0c 00 	mov	r8,-62464
800032cc:	f1 49 00 70 	st.w	r8[112],r9
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
800032d0:	d8 02       	popm	pc
800032d2:	00 00       	add	r0,r0
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	32 40       	mov	r0,36
800032d8:	80 00       	ld.sh	r0,r0[0x0]
800032da:	32 14       	mov	r4,33

800032dc <udi_cdc_data_disable>:
	UDI_CDC_DISABLE_EXT();
}

void udi_cdc_data_disable(void)
{
}
800032dc:	5e fc       	retal	r12
800032de:	d7 03       	nop

800032e0 <udi_cdc_comm_setup>:


bool udi_cdc_comm_setup(void)
{
	if (Udd_setup_is_in()) {
800032e0:	49 e8       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
800032e2:	11 88       	ld.ub	r8,r8[0x0]
800032e4:	30 09       	mov	r9,0
800032e6:	f2 08 18 00 	cp.b	r8,r9
800032ea:	c1 84       	brge	8000331a <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests 
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800032ec:	e2 18 00 60 	andl	r8,0x60,COH
800032f0:	e0 48 00 20 	cp.w	r8,32
800032f4:	c3 11       	brne	80003356 <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
800032f6:	49 98       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
800032f8:	11 99       	ld.ub	r9,r8[0x1]
800032fa:	32 18       	mov	r8,33
800032fc:	f0 09 18 00 	cp.b	r9,r8
80003300:	c2 b1       	brne	80003356 <udi_cdc_comm_setup+0x76>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003302:	49 68       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
80003304:	90 39       	ld.sh	r9,r8[0x6]
80003306:	30 78       	mov	r8,7
80003308:	f0 09 19 00 	cp.h	r9,r8
8000330c:	c2 51       	brne	80003356 <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.payload =
8000330e:	49 38       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
80003310:	49 39       	lddpc	r9,8000335c <udi_cdc_comm_setup+0x7c>
80003312:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003314:	30 79       	mov	r9,7
80003316:	b0 69       	st.h	r8[0xc],r9
80003318:	5e ff       	retal	1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests  
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000331a:	e2 18 00 60 	andl	r8,0x60,COH
8000331e:	e0 48 00 20 	cp.w	r8,32
80003322:	c1 a1       	brne	80003356 <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
80003324:	48 d8       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
80003326:	11 98       	ld.ub	r8,r8[0x1]
80003328:	32 09       	mov	r9,32
8000332a:	f2 08 18 00 	cp.b	r8,r9
8000332e:	c0 60       	breq	8000333a <udi_cdc_comm_setup+0x5a>
80003330:	32 29       	mov	r9,34
80003332:	f2 08 18 00 	cp.b	r8,r9
80003336:	c1 01       	brne	80003356 <udi_cdc_comm_setup+0x76>
80003338:	5e ff       	retal	1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000333a:	48 88       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
8000333c:	90 39       	ld.sh	r9,r8[0x6]
8000333e:	30 78       	mov	r8,7
80003340:	f0 09 19 00 	cp.h	r9,r8
80003344:	c0 91       	brne	80003356 <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.callback =
80003346:	48 58       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
80003348:	48 69       	lddpc	r9,80003360 <udi_cdc_comm_setup+0x80>
8000334a:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
8000334c:	48 49       	lddpc	r9,8000335c <udi_cdc_comm_setup+0x7c>
8000334e:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003350:	30 79       	mov	r9,7
80003352:	b0 69       	st.h	r8[0xc],r9
80003354:	5e ff       	retal	1
						sizeof(udi_cdc_line_coding);
				return true;
80003356:	5e fd       	retal	0
80003358:	00 00       	add	r0,r0
8000335a:	0a 00       	add	r0,r5
8000335c:	00 00       	add	r0,r0
8000335e:	07 58       	ld.sh	r8,--r3
80003360:	80 00       	ld.sh	r0,r0[0x0]
80003362:	33 68       	mov	r8,54

80003364 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
80003364:	5e fd       	retal	0

80003366 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
80003366:	5e fd       	retal	0

80003368 <udi_cdc_line_coding_received>:

void udi_cdc_line_coding_received(void)
{
	// Send line coding to component associated to CDC
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));
}
80003368:	5e fc       	retal	r12
8000336a:	d7 03       	nop

8000336c <udi_cdc_is_rx_ready>:
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
8000336c:	48 68       	lddpc	r8,80003384 <udi_cdc_is_rx_ready+0x18>
8000336e:	11 8a       	ld.ub	r10,r8[0x0]
80003370:	48 68       	lddpc	r8,80003388 <udi_cdc_is_rx_ready+0x1c>
80003372:	90 08       	ld.sh	r8,r8[0x0]
80003374:	48 69       	lddpc	r9,8000338c <udi_cdc_is_rx_ready+0x20>
80003376:	f2 0a 04 19 	ld.sh	r9,r9[r10<<0x1]
8000337a:	f0 09 19 00 	cp.h	r9,r8
}
8000337e:	5f bc       	srhi	r12
80003380:	5e fc       	retal	r12
80003382:	00 00       	add	r0,r0
80003384:	00 00       	add	r0,r0
80003386:	07 ec       	ld.ub	r12,r3[0x6]
80003388:	00 00       	add	r0,r0
8000338a:	07 e8       	ld.ub	r8,r3[0x6]
8000338c:	00 00       	add	r0,r0
8000338e:	07 e4       	ld.ub	r4,r3[0x6]

80003390 <udi_cdc_is_tx_ready>:


bool udi_cdc_is_tx_ready(void)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS) {
80003390:	49 58       	lddpc	r8,800033e4 <udi_cdc_is_tx_ready+0x54>
80003392:	11 89       	ld.ub	r9,r8[0x0]
80003394:	49 58       	lddpc	r8,800033e8 <udi_cdc_is_tx_ready+0x58>
80003396:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
8000339a:	34 08       	mov	r8,64
8000339c:	f0 09 19 00 	cp.h	r9,r8
800033a0:	c0 20       	breq	800033a4 <udi_cdc_is_tx_ready+0x14>
800033a2:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send) {
800033a4:	49 28       	lddpc	r8,800033ec <udi_cdc_is_tx_ready+0x5c>
800033a6:	11 88       	ld.ub	r8,r8[0x0]
800033a8:	58 08       	cp.w	r8,0
800033aa:	c1 21       	brne	800033ce <udi_cdc_is_tx_ready+0x3e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800033ac:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800033b0:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing) {
800033b2:	49 09       	lddpc	r9,800033f0 <udi_cdc_is_tx_ready+0x60>
800033b4:	13 89       	ld.ub	r9,r9[0x0]
800033b6:	58 09       	cp.w	r9,0
800033b8:	c0 91       	brne	800033ca <udi_cdc_is_tx_ready+0x3a>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send = true;
800033ba:	30 1a       	mov	r10,1
800033bc:	48 c9       	lddpc	r9,800033ec <udi_cdc_is_tx_ready+0x5c>
800033be:	b2 8a       	st.b	r9[0x0],r10
			udi_cdc_tx_buf_sel = (udi_cdc_tx_buf_sel==0)?1:0;
800033c0:	48 99       	lddpc	r9,800033e4 <udi_cdc_is_tx_ready+0x54>
800033c2:	13 8a       	ld.ub	r10,r9[0x0]
800033c4:	58 0a       	cp.w	r10,0
800033c6:	5f 0a       	sreq	r10
800033c8:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800033ca:	e3 b8 00 00 	mtsr	0x0,r8
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
800033ce:	48 68       	lddpc	r8,800033e4 <udi_cdc_is_tx_ready+0x54>
800033d0:	11 89       	ld.ub	r9,r8[0x0]
800033d2:	48 68       	lddpc	r8,800033e8 <udi_cdc_is_tx_ready+0x58>
800033d4:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800033d8:	34 08       	mov	r8,64
800033da:	f0 09 19 00 	cp.h	r9,r8
800033de:	5f 1c       	srne	r12
}
800033e0:	5e fc       	retal	r12
800033e2:	00 00       	add	r0,r0
800033e4:	00 00       	add	r0,r0
800033e6:	07 5f       	ld.sh	pc,--r3
800033e8:	00 00       	add	r0,r0
800033ea:	07 60       	ld.uh	r0,--r3
800033ec:	00 00       	add	r0,r0
800033ee:	08 71       	tst	r1,r4
800033f0:	00 00       	add	r0,r0
800033f2:	07 ee       	ld.ub	lr,r3[0x6]

800033f4 <udi_cdc_putc>:


int udi_cdc_putc(int value)
{
800033f4:	eb cd 40 fe 	pushm	r1-r7,lr
800033f8:	18 97       	mov	r7,r12
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
800033fa:	49 88       	lddpc	r8,80003458 <udi_cdc_putc+0x64>
800033fc:	11 e9       	ld.ub	r9,r8[0x6]
800033fe:	30 98       	mov	r8,9
80003400:	f0 09 18 00 	cp.b	r9,r8
80003404:	5f 04       	sreq	r4

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
		if (!udi_cdc_running) {
80003406:	49 66       	lddpc	r6,8000345c <udi_cdc_putc+0x68>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003408:	49 63       	lddpc	r3,80003460 <udi_cdc_putc+0x6c>
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
8000340a:	49 75       	lddpc	r5,80003464 <udi_cdc_putc+0x70>
8000340c:	49 72       	lddpc	r2,80003468 <udi_cdc_putc+0x74>
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
8000340e:	30 01       	mov	r1,0

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
80003410:	f0 1f 00 17 	mcall	8000346c <udi_cdc_putc+0x78>
80003414:	c0 51       	brne	8000341e <udi_cdc_putc+0x2a>
		if (!udi_cdc_running) {
80003416:	0d 88       	ld.ub	r8,r6[0x0]
80003418:	58 08       	cp.w	r8,0
8000341a:	cf b1       	brne	80003410 <udi_cdc_putc+0x1c>
8000341c:	c1 b8       	rjmp	80003452 <udi_cdc_putc+0x5e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000341e:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003422:	d3 03       	ssrf	0x10
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003424:	07 88       	ld.ub	r8,r3[0x0]
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003426:	ea 08 04 19 	ld.sh	r9,r5[r8<<0x1]
8000342a:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
8000342e:	f0 0c 15 06 	lsl	r12,r8,0x6
80003432:	f8 0b 00 0b 	add	r11,r12,r11
80003436:	e4 0b 0b 07 	st.b	r2[r11],r7
8000343a:	2f f9       	sub	r9,-1
8000343c:	ea 08 0a 19 	st.h	r5[r8<<0x1],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003440:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);

	if (b_databit_9) {
80003444:	58 04       	cp.w	r4,0
80003446:	c0 31       	brne	8000344c <udi_cdc_putc+0x58>
80003448:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
8000344c:	a9 47       	asr	r7,0x8
8000344e:	02 94       	mov	r4,r1
80003450:	ce 0b       	rjmp	80003410 <udi_cdc_putc+0x1c>
		goto udi_cdc_putc_process_one_byte;
80003452:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003456:	00 00       	add	r0,r0
80003458:	00 00       	add	r0,r0
8000345a:	07 58       	ld.sh	r8,--r3
8000345c:	00 00       	add	r0,r0
8000345e:	07 ed       	ld.ub	sp,r3[0x6]
80003460:	00 00       	add	r0,r0
80003462:	07 5f       	ld.sh	pc,--r3
80003464:	00 00       	add	r0,r0
80003466:	07 60       	ld.uh	r0,--r3
80003468:	00 00       	add	r0,r0
8000346a:	07 64       	ld.uh	r4,--r3
8000346c:	80 00       	ld.sh	r0,r0[0x0]
8000346e:	33 90       	mov	r0,57

80003470 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(void)
{
80003470:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003474:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003478:	d3 03       	ssrf	0x10
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel;
8000347a:	49 78       	lddpc	r8,800034d4 <udi_cdc_rx_start+0x64>
8000347c:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_rx_trans_ongoing ||
8000347e:	49 78       	lddpc	r8,800034d8 <udi_cdc_rx_start+0x68>
80003480:	11 88       	ld.ub	r8,r8[0x0]
80003482:	58 08       	cp.w	r8,0
80003484:	c0 a1       	brne	80003498 <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos < udi_cdc_rx_buf_nb[buf_sel_trans])) {
80003486:	49 68       	lddpc	r8,800034dc <udi_cdc_rx_start+0x6c>
80003488:	90 08       	ld.sh	r8,r8[0x0]
8000348a:	49 6a       	lddpc	r10,800034e0 <udi_cdc_rx_start+0x70>
8000348c:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
80003490:	f0 0a 19 00 	cp.h	r10,r8
80003494:	e0 88 00 06 	brls	800034a0 <udi_cdc_rx_start+0x30>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003498:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
8000349c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos = 0;
800034a0:	30 0a       	mov	r10,0
800034a2:	48 f8       	lddpc	r8,800034dc <udi_cdc_rx_start+0x6c>
800034a4:	b0 0a       	st.h	r8[0x0],r10
	udi_cdc_rx_buf_sel = (buf_sel_trans==0)?1:0;
800034a6:	58 07       	cp.w	r7,0
800034a8:	5f 0a       	sreq	r10
800034aa:	48 b8       	lddpc	r8,800034d4 <udi_cdc_rx_start+0x64>
800034ac:	b0 8a       	st.b	r8[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing = true;
800034ae:	30 1a       	mov	r10,1
800034b0:	48 a8       	lddpc	r8,800034d8 <udi_cdc_rx_start+0x68>
800034b2:	b0 8a       	st.b	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034b4:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
	
	if (udi_cdc_is_rx_ready()) {
800034b8:	f0 1f 00 0b 	mcall	800034e4 <udi_cdc_rx_start+0x74>
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800034bc:	a7 67       	lsl	r7,0x6
800034be:	48 b8       	lddpc	r8,800034e8 <udi_cdc_rx_start+0x78>
800034c0:	34 09       	mov	r9,64
800034c2:	48 ba       	lddpc	r10,800034ec <udi_cdc_rx_start+0x7c>
800034c4:	0e 0a       	add	r10,r7
800034c6:	30 1b       	mov	r11,1
800034c8:	30 2c       	mov	r12,2
800034ca:	f0 1f 00 0a 	mcall	800034f0 <udi_cdc_rx_start+0x80>
					true,
					udi_cdc_rx_buf[buf_sel_trans],
					UDI_CDC_RX_BUFFERS,
					udi_cdc_data_recevied);
}
800034ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800034d2:	00 00       	add	r0,r0
800034d4:	00 00       	add	r0,r0
800034d6:	07 ec       	ld.ub	r12,r3[0x6]
800034d8:	00 00       	add	r0,r0
800034da:	08 70       	tst	r0,r4
800034dc:	00 00       	add	r0,r0
800034de:	07 e8       	ld.ub	r8,r3[0x6]
800034e0:	00 00       	add	r0,r0
800034e2:	07 e4       	ld.ub	r4,r3[0x6]
800034e4:	80 00       	ld.sh	r0,r0[0x0]
800034e6:	33 6c       	mov	r12,54
800034e8:	80 00       	ld.sh	r0,r0[0x0]
800034ea:	35 70       	mov	r0,87
800034ec:	00 00       	add	r0,r0
800034ee:	07 f0       	ld.ub	r0,r3[0x7]
800034f0:	80 00       	ld.sh	r0,r0[0x0]
800034f2:	25 94       	sub	r4,89

800034f4 <udi_cdc_getc>:
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
}


int udi_cdc_getc(void)
{
800034f4:	d4 31       	pushm	r0-r7,lr
	int rx_data = 0;
	bool b_databit_9;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
800034f6:	49 88       	lddpc	r8,80003554 <udi_cdc_getc+0x60>
800034f8:	11 e9       	ld.ub	r9,r8[0x6]
800034fa:	30 98       	mov	r8,9
800034fc:	f0 09 18 00 	cp.b	r9,r8
80003500:	5f 02       	sreq	r2
80003502:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003504:	49 56       	lddpc	r6,80003558 <udi_cdc_getc+0x64>
80003506:	49 67       	lddpc	r7,8000355c <udi_cdc_getc+0x68>
80003508:	49 65       	lddpc	r5,80003560 <udi_cdc_getc+0x6c>
		if (!udi_cdc_running) {
8000350a:	49 74       	lddpc	r4,80003564 <udi_cdc_getc+0x70>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
8000350c:	49 71       	lddpc	r1,80003568 <udi_cdc_getc+0x74>
	udi_cdc_rx_start();

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
8000350e:	06 90       	mov	r0,r3
80003510:	c0 48       	rjmp	80003518 <udi_cdc_getc+0x24>
	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
		if (!udi_cdc_running) {
80003512:	09 88       	ld.ub	r8,r4[0x0]
80003514:	58 08       	cp.w	r8,0
80003516:	c1 b0       	breq	8000354c <udi_cdc_getc+0x58>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003518:	0d 89       	ld.ub	r9,r6[0x0]
8000351a:	8e 08       	ld.sh	r8,r7[0x0]
8000351c:	ea 09 04 19 	ld.sh	r9,r5[r9<<0x1]
80003520:	f0 09 19 00 	cp.h	r9,r8
80003524:	fe 98 ff f7 	brls	80003512 <udi_cdc_getc+0x1e>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003528:	0d 88       	ld.ub	r8,r6[0x0]
8000352a:	8e 09       	ld.sh	r9,r7[0x0]
8000352c:	5c 79       	castu.h	r9
8000352e:	a7 68       	lsl	r8,0x6
80003530:	12 08       	add	r8,r9
80003532:	e2 08 07 08 	ld.ub	r8,r1[r8]
80003536:	10 43       	or	r3,r8
	udi_cdc_rx_pos++;
80003538:	8e 08       	ld.sh	r8,r7[0x0]
8000353a:	2f f8       	sub	r8,-1
8000353c:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start();
8000353e:	f0 1f 00 0c 	mcall	8000356c <udi_cdc_getc+0x78>

	if (b_databit_9) {
80003542:	58 02       	cp.w	r2,0
80003544:	c0 50       	breq	8000354e <udi_cdc_getc+0x5a>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
80003546:	a9 63       	lsl	r3,0x8
80003548:	00 92       	mov	r2,r0
8000354a:	ce 7b       	rjmp	80003518 <udi_cdc_getc+0x24>
		goto udi_cdc_getc_process_one_byte;
8000354c:	30 03       	mov	r3,0
	}
	return rx_data;
}
8000354e:	06 9c       	mov	r12,r3
80003550:	d8 32       	popm	r0-r7,pc
80003552:	00 00       	add	r0,r0
80003554:	00 00       	add	r0,r0
80003556:	07 58       	ld.sh	r8,--r3
80003558:	00 00       	add	r0,r0
8000355a:	07 ec       	ld.ub	r12,r3[0x6]
8000355c:	00 00       	add	r0,r0
8000355e:	07 e8       	ld.ub	r8,r3[0x6]
80003560:	00 00       	add	r0,r0
80003562:	07 e4       	ld.ub	r4,r3[0x6]
80003564:	00 00       	add	r0,r0
80003566:	07 ed       	ld.ub	sp,r3[0x6]
80003568:	00 00       	add	r0,r0
8000356a:	07 f0       	ld.ub	r0,r3[0x7]
8000356c:	80 00       	ld.sh	r0,r0[0x0]
8000356e:	34 70       	mov	r0,71

80003570 <udi_cdc_data_recevied>:
					udi_cdc_data_recevied);
}


void udi_cdc_data_recevied(udd_ep_status_t status, iram_size_t n)
{
80003570:	d4 01       	pushm	lr
	uint8_t buf_sel_trans;

	if (UDD_EP_TRANSFER_OK != status) {
80003572:	58 0c       	cp.w	r12,0
80003574:	c1 01       	brne	80003594 <udi_cdc_data_recevied+0x24>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel==0)?1:0;
80003576:	48 98       	lddpc	r8,80003598 <udi_cdc_data_recevied+0x28>
80003578:	11 88       	ld.ub	r8,r8[0x0]
	udi_cdc_rx_buf_nb[buf_sel_trans] = n;
8000357a:	58 08       	cp.w	r8,0
8000357c:	f9 b8 01 00 	movne	r8,0
80003580:	f9 b8 00 02 	moveq	r8,2
80003584:	48 69       	lddpc	r9,8000359c <udi_cdc_data_recevied+0x2c>
80003586:	f2 08 0a 0b 	st.h	r9[r8],r11
	udi_cdc_rx_trans_ongoing = false;
8000358a:	30 09       	mov	r9,0
8000358c:	48 58       	lddpc	r8,800035a0 <udi_cdc_data_recevied+0x30>
8000358e:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start();
80003590:	f0 1f 00 05 	mcall	800035a4 <udi_cdc_data_recevied+0x34>
80003594:	d8 02       	popm	pc
80003596:	00 00       	add	r0,r0
80003598:	00 00       	add	r0,r0
8000359a:	07 ec       	ld.ub	r12,r3[0x6]
8000359c:	00 00       	add	r0,r0
8000359e:	07 e4       	ld.ub	r4,r3[0x6]
800035a0:	00 00       	add	r0,r0
800035a2:	08 70       	tst	r0,r4
800035a4:	80 00       	ld.sh	r0,r0[0x0]
800035a6:	34 70       	mov	r0,71

800035a8 <udi_cdc_tx_send>:
	udi_cdc_tx_send();
}


static void udi_cdc_tx_send(void)
{
800035a8:	eb cd 40 e0 	pushm	r5-r7,lr
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing) {
800035ac:	4a a8       	lddpc	r8,80003654 <udi_cdc_tx_send+0xac>
800035ae:	11 88       	ld.ub	r8,r8[0x0]
800035b0:	58 08       	cp.w	r8,0
800035b2:	c4 f1       	brne	80003650 <udi_cdc_tx_send+0xa8>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800035b4:	f0 1f 00 29 	mcall	80003658 <udi_cdc_tx_send+0xb0>
800035b8:	c0 a0       	breq	800035cc <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num == udd_get_micro_frame_number()) {
800035ba:	f0 1f 00 29 	mcall	8000365c <udi_cdc_tx_send+0xb4>
800035be:	4a 98       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
800035c0:	90 08       	ld.sh	r8,r8[0x0]
800035c2:	f8 08 19 00 	cp.h	r8,r12
800035c6:	c0 a1       	brne	800035da <udi_cdc_tx_send+0x32>
800035c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num == udd_get_frame_number()) {
800035cc:	f0 1f 00 26 	mcall	80003664 <udi_cdc_tx_send+0xbc>
800035d0:	4a 48       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
800035d2:	90 08       	ld.sh	r8,r8[0x0]
800035d4:	f8 08 19 00 	cp.h	r8,r12
800035d8:	c3 c0       	breq	80003650 <udi_cdc_tx_send+0xa8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800035da:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800035de:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel;
800035e0:	4a 29       	lddpc	r9,80003668 <udi_cdc_tx_send+0xc0>
800035e2:	13 87       	ld.ub	r7,r9[0x0]
	if (!udi_cdc_tx_both_buf_to_send) {
800035e4:	4a 29       	lddpc	r9,8000366c <udi_cdc_tx_send+0xc4>
800035e6:	13 89       	ld.ub	r9,r9[0x0]
800035e8:	58 09       	cp.w	r9,0
800035ea:	c0 61       	brne	800035f6 <udi_cdc_tx_send+0x4e>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel = (buf_sel_trans==0)?1:0;
800035ec:	58 07       	cp.w	r7,0
800035ee:	5f 0a       	sreq	r10
800035f0:	49 e9       	lddpc	r9,80003668 <udi_cdc_tx_send+0xc0>
800035f2:	b2 8a       	st.b	r9[0x0],r10
800035f4:	c0 38       	rjmp	800035fa <udi_cdc_tx_send+0x52>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
800035f6:	58 07       	cp.w	r7,0
800035f8:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing = true;
800035fa:	30 1a       	mov	r10,1
800035fc:	49 69       	lddpc	r9,80003654 <udi_cdc_tx_send+0xac>
800035fe:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003600:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[buf_sel_trans] != UDI_CDC_TX_BUFFERS);
80003604:	0e 95       	mov	r5,r7
80003606:	49 b8       	lddpc	r8,80003670 <udi_cdc_tx_send+0xc8>
80003608:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
8000360c:	34 08       	mov	r8,64
8000360e:	f0 09 19 00 	cp.h	r9,r8
80003612:	5f 16       	srne	r6
	if (b_short_packet) {
80003614:	58 06       	cp.w	r6,0
80003616:	c0 e0       	breq	80003632 <udi_cdc_tx_send+0x8a>
		if (udd_is_high_speed()) {
80003618:	f0 1f 00 10 	mcall	80003658 <udi_cdc_tx_send+0xb0>
8000361c:	c0 60       	breq	80003628 <udi_cdc_tx_send+0x80>
			udi_cdc_tx_sof_num = udd_get_micro_frame_number();
8000361e:	f0 1f 00 10 	mcall	8000365c <udi_cdc_tx_send+0xb4>
80003622:	49 08       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
80003624:	b0 0c       	st.h	r8[0x0],r12
80003626:	c0 98       	rjmp	80003638 <udi_cdc_tx_send+0x90>
		}else{
			udi_cdc_tx_sof_num = udd_get_frame_number();
80003628:	f0 1f 00 0f 	mcall	80003664 <udi_cdc_tx_send+0xbc>
8000362c:	48 d8       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
8000362e:	b0 0c       	st.h	r8[0x0],r12
80003630:	c0 48       	rjmp	80003638 <udi_cdc_tx_send+0x90>
		}
	}else{
		udi_cdc_tx_sof_num = 0; // Force next transfer without wait SOF
80003632:	30 09       	mov	r9,0
80003634:	48 b8       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
80003636:	b0 09       	st.h	r8[0x0],r9
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_IN,
80003638:	a7 67       	lsl	r7,0x6
8000363a:	48 f8       	lddpc	r8,80003674 <udi_cdc_tx_send+0xcc>
8000363c:	48 d9       	lddpc	r9,80003670 <udi_cdc_tx_send+0xc8>
8000363e:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
80003642:	48 ea       	lddpc	r10,80003678 <udi_cdc_tx_send+0xd0>
80003644:	0e 0a       	add	r10,r7
80003646:	0c 9b       	mov	r11,r6
80003648:	e0 6c 00 81 	mov	r12,129
8000364c:	f0 1f 00 0c 	mcall	8000367c <udi_cdc_tx_send+0xd4>
80003650:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003654:	00 00       	add	r0,r0
80003656:	07 ee       	ld.ub	lr,r3[0x6]
80003658:	80 00       	ld.sh	r0,r0[0x0]
8000365a:	23 9e       	sub	lr,57
8000365c:	80 00       	ld.sh	r0,r0[0x0]
8000365e:	23 da       	sub	r10,61
80003660:	00 00       	add	r0,r0
80003662:	07 ea       	ld.ub	r10,r3[0x6]
80003664:	80 00       	ld.sh	r0,r0[0x0]
80003666:	23 ce       	sub	lr,60
80003668:	00 00       	add	r0,r0
8000366a:	07 5f       	ld.sh	pc,--r3
8000366c:	00 00       	add	r0,r0
8000366e:	08 71       	tst	r1,r4
80003670:	00 00       	add	r0,r0
80003672:	07 60       	ld.uh	r0,--r3
80003674:	80 00       	ld.sh	r0,r0[0x0]
80003676:	36 80       	mov	r0,104
80003678:	00 00       	add	r0,r0
8000367a:	07 64       	ld.uh	r4,--r3
8000367c:	80 00       	ld.sh	r0,r0[0x0]
8000367e:	25 94       	sub	r4,89

80003680 <udi_cdc_data_sent>:
	udi_cdc_rx_start();
}


void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n)
{
80003680:	d4 01       	pushm	lr
	if (UDD_EP_TRANSFER_OK != status) {
80003682:	58 0c       	cp.w	r12,0
80003684:	c1 21       	brne	800036a8 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
80003686:	48 a8       	lddpc	r8,800036ac <udi_cdc_data_sent+0x2c>
80003688:	11 88       	ld.ub	r8,r8[0x0]
8000368a:	58 08       	cp.w	r8,0
8000368c:	f9 b9 01 00 	movne	r9,0
80003690:	f9 b9 00 02 	moveq	r9,2
80003694:	30 08       	mov	r8,0
80003696:	48 7a       	lddpc	r10,800036b0 <udi_cdc_data_sent+0x30>
80003698:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send = false;
8000369c:	48 69       	lddpc	r9,800036b4 <udi_cdc_data_sent+0x34>
8000369e:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing = false;
800036a0:	48 69       	lddpc	r9,800036b8 <udi_cdc_data_sent+0x38>
800036a2:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_send();
800036a4:	f0 1f 00 06 	mcall	800036bc <udi_cdc_data_sent+0x3c>
800036a8:	d8 02       	popm	pc
800036aa:	00 00       	add	r0,r0
800036ac:	00 00       	add	r0,r0
800036ae:	07 5f       	ld.sh	pc,--r3
800036b0:	00 00       	add	r0,r0
800036b2:	07 60       	ld.uh	r0,--r3
800036b4:	00 00       	add	r0,r0
800036b6:	08 71       	tst	r1,r4
800036b8:	00 00       	add	r0,r0
800036ba:	07 ee       	ld.ub	lr,r3[0x6]
800036bc:	80 00       	ld.sh	r0,r0[0x0]
800036be:	35 a8       	mov	r8,90

800036c0 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
800036c0:	d4 01       	pushm	lr
	udi_cdc_tx_send();
800036c2:	f0 1f 00 02 	mcall	800036c8 <udi_cdc_data_sof_notify+0x8>
}
800036c6:	d8 02       	popm	pc
800036c8:	80 00       	ld.sh	r0,r0[0x0]
800036ca:	35 a8       	mov	r8,90

800036cc <udi_cdc_data_enable>:
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
}

bool udi_cdc_data_enable(void)
{
800036cc:	eb cd 40 c0 	pushm	r6-r7,lr
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
800036d0:	30 06       	mov	r6,0
800036d2:	48 f8       	lddpc	r8,8000370c <udi_cdc_data_enable+0x40>
800036d4:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_both_buf_to_send = false;
800036d6:	48 f8       	lddpc	r8,80003710 <udi_cdc_data_enable+0x44>
800036d8:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_sel = 0;
800036da:	48 f8       	lddpc	r8,80003714 <udi_cdc_data_enable+0x48>
800036dc:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_nb[0] = 0;
800036de:	48 f8       	lddpc	r8,80003718 <udi_cdc_data_enable+0x4c>
800036e0:	30 07       	mov	r7,0
800036e2:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_buf_nb[1] = 0;
800036e4:	b0 17       	st.h	r8[0x2],r7
	udi_cdc_tx_sof_num = 0;
800036e6:	48 e8       	lddpc	r8,8000371c <udi_cdc_data_enable+0x50>
800036e8:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send();
800036ea:	f0 1f 00 0e 	mcall	80003720 <udi_cdc_data_enable+0x54>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing = false;
800036ee:	48 e8       	lddpc	r8,80003724 <udi_cdc_data_enable+0x58>
800036f0:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_sel = 0;
800036f2:	48 e8       	lddpc	r8,80003728 <udi_cdc_data_enable+0x5c>
800036f4:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_nb[0] = 0;
800036f6:	48 e8       	lddpc	r8,8000372c <udi_cdc_data_enable+0x60>
800036f8:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_rx_pos = 0;
800036fa:	48 e8       	lddpc	r8,80003730 <udi_cdc_data_enable+0x64>
800036fc:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_running = udi_cdc_rx_start();
800036fe:	f0 1f 00 0e 	mcall	80003734 <udi_cdc_data_enable+0x68>
80003702:	48 e8       	lddpc	r8,80003738 <udi_cdc_data_enable+0x6c>
80003704:	b0 8c       	st.b	r8[0x0],r12
	return udi_cdc_running;
80003706:	11 8c       	ld.ub	r12,r8[0x0]
}
80003708:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000370c:	00 00       	add	r0,r0
8000370e:	07 ee       	ld.ub	lr,r3[0x6]
80003710:	00 00       	add	r0,r0
80003712:	08 71       	tst	r1,r4
80003714:	00 00       	add	r0,r0
80003716:	07 5f       	ld.sh	pc,--r3
80003718:	00 00       	add	r0,r0
8000371a:	07 60       	ld.uh	r0,--r3
8000371c:	00 00       	add	r0,r0
8000371e:	07 ea       	ld.ub	r10,r3[0x6]
80003720:	80 00       	ld.sh	r0,r0[0x0]
80003722:	35 a8       	mov	r8,90
80003724:	00 00       	add	r0,r0
80003726:	08 70       	tst	r0,r4
80003728:	00 00       	add	r0,r0
8000372a:	07 ec       	ld.ub	r12,r3[0x6]
8000372c:	00 00       	add	r0,r0
8000372e:	07 e4       	ld.ub	r4,r3[0x6]
80003730:	00 00       	add	r0,r0
80003732:	07 e8       	ld.ub	r8,r3[0x6]
80003734:	80 00       	ld.sh	r0,r0[0x0]
80003736:	34 70       	mov	r0,71
80003738:	00 00       	add	r0,r0
8000373a:	07 ed       	ld.ub	sp,r3[0x6]

8000373c <udi_cdc_comm_disable>:


void udi_cdc_comm_disable(void)
{
8000373c:	d4 01       	pushm	lr
	udi_cdc_running = false;
8000373e:	30 09       	mov	r9,0
80003740:	48 38       	lddpc	r8,8000374c <udi_cdc_comm_disable+0x10>
80003742:	b0 89       	st.b	r8[0x0],r9
	UDI_CDC_DISABLE_EXT();
80003744:	f0 1f 00 03 	mcall	80003750 <udi_cdc_comm_disable+0x14>
}
80003748:	d8 02       	popm	pc
8000374a:	00 00       	add	r0,r0
8000374c:	00 00       	add	r0,r0
8000374e:	07 ed       	ld.ub	sp,r3[0x6]
80003750:	80 00       	ld.sh	r0,r0[0x0]
80003752:	3f 04       	mov	r4,-16

80003754 <udi_cdc_comm_enable>:

//@}


bool udi_cdc_comm_enable(void)
{
80003754:	d4 01       	pushm	lr
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
80003756:	30 0a       	mov	r10,0
80003758:	48 a8       	lddpc	r8,80003780 <udi_cdc_comm_enable+0x2c>
8000375a:	b0 0a       	st.h	r8[0x0],r10
	uid_cdc_state_msg.value = CPU_TO_LE16(0);
8000375c:	48 a8       	lddpc	r8,80003784 <udi_cdc_comm_enable+0x30>
8000375e:	b0 4a       	st.h	r8[0x8],r10

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80003760:	48 a8       	lddpc	r8,80003788 <udi_cdc_comm_enable+0x34>
80003762:	30 09       	mov	r9,0
80003764:	b0 8a       	st.b	r8[0x0],r10
80003766:	3c 2a       	mov	r10,-62
80003768:	b0 9a       	st.b	r8[0x1],r10
8000376a:	30 1a       	mov	r10,1
8000376c:	b0 aa       	st.b	r8[0x2],r10
8000376e:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
80003770:	b0 c9       	st.b	r8[0x4],r9
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
80003772:	b0 d9       	st.b	r8[0x5],r9
	udi_cdc_line_coding.bDataBits = UDI_CDC_DEFAULT_DATABITS;
80003774:	30 89       	mov	r9,8
80003776:	b0 e9       	st.b	r8[0x6],r9
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));

	// Call application callback
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
80003778:	f0 1f 00 05 	mcall	8000378c <udi_cdc_comm_enable+0x38>
}
8000377c:	d8 02       	popm	pc
8000377e:	00 00       	add	r0,r0
80003780:	00 00       	add	r0,r0
80003782:	08 72       	tst	r2,r4
80003784:	00 00       	add	r0,r0
80003786:	00 50       	eor	r0,r0
80003788:	00 00       	add	r0,r0
8000378a:	07 58       	ld.sh	r8,--r3
8000378c:	80 00       	ld.sh	r0,r0[0x0]
8000378e:	3e f8       	mov	r8,-17

80003790 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
80003790:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80003794:	49 18       	lddpc	r8,800037d8 <udc_sof_notify+0x48>
80003796:	11 89       	ld.ub	r9,r8[0x0]
80003798:	30 08       	mov	r8,0
8000379a:	f0 09 18 00 	cp.b	r9,r8
8000379e:	c1 b0       	breq	800037d4 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037a0:	48 f8       	lddpc	r8,800037dc <udc_sof_notify+0x4c>
800037a2:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037a4:	70 09       	ld.w	r9,r8[0x0]
800037a6:	13 ca       	ld.ub	r10,r9[0x4]
800037a8:	30 09       	mov	r9,0
800037aa:	f2 0a 18 00 	cp.b	r10,r9
800037ae:	c1 30       	breq	800037d4 <udc_sof_notify+0x44>
800037b0:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037b2:	48 b6       	lddpc	r6,800037dc <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800037b4:	70 18       	ld.w	r8,r8[0x4]
800037b6:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800037ba:	70 48       	ld.w	r8,r8[0x10]
800037bc:	58 08       	cp.w	r8,0
800037be:	c0 20       	breq	800037c2 <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
800037c0:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800037c2:	2f f7       	sub	r7,-1
800037c4:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037c6:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037c8:	70 09       	ld.w	r9,r8[0x0]
800037ca:	13 c9       	ld.ub	r9,r9[0x4]
800037cc:	ee 09 18 00 	cp.b	r9,r7
800037d0:	fe 9b ff f2 	brhi	800037b4 <udc_sof_notify+0x24>
800037d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800037d8:	00 00       	add	r0,r0
800037da:	08 7e       	tst	lr,r4
800037dc:	00 00       	add	r0,r0
800037de:	08 78       	tst	r8,r4

800037e0 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
800037e0:	48 78       	lddpc	r8,800037fc <udc_get_eof_conf+0x1c>
800037e2:	70 08       	ld.w	r8,r8[0x0]
800037e4:	70 08       	ld.w	r8,r8[0x0]
800037e6:	11 aa       	ld.ub	r10,r8[0x2]
800037e8:	11 b9       	ld.ub	r9,r8[0x3]
800037ea:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800037ee:	5c c9       	swap.bh	r9
800037f0:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
800037f4:	f0 0c 00 0c 	add	r12,r8,r12
800037f8:	5e fc       	retal	r12
800037fa:	00 00       	add	r0,r0
800037fc:	00 00       	add	r0,r0
800037fe:	08 78       	tst	r8,r4

80003800 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80003800:	eb cd 40 e0 	pushm	r5-r7,lr
80003804:	18 97       	mov	r7,r12
80003806:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
80003808:	49 b8       	lddpc	r8,80003874 <udc_update_iface_desc+0x74>
8000380a:	11 89       	ld.ub	r9,r8[0x0]
8000380c:	30 08       	mov	r8,0
8000380e:	f0 09 18 00 	cp.b	r9,r8
80003812:	c2 f0       	breq	80003870 <udc_update_iface_desc+0x70>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003814:	49 98       	lddpc	r8,80003878 <udc_update_iface_desc+0x78>
80003816:	70 08       	ld.w	r8,r8[0x0]
80003818:	70 08       	ld.w	r8,r8[0x0]
8000381a:	11 c9       	ld.ub	r9,r8[0x4]
8000381c:	18 9e       	mov	lr,r12
8000381e:	f8 09 18 00 	cp.b	r9,r12
80003822:	e0 88 00 27 	brls	80003870 <udc_update_iface_desc+0x70>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80003826:	49 65       	lddpc	r5,8000387c <udc_update_iface_desc+0x7c>
80003828:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000382a:	f0 1f 00 16 	mcall	80003880 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
8000382e:	6a 08       	ld.w	r8,r5[0x0]
80003830:	10 3c       	cp.w	r12,r8
80003832:	e0 88 00 1f 	brls	80003870 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003836:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003838:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000383a:	11 9a       	ld.ub	r10,r8[0x1]
8000383c:	f6 0a 18 00 	cp.b	r10,r11
80003840:	c0 a1       	brne	80003854 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
80003842:	11 aa       	ld.ub	r10,r8[0x2]
80003844:	0e 9e       	mov	lr,r7
80003846:	ee 0a 18 00 	cp.b	r10,r7
8000384a:	c0 51       	brne	80003854 <udc_update_iface_desc+0x54>
					&& (setting_num ==
							udc_ptr_iface->
8000384c:	11 ba       	ld.ub	r10,r8[0x3]
8000384e:	ec 0a 18 00 	cp.b	r10,r6
80003852:	c0 b0       	breq	80003868 <udc_update_iface_desc+0x68>
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
80003854:	13 88       	ld.ub	r8,r9[0x0]
80003856:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000385a:	10 3c       	cp.w	r12,r8
8000385c:	fe 9b ff ee 	brhi	80003838 <udc_update_iface_desc+0x38>
80003860:	48 79       	lddpc	r9,8000387c <udc_update_iface_desc+0x7c>
80003862:	93 08       	st.w	r9[0x0],r8
80003864:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003868:	48 59       	lddpc	r9,8000387c <udc_update_iface_desc+0x7c>
8000386a:	93 08       	st.w	r9[0x0],r8
8000386c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003870:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003874:	00 00       	add	r0,r0
80003876:	08 7e       	tst	lr,r4
80003878:	00 00       	add	r0,r0
8000387a:	08 78       	tst	r8,r4
8000387c:	00 00       	add	r0,r0
8000387e:	08 84       	andn	r4,r4
80003880:	80 00       	ld.sh	r0,r0[0x0]
80003882:	37 e0       	mov	r0,126

80003884 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
80003884:	eb cd 40 c0 	pushm	r6-r7,lr
80003888:	18 96       	mov	r6,r12
8000388a:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
8000388c:	f0 1f 00 11 	mcall	800038d0 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80003890:	0d 88       	ld.ub	r8,r6[0x0]
80003892:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80003894:	0c 3c       	cp.w	r12,r6
80003896:	e0 88 00 19 	brls	800038c8 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
8000389a:	0d 98       	ld.ub	r8,r6[0x1]
8000389c:	30 49       	mov	r9,4
8000389e:	f2 08 18 00 	cp.b	r8,r9
800038a2:	c1 30       	breq	800038c8 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038a4:	ee 08 18 00 	cp.b	r8,r7
800038a8:	c0 a1       	brne	800038bc <udc_next_desc_in_iface+0x38>
800038aa:	c1 08       	rjmp	800038ca <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038ac:	0d 98       	ld.ub	r8,r6[0x1]
800038ae:	f2 08 18 00 	cp.b	r8,r9
800038b2:	c0 b0       	breq	800038c8 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038b4:	ee 08 18 00 	cp.b	r8,r7
800038b8:	c0 31       	brne	800038be <udc_next_desc_in_iface+0x3a>
800038ba:	c0 88       	rjmp	800038ca <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038bc:	30 49       	mov	r9,4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800038be:	0d 88       	ld.ub	r8,r6[0x0]
800038c0:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038c2:	0c 3c       	cp.w	r12,r6
800038c4:	fe 9b ff f4 	brhi	800038ac <udc_next_desc_in_iface+0x28>
800038c8:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL;	// No specific descriptor found
}
800038ca:	0c 9c       	mov	r12,r6
800038cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800038d0:	80 00       	ld.sh	r0,r0[0x0]
800038d2:	37 e0       	mov	r0,126

800038d4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
800038d4:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
800038d6:	48 48       	lddpc	r8,800038e4 <udc_valid_address+0x10>
800038d8:	11 bc       	ld.ub	r12,r8[0x3]
800038da:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800038de:	f0 1f 00 03 	mcall	800038e8 <udc_valid_address+0x14>
}
800038e2:	d8 02       	popm	pc
800038e4:	00 00       	add	r0,r0
800038e6:	0a 00       	add	r0,r5
800038e8:	80 00       	ld.sh	r0,r0[0x0]
800038ea:	23 a0       	sub	r0,58

800038ec <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
800038ec:	eb cd 40 e0 	pushm	r5-r7,lr
800038f0:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
800038f2:	f0 1f 00 12 	mcall	80003938 <udc_iface_enable+0x4c>
800038f6:	c1 f0       	breq	80003934 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800038f8:	49 18       	lddpc	r8,8000393c <udc_iface_enable+0x50>
800038fa:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800038fc:	30 56       	mov	r6,5
800038fe:	0c 9b       	mov	r11,r6
80003900:	0e 9c       	mov	r12,r7
80003902:	f0 1f 00 10 	mcall	80003940 <udc_iface_enable+0x54>
80003906:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80003908:	c0 d0       	breq	80003922 <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
8000390a:	19 ca       	ld.ub	r10,r12[0x4]
8000390c:	19 d8       	ld.ub	r8,r12[0x5]
8000390e:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
80003912:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80003914:	5c 7a       	castu.h	r10
80003916:	19 bb       	ld.ub	r11,r12[0x3]
80003918:	19 ac       	ld.ub	r12,r12[0x2]
8000391a:	f0 1f 00 0b 	mcall	80003944 <udc_iface_enable+0x58>
8000391e:	cf 01       	brne	800038fe <udc_iface_enable+0x12>
80003920:	c0 a8       	rjmp	80003934 <udc_iface_enable+0x48>
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80003922:	48 a8       	lddpc	r8,80003948 <udc_iface_enable+0x5c>
80003924:	70 08       	ld.w	r8,r8[0x0]
80003926:	70 18       	ld.w	r8,r8[0x4]
80003928:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
8000392c:	70 0c       	ld.w	r12,r8[0x0]
8000392e:	5d 1c       	icall	r12
80003930:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003934:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003938:	80 00       	ld.sh	r0,r0[0x0]
8000393a:	38 00       	mov	r0,-128
8000393c:	00 00       	add	r0,r0
8000393e:	08 84       	andn	r4,r4
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	38 84       	mov	r4,-120
80003944:	80 00       	ld.sh	r0,r0[0x0]
80003946:	28 ec       	sub	r12,-114
80003948:	00 00       	add	r0,r0
8000394a:	08 78       	tst	r8,r4

8000394c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
8000394c:	eb cd 40 e0 	pushm	r5-r7,lr
80003950:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003952:	18 97       	mov	r7,r12
80003954:	30 0b       	mov	r11,0
80003956:	f0 1f 00 12 	mcall	8000399c <udc_iface_disable+0x50>
8000395a:	c1 e0       	breq	80003996 <udc_iface_disable+0x4a>
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000395c:	49 18       	lddpc	r8,800039a0 <udc_iface_disable+0x54>
8000395e:	70 08       	ld.w	r8,r8[0x0]
80003960:	70 18       	ld.w	r8,r8[0x4]
80003962:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003966:	6a 3c       	ld.w	r12,r5[0xc]
80003968:	5d 1c       	icall	r12
8000396a:	18 9b       	mov	r11,r12
8000396c:	0c 9c       	mov	r12,r6
8000396e:	f0 1f 00 0c 	mcall	8000399c <udc_iface_disable+0x50>
80003972:	c1 20       	breq	80003996 <udc_iface_disable+0x4a>
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003974:	48 c8       	lddpc	r8,800039a4 <udc_iface_disable+0x58>
80003976:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003978:	30 56       	mov	r6,5
8000397a:	0c 9b       	mov	r11,r6
8000397c:	0e 9c       	mov	r12,r7
8000397e:	f0 1f 00 0b 	mcall	800039a8 <udc_iface_disable+0x5c>
80003982:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
80003984:	c0 50       	breq	8000398e <udc_iface_disable+0x42>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80003986:	19 ac       	ld.ub	r12,r12[0x2]
80003988:	f0 1f 00 09 	mcall	800039ac <udc_iface_disable+0x60>
		}
8000398c:	cf 7b       	rjmp	8000397a <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
8000398e:	6a 18       	ld.w	r8,r5[0x4]
80003990:	5d 18       	icall	r8
80003992:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80003996:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000399a:	00 00       	add	r0,r0
8000399c:	80 00       	ld.sh	r0,r0[0x0]
8000399e:	38 00       	mov	r0,-128
800039a0:	00 00       	add	r0,r0
800039a2:	08 78       	tst	r8,r4
800039a4:	00 00       	add	r0,r0
800039a6:	08 84       	andn	r4,r4
800039a8:	80 00       	ld.sh	r0,r0[0x0]
800039aa:	38 84       	mov	r4,-120
800039ac:	80 00       	ld.sh	r0,r0[0x0]
800039ae:	25 64       	sub	r4,86

800039b0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device, 
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
800039b0:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800039b4:	49 38       	lddpc	r8,80003a00 <udc_reset+0x50>
800039b6:	11 89       	ld.ub	r9,r8[0x0]
800039b8:	30 08       	mov	r8,0
800039ba:	f0 09 18 00 	cp.b	r9,r8
800039be:	c1 70       	breq	800039ec <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039c0:	49 18       	lddpc	r8,80003a04 <udc_reset+0x54>
800039c2:	70 08       	ld.w	r8,r8[0x0]
800039c4:	70 08       	ld.w	r8,r8[0x0]
800039c6:	11 c9       	ld.ub	r9,r8[0x4]
800039c8:	30 08       	mov	r8,0
800039ca:	f0 09 18 00 	cp.b	r9,r8
800039ce:	c0 f0       	breq	800039ec <udc_reset+0x3c>
800039d0:	30 07       	mov	r7,0
800039d2:	48 d6       	lddpc	r6,80003a04 <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
800039d4:	0e 9c       	mov	r12,r7
800039d6:	f0 1f 00 0d 	mcall	80003a08 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800039da:	2f f7       	sub	r7,-1
800039dc:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039de:	6c 08       	ld.w	r8,r6[0x0]
800039e0:	70 08       	ld.w	r8,r8[0x0]
800039e2:	11 c8       	ld.ub	r8,r8[0x4]
800039e4:	ee 08 18 00 	cp.b	r8,r7
800039e8:	fe 9b ff f6 	brhi	800039d4 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
800039ec:	30 09       	mov	r9,0
800039ee:	48 58       	lddpc	r8,80003a00 <udc_reset+0x50>
800039f0:	b0 89       	st.b	r8[0x0],r9
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
800039f2:	e0 69 01 00 	mov	r9,256
800039f6:	48 68       	lddpc	r8,80003a0c <udc_reset+0x5c>
800039f8:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
800039fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800039fe:	00 00       	add	r0,r0
80003a00:	00 00       	add	r0,r0
80003a02:	08 7e       	tst	lr,r4
80003a04:	00 00       	add	r0,r0
80003a06:	08 78       	tst	r8,r4
80003a08:	80 00       	ld.sh	r0,r0[0x0]
80003a0a:	39 4c       	mov	r12,-108
80003a0c:	00 00       	add	r0,r0
80003a0e:	08 7c       	tst	r12,r4

80003a10 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80003a10:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003a14:	fe f8 04 3c 	ld.w	r8,pc[1084]
80003a18:	30 09       	mov	r9,0
80003a1a:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80003a1c:	30 0a       	mov	r10,0
80003a1e:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80003a20:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80003a22:	11 88       	ld.ub	r8,r8[0x0]
80003a24:	10 9a       	mov	r10,r8
80003a26:	f2 08 18 00 	cp.b	r8,r9
80003a2a:	c0 94       	brge	80003a3c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0)
80003a2c:	fe f9 04 24 	ld.w	r9,pc[1060]
80003a30:	92 3b       	ld.sh	r11,r9[0x6]
80003a32:	30 09       	mov	r9,0
80003a34:	f2 0b 19 00 	cp.h	r11,r9
80003a38:	e0 80 02 0a 	breq	80003e4c <udc_process_setup+0x43c>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80003a3c:	10 99       	mov	r9,r8
80003a3e:	e2 19 00 60 	andl	r9,0x60,COH
80003a42:	e0 81 01 d9 	brne	80003df4 <udc_process_setup+0x3e4>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80003a46:	f2 0a 18 00 	cp.b	r10,r9
80003a4a:	e0 84 01 01 	brge	80003c4c <udc_process_setup+0x23c>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
80003a4e:	fe f9 04 02 	ld.w	r9,pc[1026]
80003a52:	92 39       	ld.sh	r9,r9[0x6]
80003a54:	58 09       	cp.w	r9,0
80003a56:	e0 80 01 cf 	breq	80003df4 <udc_process_setup+0x3e4>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003a5a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a5e:	e0 81 00 9e 	brne	80003b9a <udc_process_setup+0x18a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003a62:	fe fa 03 ee 	ld.w	r10,pc[1006]
80003a66:	15 9a       	ld.ub	r10,r10[0x1]
80003a68:	30 6b       	mov	r11,6
80003a6a:	f6 0a 18 00 	cp.b	r10,r11
80003a6e:	c1 a0       	breq	80003aa2 <udc_process_setup+0x92>
80003a70:	30 8b       	mov	r11,8
80003a72:	f6 0a 18 00 	cp.b	r10,r11
80003a76:	e0 80 00 85 	breq	80003b80 <udc_process_setup+0x170>
80003a7a:	30 0b       	mov	r11,0
80003a7c:	f6 0a 18 00 	cp.b	r10,r11
80003a80:	e0 81 00 8d 	brne	80003b9a <udc_process_setup+0x18a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
80003a84:	30 28       	mov	r8,2
80003a86:	f0 09 19 00 	cp.h	r9,r8
80003a8a:	c0 40       	breq	80003a92 <udc_process_setup+0x82>
80003a8c:	30 0c       	mov	r12,0
80003a8e:	e0 8f 01 af 	bral	80003dec <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(
80003a92:	30 2b       	mov	r11,2
80003a94:	fe fc 03 c0 	ld.w	r12,pc[960]
80003a98:	f0 1f 00 f0 	mcall	80003e58 <udc_process_setup+0x448>
80003a9c:	30 1c       	mov	r12,1
80003a9e:	e0 8f 01 a7 	bral	80003dec <udc_process_setup+0x3dc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003aa2:	fe f8 03 ae 	ld.w	r8,pc[942]
80003aa6:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80003aa8:	f2 08 16 08 	lsr	r8,r9,0x8
80003aac:	30 2a       	mov	r10,2
80003aae:	f4 08 18 00 	cp.b	r8,r10
80003ab2:	c1 00       	breq	80003ad2 <udc_process_setup+0xc2>
80003ab4:	30 3a       	mov	r10,3
80003ab6:	f4 08 18 00 	cp.b	r8,r10
80003aba:	c2 a0       	breq	80003b0e <udc_process_setup+0xfe>
80003abc:	30 19       	mov	r9,1
80003abe:	f2 08 18 00 	cp.b	r8,r9
80003ac2:	c5 d1       	brne	80003b7c <udc_process_setup+0x16c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80003ac4:	fe f8 03 98 	ld.w	r8,pc[920]
80003ac8:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80003aca:	19 8b       	ld.ub	r11,r12[0x0]
80003acc:	f0 1f 00 e3 	mcall	80003e58 <udc_process_setup+0x448>
80003ad0:	c4 78       	rjmp	80003b5e <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003ad2:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80003ad4:	fe f8 03 88 	ld.w	r8,pc[904]
80003ad8:	70 08       	ld.w	r8,r8[0x0]
80003ada:	f1 38 00 11 	ld.ub	r8,r8[17]
80003ade:	f2 08 18 00 	cp.b	r8,r9
80003ae2:	e0 88 00 4d 	brls	80003b7c <udc_process_setup+0x16c>
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003ae6:	fe f8 03 76 	ld.w	r8,pc[886]
80003aea:	70 18       	ld.w	r8,r8[0x4]
80003aec:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80003af0:	19 a9       	ld.ub	r9,r12[0x2]
80003af2:	19 b8       	ld.ub	r8,r12[0x3]
80003af4:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003af8:	5c c8       	swap.bh	r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80003afa:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003afe:	f0 1f 00 d7 	mcall	80003e58 <udc_process_setup+0x448>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80003b02:	fe f8 03 4e 	ld.w	r8,pc[846]
80003b06:	70 28       	ld.w	r8,r8[0x8]
80003b08:	30 29       	mov	r9,2
80003b0a:	b0 99       	st.b	r8[0x1],r9
80003b0c:	c2 98       	rjmp	80003b5e <udc_process_setup+0x14e>
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80003b0e:	5c 59       	castu.b	r9
80003b10:	58 19       	cp.w	r9,1
80003b12:	c1 00       	breq	80003b32 <udc_process_setup+0x122>
80003b14:	58 29       	cp.w	r9,2
80003b16:	c0 40       	breq	80003b1e <udc_process_setup+0x10e>
80003b18:	58 09       	cp.w	r9,0
80003b1a:	c0 60       	breq	80003b26 <udc_process_setup+0x116>
80003b1c:	c3 08       	rjmp	80003b7c <udc_process_setup+0x16c>
80003b1e:	fe fc 03 42 	ld.w	r12,pc[834]
80003b22:	30 3b       	mov	r11,3
80003b24:	c0 a8       	rjmp	80003b38 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload(
80003b26:	30 4b       	mov	r11,4
80003b28:	fe fc 03 3c 	ld.w	r12,pc[828]
80003b2c:	f0 1f 00 cb 	mcall	80003e58 <udc_process_setup+0x448>
80003b30:	c1 78       	rjmp	80003b5e <udc_process_setup+0x14e>
80003b32:	fe fc 03 36 	ld.w	r12,pc[822]
80003b36:	30 9b       	mov	r11,9
80003b38:	fe fa 03 34 	ld.w	r10,pc[820]
80003b3c:	2f ea       	sub	r10,-2
80003b3e:	18 98       	mov	r8,r12
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80003b40:	11 39       	ld.ub	r9,r8++
80003b42:	5c c9       	swap.bh	r9
80003b44:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
80003b46:	f0 0c 01 09 	sub	r9,r8,r12
80003b4a:	f6 09 18 00 	cp.b	r9,r11
80003b4e:	cf 93       	brcs	80003b40 <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
80003b50:	a1 7b       	lsl	r11,0x1
80003b52:	2f eb       	sub	r11,-2
80003b54:	fe fc 03 18 	ld.w	r12,pc[792]
80003b58:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80003b5a:	f0 1f 00 c0 	mcall	80003e58 <udc_process_setup+0x448>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
80003b5e:	fe f8 02 f2 	ld.w	r8,pc[754]
80003b62:	90 39       	ld.sh	r9,r8[0x6]
80003b64:	90 68       	ld.sh	r8,r8[0xc]
80003b66:	f2 08 19 00 	cp.h	r8,r9
80003b6a:	e0 8b 00 04 	brhi	80003b72 <udc_process_setup+0x162>
80003b6e:	30 1c       	mov	r12,1
80003b70:	c3 e9       	rjmp	80003dec <udc_process_setup+0x3dc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80003b72:	fe f8 02 de 	ld.w	r8,pc[734]
80003b76:	b0 69       	st.h	r8[0xc],r9
80003b78:	30 1c       	mov	r12,1
80003b7a:	c3 99       	rjmp	80003dec <udc_process_setup+0x3dc>
80003b7c:	30 0c       	mov	r12,0
80003b7e:	c3 79       	rjmp	80003dec <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
80003b80:	30 18       	mov	r8,1
80003b82:	f0 09 19 00 	cp.h	r9,r8
80003b86:	c0 30       	breq	80003b8c <udc_process_setup+0x17c>
80003b88:	30 0c       	mov	r12,0
80003b8a:	c3 19       	rjmp	80003dec <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
80003b8c:	30 1b       	mov	r11,1
80003b8e:	fe fc 02 e2 	ld.w	r12,pc[738]
80003b92:	f0 1f 00 b2 	mcall	80003e58 <udc_process_setup+0x448>
80003b96:	30 1c       	mov	r12,1
80003b98:	c2 a9       	rjmp	80003dec <udc_process_setup+0x3dc>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003b9a:	58 18       	cp.w	r8,1
80003b9c:	c3 61       	brne	80003c08 <udc_process_setup+0x1f8>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003b9e:	fe fa 02 b2 	ld.w	r10,pc[690]
80003ba2:	15 9b       	ld.ub	r11,r10[0x1]
80003ba4:	30 aa       	mov	r10,10
80003ba6:	f4 0b 18 00 	cp.b	r11,r10
80003baa:	c2 f1       	brne	80003c08 <udc_process_setup+0x1f8>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
80003bac:	f0 09 19 00 	cp.h	r9,r8
80003bb0:	c2 a1       	brne	80003c04 <udc_process_setup+0x1f4>
		return false;	// Error in request
	if (!udc_num_configuration)
80003bb2:	fe f8 02 be 	ld.w	r8,pc[702]
80003bb6:	11 89       	ld.ub	r9,r8[0x0]
80003bb8:	30 08       	mov	r8,0
80003bba:	f0 09 18 00 	cp.b	r9,r8
80003bbe:	c2 30       	breq	80003c04 <udc_process_setup+0x1f4>
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003bc0:	fe f8 02 90 	ld.w	r8,pc[656]
80003bc4:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003bc6:	fe f8 02 ae 	ld.w	r8,pc[686]
80003bca:	70 08       	ld.w	r8,r8[0x0]
80003bcc:	70 08       	ld.w	r8,r8[0x0]
80003bce:	11 c8       	ld.ub	r8,r8[0x4]
80003bd0:	ee 08 18 00 	cp.b	r8,r7
80003bd4:	e0 88 00 18 	brls	80003c04 <udc_process_setup+0x1f4>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003bd8:	30 0b       	mov	r11,0
80003bda:	0e 9c       	mov	r12,r7
80003bdc:	f0 1f 00 a7 	mcall	80003e78 <udc_process_setup+0x468>
80003be0:	c1 20       	breq	80003c04 <udc_process_setup+0x1f4>
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80003be2:	fe f8 02 92 	ld.w	r8,pc[658]
80003be6:	70 08       	ld.w	r8,r8[0x0]
80003be8:	70 18       	ld.w	r8,r8[0x4]
80003bea:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80003bee:	70 3c       	ld.w	r12,r8[0xc]
80003bf0:	5d 1c       	icall	r12
80003bf2:	fe f8 02 8a 	ld.w	r8,pc[650]
80003bf6:	b0 8c       	st.b	r8[0x0],r12
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003bf8:	30 1b       	mov	r11,1
80003bfa:	10 9c       	mov	r12,r8
80003bfc:	f0 1f 00 97 	mcall	80003e58 <udc_process_setup+0x448>
80003c00:	30 1c       	mov	r12,1
80003c02:	cf 58       	rjmp	80003dec <udc_process_setup+0x3dc>
80003c04:	30 0c       	mov	r12,0
80003c06:	cf 38       	rjmp	80003dec <udc_process_setup+0x3dc>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003c08:	58 28       	cp.w	r8,2
80003c0a:	e0 81 00 f5 	brne	80003df4 <udc_process_setup+0x3e4>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c0e:	fe f8 02 42 	ld.w	r8,pc[578]
80003c12:	11 9a       	ld.ub	r10,r8[0x1]
80003c14:	30 08       	mov	r8,0
80003c16:	f0 0a 18 00 	cp.b	r10,r8
80003c1a:	e0 81 00 e8 	brne	80003dea <udc_process_setup+0x3da>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
80003c1e:	30 28       	mov	r8,2
80003c20:	f0 09 19 00 	cp.h	r9,r8
80003c24:	c0 30       	breq	80003c2a <udc_process_setup+0x21a>
80003c26:	30 0c       	mov	r12,0
80003c28:	ce 28       	rjmp	80003dec <udc_process_setup+0x3dc>
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80003c2a:	fe f8 02 26 	ld.w	r8,pc[550]
80003c2e:	11 dc       	ld.ub	r12,r8[0x5]
80003c30:	f0 1f 00 94 	mcall	80003e80 <udc_process_setup+0x470>
80003c34:	e0 68 01 00 	mov	r8,256
80003c38:	f9 b8 00 00 	moveq	r8,0
80003c3c:	fe fc 02 48 	ld.w	r12,pc[584]
80003c40:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
80003c42:	30 2b       	mov	r11,2
80003c44:	f0 1f 00 85 	mcall	80003e58 <udc_process_setup+0x448>
80003c48:	30 1c       	mov	r12,1
80003c4a:	cd 18       	rjmp	80003dec <udc_process_setup+0x3dc>
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003c4c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c50:	c7 71       	brne	80003d3e <udc_process_setup+0x32e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c52:	fe f9 01 fe 	ld.w	r9,pc[510]
80003c56:	13 99       	ld.ub	r9,r9[0x1]
80003c58:	30 3a       	mov	r10,3
80003c5a:	f4 09 18 00 	cp.b	r9,r10
80003c5e:	e0 80 00 c6 	breq	80003dea <udc_process_setup+0x3da>
80003c62:	e0 8b 00 07 	brhi	80003c70 <udc_process_setup+0x260>
80003c66:	30 1a       	mov	r10,1
80003c68:	f4 09 18 00 	cp.b	r9,r10
80003c6c:	c6 91       	brne	80003d3e <udc_process_setup+0x32e>
80003c6e:	c1 78       	rjmp	80003c9c <udc_process_setup+0x28c>
80003c70:	30 5a       	mov	r10,5
80003c72:	f4 09 18 00 	cp.b	r9,r10
80003c76:	c0 60       	breq	80003c82 <udc_process_setup+0x272>
80003c78:	30 9a       	mov	r10,9
80003c7a:	f4 09 18 00 	cp.b	r9,r10
80003c7e:	c6 01       	brne	80003d3e <udc_process_setup+0x32e>
80003c80:	c2 28       	rjmp	80003cc4 <udc_process_setup+0x2b4>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003c82:	4f 48       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003c84:	90 39       	ld.sh	r9,r8[0x6]
80003c86:	30 08       	mov	r8,0
80003c88:	f0 09 19 00 	cp.h	r9,r8
80003c8c:	c0 30       	breq	80003c92 <udc_process_setup+0x282>
80003c8e:	30 0c       	mov	r12,0
80003c90:	ca e8       	rjmp	80003dec <udc_process_setup+0x3dc>
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80003c92:	4f e9       	lddpc	r9,80003e88 <udc_process_setup+0x478>
80003c94:	4e f8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003c96:	91 49       	st.w	r8[0x10],r9
80003c98:	30 1c       	mov	r12,1
80003c9a:	ca 98       	rjmp	80003dec <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003c9c:	4e d8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003c9e:	90 39       	ld.sh	r9,r8[0x6]
80003ca0:	30 08       	mov	r8,0
80003ca2:	f0 09 19 00 	cp.h	r9,r8
80003ca6:	c0 d1       	brne	80003cc0 <udc_process_setup+0x2b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80003ca8:	4e a8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003caa:	90 19       	ld.sh	r9,r8[0x2]
80003cac:	30 18       	mov	r8,1
80003cae:	f0 09 19 00 	cp.h	r9,r8
80003cb2:	c0 71       	brne	80003cc0 <udc_process_setup+0x2b0>
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80003cb4:	4e 88       	lddpc	r8,80003e54 <udc_process_setup+0x444>
80003cb6:	90 09       	ld.sh	r9,r8[0x0]
80003cb8:	a9 d9       	cbr	r9,0x9
80003cba:	b0 09       	st.h	r8[0x0],r9
80003cbc:	30 1c       	mov	r12,1
80003cbe:	c9 78       	rjmp	80003dec <udc_process_setup+0x3dc>
80003cc0:	30 0c       	mov	r12,0
80003cc2:	c9 58       	rjmp	80003dec <udc_process_setup+0x3dc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
80003cc4:	4e 38       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003cc6:	90 39       	ld.sh	r9,r8[0x6]
80003cc8:	30 08       	mov	r8,0
80003cca:	f0 09 19 00 	cp.h	r9,r8
80003cce:	c3 41       	brne	80003d36 <udc_process_setup+0x326>
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
80003cd0:	f0 1f 00 6f 	mcall	80003e8c <udc_process_setup+0x47c>
80003cd4:	c3 10       	breq	80003d36 <udc_process_setup+0x326>
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80003cd6:	4d f8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003cd8:	11 b9       	ld.ub	r9,r8[0x3]
80003cda:	4e 18       	lddpc	r8,80003e5c <udc_process_setup+0x44c>
80003cdc:	70 08       	ld.w	r8,r8[0x0]
80003cde:	f1 38 00 11 	ld.ub	r8,r8[17]
80003ce2:	10 39       	cp.w	r9,r8
80003ce4:	e0 89 00 29 	brgt	80003d36 <udc_process_setup+0x326>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
80003ce8:	f0 1f 00 6a 	mcall	80003e90 <udc_process_setup+0x480>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80003cec:	4d 98       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003cee:	11 b8       	ld.ub	r8,r8[0x3]
80003cf0:	4e 09       	lddpc	r9,80003e70 <udc_process_setup+0x460>
80003cf2:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80003cf4:	58 08       	cp.w	r8,0
80003cf6:	c2 20       	breq	80003d3a <udc_process_setup+0x32a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80003cf8:	20 18       	sub	r8,1
80003cfa:	4d 99       	lddpc	r9,80003e5c <udc_process_setup+0x44c>
80003cfc:	72 19       	ld.w	r9,r9[0x4]
80003cfe:	f2 08 00 38 	add	r8,r9,r8<<0x3
80003d02:	4d d9       	lddpc	r9,80003e74 <udc_process_setup+0x464>
80003d04:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d06:	70 08       	ld.w	r8,r8[0x0]
80003d08:	11 c9       	ld.ub	r9,r8[0x4]
80003d0a:	30 08       	mov	r8,0
80003d0c:	f0 09 18 00 	cp.b	r9,r8
80003d10:	c1 50       	breq	80003d3a <udc_process_setup+0x32a>
80003d12:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d14:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d16:	4d 86       	lddpc	r6,80003e74 <udc_process_setup+0x464>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d18:	0a 9b       	mov	r11,r5
80003d1a:	0e 9c       	mov	r12,r7
80003d1c:	f0 1f 00 5e 	mcall	80003e94 <udc_process_setup+0x484>
80003d20:	c0 b0       	breq	80003d36 <udc_process_setup+0x326>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80003d22:	2f f7       	sub	r7,-1
80003d24:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d26:	6c 08       	ld.w	r8,r6[0x0]
80003d28:	70 08       	ld.w	r8,r8[0x0]
80003d2a:	11 c8       	ld.ub	r8,r8[0x4]
80003d2c:	ee 08 18 00 	cp.b	r8,r7
80003d30:	fe 9b ff f4 	brhi	80003d18 <udc_process_setup+0x308>
80003d34:	c0 38       	rjmp	80003d3a <udc_process_setup+0x32a>
80003d36:	30 0c       	mov	r12,0
80003d38:	c5 a8       	rjmp	80003dec <udc_process_setup+0x3dc>
80003d3a:	30 1c       	mov	r12,1
80003d3c:	c5 88       	rjmp	80003dec <udc_process_setup+0x3dc>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003d3e:	58 18       	cp.w	r8,1
80003d40:	c2 21       	brne	80003d84 <udc_process_setup+0x374>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d42:	4c 49       	lddpc	r9,80003e50 <udc_process_setup+0x440>
80003d44:	13 9a       	ld.ub	r10,r9[0x1]
80003d46:	30 b9       	mov	r9,11
80003d48:	f2 0a 18 00 	cp.b	r10,r9
80003d4c:	c1 c1       	brne	80003d84 <udc_process_setup+0x374>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80003d4e:	4c 18       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003d50:	90 39       	ld.sh	r9,r8[0x6]
80003d52:	30 08       	mov	r8,0
80003d54:	f0 09 19 00 	cp.h	r9,r8
80003d58:	c1 41       	brne	80003d80 <udc_process_setup+0x370>
		return false;	// Error in request
	if (!udc_num_configuration)
80003d5a:	4c 68       	lddpc	r8,80003e70 <udc_process_setup+0x460>
80003d5c:	11 89       	ld.ub	r9,r8[0x0]
80003d5e:	30 08       	mov	r8,0
80003d60:	f0 09 18 00 	cp.b	r9,r8
80003d64:	c0 e0       	breq	80003d80 <udc_process_setup+0x370>
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80003d66:	4b b8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003d68:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num))
80003d6a:	11 d7       	ld.ub	r7,r8[0x5]
80003d6c:	0e 9c       	mov	r12,r7
80003d6e:	f0 1f 00 4b 	mcall	80003e98 <udc_process_setup+0x488>
80003d72:	c0 70       	breq	80003d80 <udc_process_setup+0x370>
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80003d74:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003d78:	0e 9c       	mov	r12,r7
80003d7a:	f0 1f 00 47 	mcall	80003e94 <udc_process_setup+0x484>
80003d7e:	c3 78       	rjmp	80003dec <udc_process_setup+0x3dc>
80003d80:	30 0c       	mov	r12,0
80003d82:	c3 58       	rjmp	80003dec <udc_process_setup+0x3dc>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003d84:	58 28       	cp.w	r8,2
80003d86:	c3 71       	brne	80003df4 <udc_process_setup+0x3e4>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d88:	4b 28       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003d8a:	11 98       	ld.ub	r8,r8[0x1]
80003d8c:	30 19       	mov	r9,1
80003d8e:	f2 08 18 00 	cp.b	r8,r9
80003d92:	c0 60       	breq	80003d9e <udc_process_setup+0x38e>
80003d94:	30 39       	mov	r9,3
80003d96:	f2 08 18 00 	cp.b	r8,r9
80003d9a:	c2 81       	brne	80003dea <udc_process_setup+0x3da>
80003d9c:	c1 48       	rjmp	80003dc4 <udc_process_setup+0x3b4>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003d9e:	4a d8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003da0:	90 39       	ld.sh	r9,r8[0x6]
80003da2:	30 08       	mov	r8,0
80003da4:	f0 09 19 00 	cp.h	r9,r8
80003da8:	c0 c1       	brne	80003dc0 <udc_process_setup+0x3b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003daa:	4a a8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003dac:	90 19       	ld.sh	r9,r8[0x2]
80003dae:	30 08       	mov	r8,0
80003db0:	f0 09 19 00 	cp.h	r9,r8
80003db4:	c0 61       	brne	80003dc0 <udc_process_setup+0x3b0>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003db6:	4a 78       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003db8:	11 dc       	ld.ub	r12,r8[0x5]
80003dba:	f0 1f 00 39 	mcall	80003e9c <udc_process_setup+0x48c>
80003dbe:	c1 78       	rjmp	80003dec <udc_process_setup+0x3dc>
80003dc0:	30 0c       	mov	r12,0
80003dc2:	c1 58       	rjmp	80003dec <udc_process_setup+0x3dc>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003dc4:	4a 38       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003dc6:	90 39       	ld.sh	r9,r8[0x6]
80003dc8:	30 08       	mov	r8,0
80003dca:	f0 09 19 00 	cp.h	r9,r8
80003dce:	c0 c1       	brne	80003de6 <udc_process_setup+0x3d6>
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003dd0:	4a 08       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003dd2:	90 19       	ld.sh	r9,r8[0x2]
80003dd4:	30 08       	mov	r8,0
80003dd6:	f0 09 19 00 	cp.h	r9,r8
80003dda:	c0 61       	brne	80003de6 <udc_process_setup+0x3d6>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003ddc:	49 d8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003dde:	11 dc       	ld.ub	r12,r8[0x5]
80003de0:	f0 1f 00 30 	mcall	80003ea0 <udc_process_setup+0x490>
80003de4:	c0 48       	rjmp	80003dec <udc_process_setup+0x3dc>
80003de6:	30 0c       	mov	r12,0
80003de8:	c0 28       	rjmp	80003dec <udc_process_setup+0x3dc>
80003dea:	30 0c       	mov	r12,0
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
80003dec:	58 0c       	cp.w	r12,0
80003dee:	c0 30       	breq	80003df4 <udc_process_setup+0x3e4>
80003df0:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80003df4:	49 78       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003df6:	11 88       	ld.ub	r8,r8[0x0]
80003df8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003dfc:	58 18       	cp.w	r8,1
80003dfe:	c2 71       	brne	80003e4c <udc_process_setup+0x43c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
80003e00:	49 c8       	lddpc	r8,80003e70 <udc_process_setup+0x460>
80003e02:	11 89       	ld.ub	r9,r8[0x0]
80003e04:	30 08       	mov	r8,0
80003e06:	f0 09 18 00 	cp.b	r9,r8
80003e0a:	c2 10       	breq	80003e4c <udc_process_setup+0x43c>
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003e0c:	49 18       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003e0e:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003e10:	49 98       	lddpc	r8,80003e74 <udc_process_setup+0x464>
80003e12:	70 08       	ld.w	r8,r8[0x0]
80003e14:	70 08       	ld.w	r8,r8[0x0]
80003e16:	11 c8       	ld.ub	r8,r8[0x4]
80003e18:	ee 08 18 00 	cp.b	r8,r7
80003e1c:	e0 88 00 18 	brls	80003e4c <udc_process_setup+0x43c>
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003e20:	0e 96       	mov	r6,r7
80003e22:	30 0b       	mov	r11,0
80003e24:	0e 9c       	mov	r12,r7
80003e26:	f0 1f 00 15 	mcall	80003e78 <udc_process_setup+0x468>
80003e2a:	c1 10       	breq	80003e4c <udc_process_setup+0x43c>
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003e2c:	49 28       	lddpc	r8,80003e74 <udc_process_setup+0x464>
80003e2e:	70 08       	ld.w	r8,r8[0x0]
80003e30:	70 18       	ld.w	r8,r8[0x4]
80003e32:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003e36:	6e 3c       	ld.w	r12,r7[0xc]
80003e38:	5d 1c       	icall	r12
80003e3a:	18 9b       	mov	r11,r12
80003e3c:	0c 9c       	mov	r12,r6
80003e3e:	f0 1f 00 0f 	mcall	80003e78 <udc_process_setup+0x468>
80003e42:	c0 50       	breq	80003e4c <udc_process_setup+0x43c>
		return false;

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80003e44:	6e 2c       	ld.w	r12,r7[0x8]
80003e46:	5d 1c       	icall	r12
80003e48:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e4c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003e50:	00 00       	add	r0,r0
80003e52:	0a 00       	add	r0,r5
80003e54:	00 00       	add	r0,r0
80003e56:	08 7c       	tst	r12,r4
80003e58:	80 00       	ld.sh	r0,r0[0x0]
80003e5a:	23 e8       	sub	r8,62
80003e5c:	00 00       	add	r0,r0
80003e5e:	00 b0       	st.h	r0++,r0
80003e60:	00 00       	add	r0,r0
80003e62:	00 cc       	st.b	r0++,r12
80003e64:	00 00       	add	r0,r0
80003e66:	00 f0       	st.b	--r0,r0
80003e68:	00 00       	add	r0,r0
80003e6a:	00 d0       	st.w	--r0,r0
80003e6c:	00 00       	add	r0,r0
80003e6e:	00 dc       	st.w	--r0,r12
80003e70:	00 00       	add	r0,r0
80003e72:	08 7e       	tst	lr,r4
80003e74:	00 00       	add	r0,r0
80003e76:	08 78       	tst	r8,r4
80003e78:	80 00       	ld.sh	r0,r0[0x0]
80003e7a:	38 00       	mov	r0,-128
80003e7c:	00 00       	add	r0,r0
80003e7e:	08 74       	tst	r4,r4
80003e80:	80 00       	ld.sh	r0,r0[0x0]
80003e82:	23 f4       	sub	r4,63
80003e84:	00 00       	add	r0,r0
80003e86:	08 80       	andn	r0,r4
80003e88:	80 00       	ld.sh	r0,r0[0x0]
80003e8a:	38 d4       	mov	r4,-115
80003e8c:	80 00       	ld.sh	r0,r0[0x0]
80003e8e:	23 c2       	sub	r2,60
80003e90:	80 00       	ld.sh	r0,r0[0x0]
80003e92:	39 b0       	mov	r0,-101
80003e94:	80 00       	ld.sh	r0,r0[0x0]
80003e96:	38 ec       	mov	r12,-114
80003e98:	80 00       	ld.sh	r0,r0[0x0]
80003e9a:	39 4c       	mov	r12,-108
80003e9c:	80 00       	ld.sh	r0,r0[0x0]
80003e9e:	24 84       	sub	r4,72
80003ea0:	80 00       	ld.sh	r0,r0[0x0]
80003ea2:	24 08       	sub	r8,64

80003ea4 <_read>:
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80003ea4:	eb cd 40 fc 	pushm	r2-r7,lr
80003ea8:	20 1d       	sub	sp,4
80003eaa:	16 94       	mov	r4,r11
80003eac:	14 95       	mov	r5,r10
	int nChars = 0;

	if (file != 0)
80003eae:	58 0c       	cp.w	r12,0
80003eb0:	c0 30       	breq	80003eb6 <_read+0x12>
80003eb2:	3f f7       	mov	r7,-1
80003eb4:	c1 98       	rjmp	80003ee6 <_read+0x42>
		return -1;

	for (; len > 0; --len) {
80003eb6:	58 0a       	cp.w	r10,0
80003eb8:	e0 89 00 04 	brgt	80003ec0 <_read+0x1c>
80003ebc:	30 07       	mov	r7,0
80003ebe:	c1 48       	rjmp	80003ee6 <_read+0x42>
80003ec0:	30 07       	mov	r7,0
		int c;
		ptr_get(stdio_base,&c);
80003ec2:	48 c3       	lddpc	r3,80003ef0 <_read+0x4c>
80003ec4:	48 c6       	lddpc	r6,80003ef4 <_read+0x50>
80003ec6:	1a 92       	mov	r2,sp
80003ec8:	66 0c       	ld.w	r12,r3[0x0]
80003eca:	6c 08       	ld.w	r8,r6[0x0]
80003ecc:	1a 9b       	mov	r11,sp
80003ece:	5d 18       	icall	r8
		if (c < 0)
80003ed0:	40 08       	lddsp	r8,sp[0x0]
80003ed2:	58 08       	cp.w	r8,0
80003ed4:	c0 95       	brlt	80003ee6 <_read+0x42>
		break;
		*ptr++ = c;
80003ed6:	e8 07 0b 08 	st.b	r4[r7],r8
		++nChars;
80003eda:	2f f7       	sub	r7,-1
// GCC AVR32 implementation
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
80003edc:	ea 07 01 08 	sub	r8,r5,r7
	int nChars = 0;

	if (file != 0)
		return -1;

	for (; len > 0; --len) {
80003ee0:	58 08       	cp.w	r8,0
80003ee2:	fe 99 ff f3 	brgt	80003ec8 <_read+0x24>
		break;
		*ptr++ = c;
		++nChars;
	}
	return nChars;
}
80003ee6:	0e 9c       	mov	r12,r7
80003ee8:	2f fd       	sub	sp,-4
80003eea:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003eee:	00 00       	add	r0,r0
80003ef0:	00 00       	add	r0,r0
80003ef2:	0a 28       	rsub	r8,r5
80003ef4:	00 00       	add	r0,r0
80003ef6:	0a 20       	rsub	r0,r5

80003ef8 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003ef8:	30 19       	mov	r9,1
80003efa:	48 28       	lddpc	r8,80003f00 <stdio_usb_enable+0x8>
80003efc:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80003efe:	5e ff       	retal	1
80003f00:	00 00       	add	r0,r0
80003f02:	08 88       	andn	r8,r4

80003f04 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
80003f04:	30 09       	mov	r9,0
80003f06:	48 28       	lddpc	r8,80003f0c <stdio_usb_disable+0x8>
80003f08:	b0 89       	st.b	r8[0x0],r9
}
80003f0a:	5e fc       	retal	r12
80003f0c:	00 00       	add	r0,r0
80003f0e:	08 88       	andn	r8,r4

80003f10 <stdio_usb_vbus_event>:
	
	*data = udi_cdc_getc ();
}

void stdio_usb_vbus_event(bool b_high)
{
80003f10:	d4 01       	pushm	lr
	if (b_high) {
80003f12:	58 0c       	cp.w	r12,0
80003f14:	c0 40       	breq	80003f1c <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80003f16:	f0 1f 00 04 	mcall	80003f24 <stdio_usb_vbus_event+0x14>
80003f1a:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
80003f1c:	f0 1f 00 03 	mcall	80003f28 <stdio_usb_vbus_event+0x18>
80003f20:	d8 02       	popm	pc
80003f22:	00 00       	add	r0,r0
80003f24:	80 00       	ld.sh	r0,r0[0x0]
80003f26:	2a 7c       	sub	r12,-89
80003f28:	80 00       	ld.sh	r0,r0[0x0]
80003f2a:	27 2c       	sub	r12,114

80003f2c <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init (volatile void * usart)
{
80003f2c:	d4 01       	pushm	lr
	stdio_base = usart;
80003f2e:	48 98       	lddpc	r8,80003f50 <stdio_usb_init+0x24>
80003f30:	91 0c       	st.w	r8[0x0],r12
	ptr_put = stdio_usb_putchar;
80003f32:	48 99       	lddpc	r9,80003f54 <stdio_usb_init+0x28>
80003f34:	48 98       	lddpc	r8,80003f58 <stdio_usb_init+0x2c>
80003f36:	91 09       	st.w	r8[0x0],r9
	ptr_get = stdio_usb_getchar;
80003f38:	48 99       	lddpc	r9,80003f5c <stdio_usb_init+0x30>
80003f3a:	48 a8       	lddpc	r8,80003f60 <stdio_usb_init+0x34>
80003f3c:	91 09       	st.w	r8[0x0],r9

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80003f3e:	f0 1f 00 0a 	mcall	80003f64 <stdio_usb_init+0x38>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
80003f42:	f0 1f 00 0a 	mcall	80003f68 <stdio_usb_init+0x3c>
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();

	if (! udc_include_vbus_monitoring ()) {
80003f46:	c0 41       	brne	80003f4e <stdio_usb_init+0x22>
		stdio_usb_vbus_event (true);
80003f48:	30 1c       	mov	r12,1
80003f4a:	f0 1f 00 09 	mcall	80003f6c <stdio_usb_init+0x40>
80003f4e:	d8 02       	popm	pc
80003f50:	00 00       	add	r0,r0
80003f52:	0a 28       	rsub	r8,r5
80003f54:	80 00       	ld.sh	r0,r0[0x0]
80003f56:	3f 9c       	mov	r12,-7
80003f58:	00 00       	add	r0,r0
80003f5a:	0a 24       	rsub	r4,r5
80003f5c:	80 00       	ld.sh	r0,r0[0x0]
80003f5e:	3f 70       	mov	r0,-9
80003f60:	00 00       	add	r0,r0
80003f62:	0a 20       	rsub	r0,r5
80003f64:	80 00       	ld.sh	r0,r0[0x0]
80003f66:	2a ec       	sub	r12,-82
80003f68:	80 00       	ld.sh	r0,r0[0x0]
80003f6a:	23 9c       	sub	r12,57
80003f6c:	80 00       	ld.sh	r0,r0[0x0]
80003f6e:	3f 10       	mov	r0,-15

80003f70 <stdio_usb_getchar>:

	return udi_cdc_putc (data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * usart, int * data)
{
80003f70:	eb cd 40 80 	pushm	r7,lr
80003f74:	16 97       	mov	r7,r11
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003f76:	48 88       	lddpc	r8,80003f94 <stdio_usb_getchar+0x24>
80003f78:	11 89       	ld.ub	r9,r8[0x0]
80003f7a:	30 08       	mov	r8,0
80003f7c:	f0 09 18 00 	cp.b	r9,r8
80003f80:	c0 51       	brne	80003f8a <stdio_usb_getchar+0x1a>
		*data = 0;  // -1
80003f82:	30 08       	mov	r8,0
80003f84:	97 08       	st.w	r11[0x0],r8
		return;
80003f86:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	
	*data = udi_cdc_getc ();
80003f8a:	f0 1f 00 04 	mcall	80003f98 <stdio_usb_getchar+0x28>
80003f8e:	8f 0c       	st.w	r7[0x0],r12
80003f90:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f94:	00 00       	add	r0,r0
80003f96:	08 88       	andn	r8,r4
80003f98:	80 00       	ld.sh	r0,r0[0x0]
80003f9a:	34 f4       	mov	r4,79

80003f9c <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * usart, int data)
{
80003f9c:	d4 01       	pushm	lr
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003f9e:	48 78       	lddpc	r8,80003fb8 <stdio_usb_putchar+0x1c>
80003fa0:	11 89       	ld.ub	r9,r8[0x0]
80003fa2:	30 08       	mov	r8,0
80003fa4:	f0 09 18 00 	cp.b	r9,r8
80003fa8:	c0 60       	breq	80003fb4 <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc (data) ? 0 : -1;
80003faa:	16 9c       	mov	r12,r11
80003fac:	f0 1f 00 04 	mcall	80003fbc <stdio_usb_putchar+0x20>
80003fb0:	c0 21       	brne	80003fb4 <stdio_usb_putchar+0x18>
80003fb2:	dc 0a       	popm	pc,r12=-1
80003fb4:	d8 0a       	popm	pc,r12=0
80003fb6:	00 00       	add	r0,r0
80003fb8:	00 00       	add	r0,r0
80003fba:	08 88       	andn	r8,r4
80003fbc:	80 00       	ld.sh	r0,r0[0x0]
80003fbe:	33 f4       	mov	r4,63

80003fc0 <_write>:

#elif (defined(__GNUC__) && !defined(XMEGA))

	int __attribute__((weak))
	_write (int file, char * ptr, int len)
	{
80003fc0:	eb cd 40 f8 	pushm	r3-r7,lr
80003fc4:	16 94       	mov	r4,r11
80003fc6:	14 95       	mov	r5,r10
		int nChars = 0;
	
		if ( (file != 1)
80003fc8:	20 1c       	sub	r12,1
80003fca:	58 2c       	cp.w	r12,2
80003fcc:	e0 8b 00 13 	brhi	80003ff2 <_write+0x32>
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80003fd0:	58 0a       	cp.w	r10,0
80003fd2:	c0 31       	brne	80003fd8 <_write+0x18>
80003fd4:	30 07       	mov	r7,0
80003fd6:	c0 f8       	rjmp	80003ff4 <_write+0x34>
80003fd8:	30 07       	mov	r7,0
			if (ptr_put(stdio_base, *ptr++) < 0) {
80003fda:	48 93       	lddpc	r3,80003ffc <_write+0x3c>
80003fdc:	48 96       	lddpc	r6,80004000 <_write+0x40>
80003fde:	66 0c       	ld.w	r12,r3[0x0]
80003fe0:	6c 08       	ld.w	r8,r6[0x0]
80003fe2:	e8 07 07 0b 	ld.ub	r11,r4[r7]
80003fe6:	5d 18       	icall	r8
80003fe8:	c0 55       	brlt	80003ff2 <_write+0x32>
				return -1;
			}
			++nChars;
80003fea:	2f f7       	sub	r7,-1
	
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80003fec:	0e 35       	cp.w	r5,r7
80003fee:	cf 81       	brne	80003fde <_write+0x1e>
80003ff0:	c0 28       	rjmp	80003ff4 <_write+0x34>
80003ff2:	3f f7       	mov	r7,-1
				return -1;
			}
			++nChars;
		}
		return nChars;
	}
80003ff4:	0e 9c       	mov	r12,r7
80003ff6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003ffa:	00 00       	add	r0,r0
80003ffc:	00 00       	add	r0,r0
80003ffe:	0a 28       	rsub	r8,r5
80004000:	00 00       	add	r0,r0
80004002:	0a 24       	rsub	r4,r5

80004004 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
80004004:	f8 c8 ff f8 	sub	r8,r12,-8
80004008:	99 18       	st.w	r12[0x4],r8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
8000400a:	3f f9       	mov	r9,-1
8000400c:	99 29       	st.w	r12[0x8],r9

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
8000400e:	99 38       	st.w	r12[0xc],r8
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
80004010:	99 48       	st.w	r12[0x10],r8

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
80004012:	30 08       	mov	r8,0
80004014:	99 08       	st.w	r12[0x0],r8
}
80004016:	5e fc       	retal	r12

80004018 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80004018:	30 08       	mov	r8,0
8000401a:	99 48       	st.w	r12[0x10],r8
}
8000401c:	5e fc       	retal	r12

8000401e <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
8000401e:	78 18       	ld.w	r8,r12[0x4]

	pxNewListItem->pxNext = pxIndex->pxNext;
80004020:	70 19       	ld.w	r9,r8[0x4]
80004022:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxPrevious = pxList->pxIndex;
80004024:	78 19       	ld.w	r9,r12[0x4]
80004026:	97 29       	st.w	r11[0x8],r9
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80004028:	70 19       	ld.w	r9,r8[0x4]
8000402a:	93 2b       	st.w	r9[0x8],r11
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
8000402c:	91 1b       	st.w	r8[0x4],r11
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
8000402e:	99 1b       	st.w	r12[0x4],r11

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004030:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
80004032:	78 08       	ld.w	r8,r12[0x0]
80004034:	2f f8       	sub	r8,-1
80004036:	99 08       	st.w	r12[0x0],r8
}
80004038:	5e fc       	retal	r12

8000403a <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
8000403a:	76 0a       	ld.w	r10,r11[0x0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
8000403c:	5b fa       	cp.w	r10,-1
8000403e:	c0 31       	brne	80004044 <vListInsert+0xa>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80004040:	78 48       	ld.w	r8,r12[0x10]
80004042:	c0 c8       	rjmp	8000405a <vListInsert+0x20>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
80004044:	f8 c8 ff f8 	sub	r8,r12,-8
80004048:	70 19       	ld.w	r9,r8[0x4]
8000404a:	72 09       	ld.w	r9,r9[0x0]
8000404c:	12 3a       	cp.w	r10,r9
8000404e:	c0 63       	brcs	8000405a <vListInsert+0x20>
80004050:	70 18       	ld.w	r8,r8[0x4]
80004052:	70 19       	ld.w	r9,r8[0x4]
80004054:	72 09       	ld.w	r9,r9[0x0]
80004056:	12 3a       	cp.w	r10,r9
80004058:	cf c2       	brcc	80004050 <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
8000405a:	70 19       	ld.w	r9,r8[0x4]
8000405c:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
8000405e:	93 2b       	st.w	r9[0x8],r11
	pxNewListItem->pxPrevious = pxIterator;
80004060:	97 28       	st.w	r11[0x8],r8
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
80004062:	91 1b       	st.w	r8[0x4],r11

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004064:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
80004066:	78 08       	ld.w	r8,r12[0x0]
80004068:	2f f8       	sub	r8,-1
8000406a:	99 08       	st.w	r12[0x0],r8
}
8000406c:	5e fc       	retal	r12

8000406e <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
8000406e:	78 18       	ld.w	r8,r12[0x4]
80004070:	78 29       	ld.w	r9,r12[0x8]
80004072:	91 29       	st.w	r8[0x8],r9
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80004074:	78 28       	ld.w	r8,r12[0x8]
80004076:	78 19       	ld.w	r9,r12[0x4]
80004078:	91 19       	st.w	r8[0x4],r9
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
8000407a:	78 48       	ld.w	r8,r12[0x10]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
8000407c:	70 19       	ld.w	r9,r8[0x4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
8000407e:	18 39       	cp.w	r9,r12
80004080:	f9 f9 00 02 	ld.weq	r9,r12[0x8]
80004084:	f1 f9 0a 01 	st.weq	r8[0x4],r9
	}

	pxItemToRemove->pvContainer = NULL;
80004088:	30 09       	mov	r9,0
8000408a:	99 49       	st.w	r12[0x10],r9
	( pxList->uxNumberOfItems )--;
8000408c:	70 09       	ld.w	r9,r8[0x0]
8000408e:	20 19       	sub	r9,1
80004090:	91 09       	st.w	r8[0x0],r9
}
80004092:	5e fc       	retal	r12

80004094 <pxPortInitialiseStack>:
	/* Setup the initial stack of the task.  The stack is set exactly as
	expected by the portRESTORE_CONTEXT() macro. */

	/* When the task starts, it will expect to find the function parameter in R12. */
	pxTopOfStack--;
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x08080808;					/* R8 */
80004094:	e0 68 08 08 	mov	r8,2056
80004098:	ea 18 08 08 	orh	r8,0x808
8000409c:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x09090909;					/* R9 */
8000409e:	e0 68 09 09 	mov	r8,2313
800040a2:	ea 18 09 09 	orh	r8,0x909
800040a6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0A0A0A0A;					/* R10 */
800040a8:	e0 68 0a 0a 	mov	r8,2570
800040ac:	ea 18 0a 0a 	orh	r8,0xa0a
800040b0:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0B0B0B0B;					/* R11 */
800040b2:	e0 68 0b 0b 	mov	r8,2827
800040b6:	ea 18 0b 0b 	orh	r8,0xb0b
800040ba:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pvParameters;					/* R12 */
800040bc:	18 da       	st.w	--r12,r10
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xDEADBEEF;					/* R14/LR */
800040be:	e0 68 be ef 	mov	r8,48879
800040c2:	ea 18 de ad 	orh	r8,0xdead
800040c6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE; /* R15/PC */
800040c8:	18 db       	st.w	--r12,r11
	*pxTopOfStack-- = ( portSTACK_TYPE ) portINITIAL_SR;				/* SR */
800040ca:	fc 18 00 40 	movh	r8,0x40
800040ce:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xFF0000FF;					/* R0 */
800040d0:	e0 68 00 ff 	mov	r8,255
800040d4:	ea 18 ff 00 	orh	r8,0xff00
800040d8:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x01010101;					/* R1 */
800040da:	e0 68 01 01 	mov	r8,257
800040de:	ea 18 01 01 	orh	r8,0x101
800040e2:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x02020202;					/* R2 */
800040e4:	e0 68 02 02 	mov	r8,514
800040e8:	ea 18 02 02 	orh	r8,0x202
800040ec:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x03030303;					/* R3 */
800040ee:	e0 68 03 03 	mov	r8,771
800040f2:	ea 18 03 03 	orh	r8,0x303
800040f6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x04040404;					/* R4 */
800040f8:	e0 68 04 04 	mov	r8,1028
800040fc:	ea 18 04 04 	orh	r8,0x404
80004100:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x05050505;					/* R5 */
80004102:	e0 68 05 05 	mov	r8,1285
80004106:	ea 18 05 05 	orh	r8,0x505
8000410a:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x06060606;					/* R6 */
8000410c:	e0 68 06 06 	mov	r8,1542
80004110:	ea 18 06 06 	orh	r8,0x606
80004114:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x07070707;					/* R7 */
80004116:	e0 68 07 07 	mov	r8,1799
8000411a:	ea 18 07 07 	orh	r8,0x707
8000411e:	18 d8       	st.w	--r12,r8
	*pxTopOfStack = ( portSTACK_TYPE ) portNO_CRITICAL_NESTING;			/* ulCriticalNesting */
80004120:	30 08       	mov	r8,0
80004122:	18 d8       	st.w	--r12,r8

	return pxTopOfStack;
}
80004124:	5e fc       	retal	r12
80004126:	d7 03       	nop

80004128 <vPortEnterCritical>:
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
__attribute__((__noinline__)) void vPortEnterCritical( void )
{
	/* Disable interrupts */
	portDISABLE_INTERRUPTS();
80004128:	d3 03       	ssrf	0x10

	/* Now interrupts are disabled ulCriticalNesting can be accessed
	 directly.  Increment ulCriticalNesting to keep a count of how many times
	 portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
8000412a:	48 38       	lddpc	r8,80004134 <vPortEnterCritical+0xc>
8000412c:	70 09       	ld.w	r9,r8[0x0]
8000412e:	2f f9       	sub	r9,-1
80004130:	91 09       	st.w	r8[0x0],r9
}
80004132:	5e fc       	retal	r12
80004134:	00 00       	add	r0,r0
80004136:	00 f4       	st.b	--r0,r4

80004138 <xPortStartScheduler>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
80004138:	d4 01       	pushm	lr
	};

#endif

	/* Disable all interrupt/exception. */
	portDISABLE_INTERRUPTS();
8000413a:	d3 03       	ssrf	0x10
		/* Start the timer/counter. */
		tc_start(tc, configTICK_TC_CHANNEL);
	}
	#else
	{
		INTC_register_interrupt(&vTick, AVR32_CORE_COMPARE_IRQ, AVR32_INTC_INT0);
8000413c:	30 0a       	mov	r10,0
8000413e:	14 9b       	mov	r11,r10
80004140:	49 2c       	lddpc	r12,80004188 <xPortStartScheduler+0x50>
80004142:	f0 1f 00 13 	mcall	8000418c <xPortStartScheduler+0x54>
/* Schedule the COUNT&COMPARE match interrupt in (configCPU_CLOCK_HZ/configTICK_RATE_HZ)
clock cycles from now. */
#if( configTICK_USE_TC==0 )
	static void prvScheduleFirstTick(void)
	{
		Set_system_register(AVR32_COMPARE, configCPU_CLOCK_HZ/configTICK_RATE_HZ);
80004146:	e0 68 2e e0 	mov	r8,12000
8000414a:	e3 b8 00 43 	mtsr	0x10c,r8
		Set_system_register(AVR32_COUNT, 0);
8000414e:	30 08       	mov	r8,0
80004150:	e3 b8 00 42 	mtsr	0x108,r8
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
	portRESTORE_CONTEXT();
80004154:	e0 68 09 5c 	mov	r8,2396
80004158:	ea 18 00 00 	orh	r8,0x0
8000415c:	70 00       	ld.w	r0,r8[0x0]
8000415e:	60 0d       	ld.w	sp,r0[0x0]
80004160:	1b 00       	ld.w	r0,sp++
80004162:	e0 68 00 f4 	mov	r8,244
80004166:	ea 18 00 00 	orh	r8,0x0
8000416a:	91 00       	st.w	r8[0x0],r0
8000416c:	e3 cd 00 ff 	ldm	sp++,r0-r7
80004170:	2f ed       	sub	sp,-8
80004172:	e3 cd 5f 00 	ldm	sp++,r8-r12,lr
80004176:	fa f0 ff e0 	ld.w	r0,sp[-32]
8000417a:	e3 b0 00 00 	mtsr	0x0,r0
8000417e:	fa f0 ff dc 	ld.w	r0,sp[-36]
80004182:	fa ff ff e4 	ld.w	pc,sp[-28]

	/* Should not get here! */
	return 0;
}
80004186:	d8 0a       	popm	pc,r12=0
80004188:	80 00       	ld.sh	r0,r0[0x0]
8000418a:	42 54       	lddsp	r4,sp[0x94]
8000418c:	80 00       	ld.sh	r0,r0[0x0]
8000418e:	22 0c       	sub	r12,32

80004190 <SCALLYield>:
/*-----------------------------------------------------------*/
__attribute__((__naked__)) void SCALLYield( void );
__attribute__((__naked__)) void SCALLYield( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_SCALL();
80004190:	20 6d       	sub	sp,24
80004192:	eb cd 00 ff 	pushm	r0-r7
80004196:	fa c7 ff c0 	sub	r7,sp,-64
8000419a:	ee f0 ff f8 	ld.w	r0,r7[-8]
8000419e:	ef 40 ff e0 	st.w	r7[-32],r0
800041a2:	ee f0 ff fc 	ld.w	r0,r7[-4]
800041a6:	ef 40 ff e4 	st.w	r7[-28],r0
800041aa:	eb c7 5f 00 	stm	--r7,r8-r12,lr
800041ae:	e0 68 00 f4 	mov	r8,244
800041b2:	ea 18 00 00 	orh	r8,0x0
800041b6:	70 00       	ld.w	r0,r8[0x0]
800041b8:	1a d0       	st.w	--sp,r0
800041ba:	f0 1f 00 1a 	mcall	80004220 <LABEL_RET_SCALL_266+0x14>
800041be:	e0 68 09 5c 	mov	r8,2396
800041c2:	ea 18 00 00 	orh	r8,0x0
800041c6:	70 00       	ld.w	r0,r8[0x0]
800041c8:	81 0d       	st.w	r0[0x0],sp
	vTaskSwitchContext();
800041ca:	f0 1f 00 17 	mcall	80004224 <LABEL_RET_SCALL_266+0x18>
	portRESTORE_CONTEXT_SCALL();
800041ce:	e0 68 09 5c 	mov	r8,2396
800041d2:	ea 18 00 00 	orh	r8,0x0
800041d6:	70 00       	ld.w	r0,r8[0x0]
800041d8:	60 0d       	ld.w	sp,r0[0x0]
800041da:	1b 00       	ld.w	r0,sp++
800041dc:	e0 68 00 f4 	mov	r8,244
800041e0:	ea 18 00 00 	orh	r8,0x0
800041e4:	91 00       	st.w	r8[0x0],r0
800041e6:	fa c7 ff d8 	sub	r7,sp,-40
800041ea:	e3 c7 5f 00 	ldm	r7++,r8-r12,lr
800041ee:	ee f0 ff e0 	ld.w	r0,r7[-32]
800041f2:	e0 61 00 f4 	mov	r1,244
800041f6:	ea 11 00 00 	orh	r1,0x0
800041fa:	62 02       	ld.w	r2,r1[0x0]
800041fc:	58 02       	cp.w	r2,0
800041fe:	c0 70       	breq	8000420c <LABEL_RET_SCALL_266>
80004200:	e4 c2 00 01 	sub	r2,r2,1
80004204:	83 02       	st.w	r1[0x0],r2
80004206:	58 02       	cp.w	r2,0
80004208:	c0 21       	brne	8000420c <LABEL_RET_SCALL_266>
8000420a:	b1 c0       	cbr	r0,0x10

8000420c <LABEL_RET_SCALL_266>:
8000420c:	ef 40 ff f8 	st.w	r7[-8],r0
80004210:	ee f0 ff e4 	ld.w	r0,r7[-28]
80004214:	ef 40 ff fc 	st.w	r7[-4],r0
80004218:	e3 cd 00 ff 	ldm	sp++,r0-r7
8000421c:	2f ad       	sub	sp,-24
8000421e:	d6 13       	rets
80004220:	80 00       	ld.sh	r0,r0[0x0]
80004222:	41 28       	lddsp	r8,sp[0x48]
80004224:	80 00       	ld.sh	r0,r0[0x0]
80004226:	43 68       	lddsp	r8,sp[0xd8]

80004228 <prvClearCcInt>:
		Set_system_register(AVR32_COUNT, 0);
	}

	__attribute__((__noinline__)) static void prvClearCcInt(void)
	{
		Set_system_register(AVR32_COMPARE, Get_system_register(AVR32_COMPARE));
80004228:	e1 b8 00 43 	mfsr	r8,0x10c
8000422c:	e3 b8 00 43 	mtsr	0x10c,r8
	}
80004230:	5e fc       	retal	r12
80004232:	d7 03       	nop

80004234 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

__attribute__((__noinline__)) void vPortExitCritical( void )
{
	if(ulCriticalNesting > portNO_CRITICAL_NESTING)
80004234:	48 78       	lddpc	r8,80004250 <vPortExitCritical+0x1c>
80004236:	70 08       	ld.w	r8,r8[0x0]
80004238:	58 08       	cp.w	r8,0
8000423a:	5e 0c       	reteq	r12
	{
		ulCriticalNesting--;
8000423c:	48 58       	lddpc	r8,80004250 <vPortExitCritical+0x1c>
8000423e:	70 09       	ld.w	r9,r8[0x0]
80004240:	20 19       	sub	r9,1
80004242:	91 09       	st.w	r8[0x0],r9
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
80004244:	70 08       	ld.w	r8,r8[0x0]
80004246:	58 08       	cp.w	r8,0
80004248:	5e 1c       	retne	r12
		{
			/* Enable all interrupt/exception. */
			portENABLE_INTERRUPTS();
8000424a:	d5 03       	csrf	0x10
8000424c:	5e fc       	retal	r12
8000424e:	00 00       	add	r0,r0
80004250:	00 00       	add	r0,r0
80004252:	00 f4       	st.b	--r0,r4

80004254 <vTick>:
/* The preemptive scheduler is defined as "naked" as the full context is saved
on entry as part of the context switch. */
__attribute__((__naked__)) static void vTick( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_OS_INT();
80004254:	eb cd 00 ff 	pushm	r0-r7
80004258:	e0 68 00 f4 	mov	r8,244
8000425c:	ea 18 00 00 	orh	r8,0x0
80004260:	70 00       	ld.w	r0,r8[0x0]
80004262:	1a d0       	st.w	--sp,r0
80004264:	7a 90       	ld.w	r0,sp[0x24]
80004266:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
8000426a:	58 10       	cp.w	r0,1
8000426c:	e0 8b 00 08 	brhi	8000427c <LABEL_INT_SKIP_SAVE_CONTEXT_240>
80004270:	e0 68 09 5c 	mov	r8,2396
80004274:	ea 18 00 00 	orh	r8,0x0
80004278:	70 00       	ld.w	r0,r8[0x0]
8000427a:	81 0d       	st.w	r0[0x0],sp

8000427c <LABEL_INT_SKIP_SAVE_CONTEXT_240>:
	#if( configTICK_USE_TC==1 )
		/* Clear the interrupt flag. */
		prvClearTcInt();
	#else
		/* Clear the interrupt flag. */
		prvClearCcInt();
8000427c:	f0 1f 00 12 	mcall	800042c4 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x14>
	#endif

	/* Because FreeRTOS is not supposed to run with nested interrupts, put all OS
	calls in a critical section . */
	portENTER_CRITICAL();
80004280:	f0 1f 00 12 	mcall	800042c8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
		vTaskIncrementTick();
80004284:	f0 1f 00 12 	mcall	800042cc <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x1c>
	portEXIT_CRITICAL();
80004288:	f0 1f 00 12 	mcall	800042d0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>

	/* Restore the context of the "elected task". */
	portRESTORE_CONTEXT_OS_INT();
8000428c:	7a 90       	ld.w	r0,sp[0x24]
8000428e:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
80004292:	58 10       	cp.w	r0,1
80004294:	e0 8b 00 0e 	brhi	800042b0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257>
80004298:	f0 1f 00 0c 	mcall	800042c8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
8000429c:	f0 1f 00 0e 	mcall	800042d4 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x24>
800042a0:	f0 1f 00 0c 	mcall	800042d0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>
800042a4:	e0 68 09 5c 	mov	r8,2396
800042a8:	ea 18 00 00 	orh	r8,0x0
800042ac:	70 00       	ld.w	r0,r8[0x0]
800042ae:	60 0d       	ld.w	sp,r0[0x0]

800042b0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257>:
800042b0:	1b 00       	ld.w	r0,sp++
800042b2:	e0 68 00 f4 	mov	r8,244
800042b6:	ea 18 00 00 	orh	r8,0x0
800042ba:	91 00       	st.w	r8[0x0],r0
800042bc:	e3 cd 00 ff 	ldm	sp++,r0-r7
800042c0:	d6 03       	rete
800042c2:	00 00       	add	r0,r0
800042c4:	80 00       	ld.sh	r0,r0[0x0]
800042c6:	42 28       	lddsp	r8,sp[0x88]
800042c8:	80 00       	ld.sh	r0,r0[0x0]
800042ca:	41 28       	lddsp	r8,sp[0x48]
800042cc:	80 00       	ld.sh	r0,r0[0x0]
800042ce:	43 e4       	lddsp	r4,sp[0xf8]
800042d0:	80 00       	ld.sh	r0,r0[0x0]
800042d2:	42 34       	lddsp	r4,sp[0x8c]
800042d4:	80 00       	ld.sh	r0,r0[0x0]
800042d6:	43 68       	lddsp	r8,sp[0xd8]

800042d8 <__malloc_lock>:
 * safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_lock(struct _reent *ptr);
void __malloc_lock(struct _reent *ptr)
{
800042d8:	d4 01       	pushm	lr
	vTaskSuspendAll();
800042da:	f0 1f 00 02 	mcall	800042e0 <__malloc_lock+0x8>
}
800042de:	d8 02       	popm	pc
800042e0:	80 00       	ld.sh	r0,r0[0x0]
800042e2:	43 58       	lddsp	r8,sp[0xd4]

800042e4 <__malloc_unlock>:
 * a safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_unlock(struct _reent *ptr);
void __malloc_unlock(struct _reent *ptr)
{
800042e4:	d4 01       	pushm	lr
	xTaskResumeAll();
800042e6:	f0 1f 00 02 	mcall	800042ec <__malloc_unlock+0x8>
}
800042ea:	d8 02       	popm	pc
800042ec:	80 00       	ld.sh	r0,r0[0x0]
800042ee:	44 fc       	lddsp	r12,sp[0x13c]

800042f0 <_init_startup>:
 * exception vectors are not compatible with the SCALL management in the current
 * FreeRTOS port. More low-level initializations are besides added here.
 */
int _init_startup(void);
int _init_startup(void)
{
800042f0:	d4 01       	pushm	lr
		extern void __heap_end__;
		portBASE_TYPE *pxMem;
	#endif

	/* Load the Exception Vector Base Address in the corresponding system register. */
	Set_system_register( AVR32_EVBA, ( int ) &_evba );
800042f2:	48 48       	lddpc	r8,80004300 <_init_startup+0x10>
800042f4:	e3 b8 00 01 	mtsr	0x4,r8

	/* Enable exceptions. */
	ENABLE_ALL_EXCEPTIONS();
800042f8:	d5 53       	csrf	0x15

	/* Initialize interrupt handling. */
	INTC_init_interrupts();
800042fa:	f0 1f 00 03 	mcall	80004304 <_init_startup+0x14>
	}
	#endif

  // Don't-care value for GCC.
  return 1;
}
800042fe:	da 0a       	popm	pc,r12=1
80004300:	80 00       	ld.sh	r0,r0[0x0]
80004302:	aa 00       	st.h	r5[0x0],r0
80004304:	80 00       	ld.sh	r0,r0[0x0]
80004306:	22 3c       	sub	r12,35

80004308 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80004308:	eb cd 40 80 	pushm	r7,lr
8000430c:	18 97       	mov	r7,r12
	if( pv )
8000430e:	58 0c       	cp.w	r12,0
80004310:	c0 80       	breq	80004320 <vPortFree+0x18>
	{
		vTaskSuspendAll();
80004312:	f0 1f 00 05 	mcall	80004324 <vPortFree+0x1c>
		{
			free( pv );
80004316:	0e 9c       	mov	r12,r7
80004318:	f0 1f 00 04 	mcall	80004328 <vPortFree+0x20>
		}
		xTaskResumeAll();
8000431c:	f0 1f 00 04 	mcall	8000432c <vPortFree+0x24>
80004320:	e3 cd 80 80 	ldm	sp++,r7,pc
80004324:	80 00       	ld.sh	r0,r0[0x0]
80004326:	43 58       	lddsp	r8,sp[0xd4]
80004328:	80 00       	ld.sh	r0,r0[0x0]
8000432a:	4a c8       	lddpc	r8,800043d8 <vTaskSwitchContext+0x70>
8000432c:	80 00       	ld.sh	r0,r0[0x0]
8000432e:	44 fc       	lddsp	r12,sp[0x13c]

80004330 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
80004330:	eb cd 40 80 	pushm	r7,lr
80004334:	18 97       	mov	r7,r12
void *pvReturn;

	vTaskSuspendAll();
80004336:	f0 1f 00 06 	mcall	8000434c <pvPortMalloc+0x1c>
	{
		pvReturn = malloc( xWantedSize );
8000433a:	0e 9c       	mov	r12,r7
8000433c:	f0 1f 00 05 	mcall	80004350 <pvPortMalloc+0x20>
80004340:	18 97       	mov	r7,r12
	}
	xTaskResumeAll();
80004342:	f0 1f 00 05 	mcall	80004354 <pvPortMalloc+0x24>
		}
	}
	#endif
	
	return pvReturn;
}
80004346:	0e 9c       	mov	r12,r7
80004348:	e3 cd 80 80 	ldm	sp++,r7,pc
8000434c:	80 00       	ld.sh	r0,r0[0x0]
8000434e:	43 58       	lddsp	r8,sp[0xd4]
80004350:	80 00       	ld.sh	r0,r0[0x0]
80004352:	4a e0       	lddpc	r0,80004408 <vTaskIncrementTick+0x24>
80004354:	80 00       	ld.sh	r0,r0[0x0]
80004356:	44 fc       	lddsp	r12,sp[0x13c]

80004358 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
80004358:	48 38       	lddpc	r8,80004364 <vTaskSuspendAll+0xc>
8000435a:	70 09       	ld.w	r9,r8[0x0]
8000435c:	2f f9       	sub	r9,-1
8000435e:	91 09       	st.w	r8[0x0],r9
}
80004360:	5e fc       	retal	r12
80004362:	00 00       	add	r0,r0
80004364:	00 00       	add	r0,r0
80004366:	09 8c       	ld.ub	r12,r4[0x0]

80004368 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
80004368:	49 a8       	lddpc	r8,800043d0 <vTaskSwitchContext+0x68>
8000436a:	70 08       	ld.w	r8,r8[0x0]
8000436c:	58 08       	cp.w	r8,0
8000436e:	c0 b1       	brne	80004384 <vTaskSwitchContext+0x1c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80004370:	49 98       	lddpc	r8,800043d4 <vTaskSwitchContext+0x6c>
80004372:	70 08       	ld.w	r8,r8[0x0]
80004374:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004378:	49 89       	lddpc	r9,800043d8 <vTaskSwitchContext+0x70>
8000437a:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000437e:	58 08       	cp.w	r8,0
80004380:	c0 60       	breq	8000438c <vTaskSwitchContext+0x24>
80004382:	c1 18       	rjmp	800043a4 <vTaskSwitchContext+0x3c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
80004384:	30 19       	mov	r9,1
80004386:	49 68       	lddpc	r8,800043dc <vTaskSwitchContext+0x74>
80004388:	91 09       	st.w	r8[0x0],r9
8000438a:	5e fc       	retal	r12
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
8000438c:	49 28       	lddpc	r8,800043d4 <vTaskSwitchContext+0x6c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
8000438e:	49 3a       	lddpc	r10,800043d8 <vTaskSwitchContext+0x70>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
80004390:	70 09       	ld.w	r9,r8[0x0]
80004392:	20 19       	sub	r9,1
80004394:	91 09       	st.w	r8[0x0],r9
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80004396:	70 09       	ld.w	r9,r8[0x0]
80004398:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000439c:	f4 09 03 29 	ld.w	r9,r10[r9<<0x2]
800043a0:	58 09       	cp.w	r9,0
800043a2:	cf 70       	breq	80004390 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
800043a4:	48 c8       	lddpc	r8,800043d4 <vTaskSwitchContext+0x6c>
800043a6:	70 08       	ld.w	r8,r8[0x0]
800043a8:	f0 08 00 28 	add	r8,r8,r8<<0x2
800043ac:	48 b9       	lddpc	r9,800043d8 <vTaskSwitchContext+0x70>
800043ae:	f2 08 00 28 	add	r8,r9,r8<<0x2
800043b2:	70 19       	ld.w	r9,r8[0x4]
800043b4:	72 19       	ld.w	r9,r9[0x4]
800043b6:	91 19       	st.w	r8[0x4],r9
800043b8:	f0 ca ff f8 	sub	r10,r8,-8
800043bc:	14 39       	cp.w	r9,r10
800043be:	f3 f9 00 01 	ld.weq	r9,r9[0x4]
800043c2:	f1 f9 0a 01 	st.weq	r8[0x4],r9
800043c6:	70 18       	ld.w	r8,r8[0x4]
800043c8:	70 39       	ld.w	r9,r8[0xc]
800043ca:	48 68       	lddpc	r8,800043e0 <vTaskSwitchContext+0x78>
800043cc:	91 09       	st.w	r8[0x0],r9
800043ce:	5e fc       	retal	r12
800043d0:	00 00       	add	r0,r0
800043d2:	09 8c       	ld.ub	r12,r4[0x0]
800043d4:	00 00       	add	r0,r0
800043d6:	09 c4       	ld.ub	r4,r4[0x4]
800043d8:	00 00       	add	r0,r0
800043da:	08 a8       	st.w	r4++,r8
800043dc:	00 00       	add	r0,r0
800043de:	09 ac       	ld.ub	r12,r4[0x2]
800043e0:	00 00       	add	r0,r0
800043e2:	09 5c       	ld.sh	r12,--r4

800043e4 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
800043e4:	eb cd 40 fe 	pushm	r1-r7,lr
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
800043e8:	4b a8       	lddpc	r8,800044d0 <vTaskIncrementTick+0xec>
800043ea:	70 08       	ld.w	r8,r8[0x0]
800043ec:	58 08       	cp.w	r8,0
800043ee:	c6 a1       	brne	800044c2 <vTaskIncrementTick+0xde>
	{
		++xTickCount;
800043f0:	4b 98       	lddpc	r8,800044d4 <vTaskIncrementTick+0xf0>
800043f2:	70 09       	ld.w	r9,r8[0x0]
800043f4:	2f f9       	sub	r9,-1
800043f6:	91 09       	st.w	r8[0x0],r9
		if( xTickCount == ( portTickType ) 0 )
800043f8:	70 08       	ld.w	r8,r8[0x0]
800043fa:	58 08       	cp.w	r8,0
800043fc:	c1 a1       	brne	80004430 <vTaskIncrementTick+0x4c>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
800043fe:	4b 78       	lddpc	r8,800044d8 <vTaskIncrementTick+0xf4>
80004400:	70 0a       	ld.w	r10,r8[0x0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
80004402:	4b 79       	lddpc	r9,800044dc <vTaskIncrementTick+0xf8>
80004404:	72 0b       	ld.w	r11,r9[0x0]
80004406:	91 0b       	st.w	r8[0x0],r11
			pxOverflowDelayedTaskList = pxTemp;
80004408:	93 0a       	st.w	r9[0x0],r10
			xNumOfOverflows++;
8000440a:	4b 69       	lddpc	r9,800044e0 <vTaskIncrementTick+0xfc>
8000440c:	72 0a       	ld.w	r10,r9[0x0]
8000440e:	2f fa       	sub	r10,-1
80004410:	93 0a       	st.w	r9[0x0],r10
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80004412:	70 08       	ld.w	r8,r8[0x0]
80004414:	70 08       	ld.w	r8,r8[0x0]
80004416:	58 08       	cp.w	r8,0
80004418:	c0 51       	brne	80004422 <vTaskIncrementTick+0x3e>
				/* The new current delayed list is empty.  Set 
				xNextTaskUnblockTime to the maximum possible value so it is 
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until 
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
8000441a:	3f f9       	mov	r9,-1
8000441c:	4b 28       	lddpc	r8,800044e4 <vTaskIncrementTick+0x100>
8000441e:	91 09       	st.w	r8[0x0],r9
80004420:	c0 88       	rjmp	80004430 <vTaskIncrementTick+0x4c>
			{
				/* The new current delayed list is not empty, get the value of 
				the item at the head of the delayed list.  This is the time at 
				which the task at the head of the delayed list should be removed 
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80004422:	4a e8       	lddpc	r8,800044d8 <vTaskIncrementTick+0xf4>
80004424:	70 08       	ld.w	r8,r8[0x0]
80004426:	70 38       	ld.w	r8,r8[0xc]
80004428:	70 38       	ld.w	r8,r8[0xc]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
8000442a:	70 19       	ld.w	r9,r8[0x4]
8000442c:	4a e8       	lddpc	r8,800044e4 <vTaskIncrementTick+0x100>
8000442e:	91 09       	st.w	r8[0x0],r9
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
80004430:	4a 98       	lddpc	r8,800044d4 <vTaskIncrementTick+0xf0>
80004432:	70 09       	ld.w	r9,r8[0x0]
80004434:	4a c8       	lddpc	r8,800044e4 <vTaskIncrementTick+0x100>
80004436:	70 08       	ld.w	r8,r8[0x0]
80004438:	10 39       	cp.w	r9,r8
8000443a:	c4 83       	brcs	800044ca <vTaskIncrementTick+0xe6>
8000443c:	4a 78       	lddpc	r8,800044d8 <vTaskIncrementTick+0xf4>
8000443e:	70 08       	ld.w	r8,r8[0x0]
80004440:	70 08       	ld.w	r8,r8[0x0]
80004442:	58 08       	cp.w	r8,0
80004444:	c0 c0       	breq	8000445c <vTaskIncrementTick+0x78>
80004446:	4a 58       	lddpc	r8,800044d8 <vTaskIncrementTick+0xf4>
80004448:	70 08       	ld.w	r8,r8[0x0]
8000444a:	70 38       	ld.w	r8,r8[0xc]
8000444c:	70 37       	ld.w	r7,r8[0xc]
8000444e:	6e 18       	ld.w	r8,r7[0x4]
80004450:	4a 19       	lddpc	r9,800044d4 <vTaskIncrementTick+0xf0>
80004452:	72 09       	ld.w	r9,r9[0x0]
80004454:	12 38       	cp.w	r8,r9
80004456:	e0 88 00 14 	brls	8000447e <vTaskIncrementTick+0x9a>
8000445a:	c0 e8       	rjmp	80004476 <vTaskIncrementTick+0x92>
8000445c:	3f f9       	mov	r9,-1
8000445e:	4a 28       	lddpc	r8,800044e4 <vTaskIncrementTick+0x100>
80004460:	91 09       	st.w	r8[0x0],r9
80004462:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80004466:	6a 08       	ld.w	r8,r5[0x0]
80004468:	70 38       	ld.w	r8,r8[0xc]
8000446a:	70 37       	ld.w	r7,r8[0xc]
8000446c:	6e 18       	ld.w	r8,r7[0x4]
8000446e:	64 09       	ld.w	r9,r2[0x0]
80004470:	12 38       	cp.w	r8,r9
80004472:	e0 88 00 0b 	brls	80004488 <vTaskIncrementTick+0xa4>
80004476:	49 c9       	lddpc	r9,800044e4 <vTaskIncrementTick+0x100>
80004478:	93 08       	st.w	r9[0x0],r8
8000447a:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000447e:	49 b4       	lddpc	r4,800044e8 <vTaskIncrementTick+0x104>
80004480:	08 91       	mov	r1,r4
80004482:	49 b3       	lddpc	r3,800044ec <vTaskIncrementTick+0x108>
80004484:	49 55       	lddpc	r5,800044d8 <vTaskIncrementTick+0xf4>
80004486:	49 42       	lddpc	r2,800044d4 <vTaskIncrementTick+0xf0>
80004488:	ee c6 ff fc 	sub	r6,r7,-4
8000448c:	0c 9c       	mov	r12,r6
8000448e:	f0 1f 00 19 	mcall	800044f0 <vTaskIncrementTick+0x10c>
80004492:	6e a8       	ld.w	r8,r7[0x28]
80004494:	58 08       	cp.w	r8,0
80004496:	c0 50       	breq	800044a0 <vTaskIncrementTick+0xbc>
80004498:	ee cc ff e8 	sub	r12,r7,-24
8000449c:	f0 1f 00 15 	mcall	800044f0 <vTaskIncrementTick+0x10c>
800044a0:	6e bc       	ld.w	r12,r7[0x2c]
800044a2:	68 08       	ld.w	r8,r4[0x0]
800044a4:	10 3c       	cp.w	r12,r8
800044a6:	e3 fc ba 00 	st.whi	r1[0x0],r12
800044aa:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800044ae:	0c 9b       	mov	r11,r6
800044b0:	e6 0c 00 2c 	add	r12,r3,r12<<0x2
800044b4:	f0 1f 00 10 	mcall	800044f4 <vTaskIncrementTick+0x110>
800044b8:	6a 08       	ld.w	r8,r5[0x0]
800044ba:	70 08       	ld.w	r8,r8[0x0]
800044bc:	58 08       	cp.w	r8,0
800044be:	cd 41       	brne	80004466 <vTaskIncrementTick+0x82>
800044c0:	cc eb       	rjmp	8000445c <vTaskIncrementTick+0x78>
	}
	else
	{
		++uxMissedTicks;
800044c2:	48 e8       	lddpc	r8,800044f8 <vTaskIncrementTick+0x114>
800044c4:	70 09       	ld.w	r9,r8[0x0]
800044c6:	2f f9       	sub	r9,-1
800044c8:	91 09       	st.w	r8[0x0],r9
800044ca:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800044ce:	00 00       	add	r0,r0
800044d0:	00 00       	add	r0,r0
800044d2:	09 8c       	ld.ub	r12,r4[0x0]
800044d4:	00 00       	add	r0,r0
800044d6:	09 88       	ld.ub	r8,r4[0x0]
800044d8:	00 00       	add	r0,r0
800044da:	08 94       	mov	r4,r4
800044dc:	00 00       	add	r0,r0
800044de:	08 a4       	st.w	r4++,r4
800044e0:	00 00       	add	r0,r0
800044e2:	08 a0       	st.w	r4++,r0
800044e4:	00 00       	add	r0,r0
800044e6:	00 f8       	st.b	--r0,r8
800044e8:	00 00       	add	r0,r0
800044ea:	09 c4       	ld.ub	r4,r4[0x4]
800044ec:	00 00       	add	r0,r0
800044ee:	08 a8       	st.w	r4++,r8
800044f0:	80 00       	ld.sh	r0,r0[0x0]
800044f2:	40 6e       	lddsp	lr,sp[0x18]
800044f4:	80 00       	ld.sh	r0,r0[0x0]
800044f6:	40 1e       	lddsp	lr,sp[0x4]
800044f8:	00 00       	add	r0,r0
800044fa:	08 8c       	andn	r12,r4

800044fc <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
800044fc:	d4 31       	pushm	r0-r7,lr
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
800044fe:	f0 1f 00 2c 	mcall	800045ac <xTaskResumeAll+0xb0>
	{
		--uxSchedulerSuspended;
80004502:	4a c8       	lddpc	r8,800045b0 <xTaskResumeAll+0xb4>
80004504:	70 09       	ld.w	r9,r8[0x0]
80004506:	20 19       	sub	r9,1
80004508:	91 09       	st.w	r8[0x0],r9

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
8000450a:	70 08       	ld.w	r8,r8[0x0]
8000450c:	58 08       	cp.w	r8,0
8000450e:	c4 a1       	brne	800045a2 <xTaskResumeAll+0xa6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
80004510:	4a 98       	lddpc	r8,800045b4 <xTaskResumeAll+0xb8>
80004512:	70 08       	ld.w	r8,r8[0x0]
80004514:	58 08       	cp.w	r8,0
80004516:	c4 60       	breq	800045a2 <xTaskResumeAll+0xa6>
80004518:	30 04       	mov	r4,0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
8000451a:	4a 85       	lddpc	r5,800045b8 <xTaskResumeAll+0xbc>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
8000451c:	4a 83       	lddpc	r3,800045bc <xTaskResumeAll+0xc0>
8000451e:	06 90       	mov	r0,r3
80004520:	4a 82       	lddpc	r2,800045c0 <xTaskResumeAll+0xc4>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80004522:	4a 91       	lddpc	r1,800045c4 <xTaskResumeAll+0xc8>
80004524:	c1 e8       	rjmp	80004560 <xTaskResumeAll+0x64>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
80004526:	6a 38       	ld.w	r8,r5[0xc]
80004528:	70 37       	ld.w	r7,r8[0xc]
					vListRemove( &( pxTCB->xEventListItem ) );
8000452a:	ee cc ff e8 	sub	r12,r7,-24
8000452e:	f0 1f 00 27 	mcall	800045c8 <xTaskResumeAll+0xcc>
					vListRemove( &( pxTCB->xGenericListItem ) );
80004532:	ee c6 ff fc 	sub	r6,r7,-4
80004536:	0c 9c       	mov	r12,r6
80004538:	f0 1f 00 24 	mcall	800045c8 <xTaskResumeAll+0xcc>
					prvAddTaskToReadyQueue( pxTCB );
8000453c:	6e bc       	ld.w	r12,r7[0x2c]
8000453e:	66 08       	ld.w	r8,r3[0x0]
80004540:	10 3c       	cp.w	r12,r8
80004542:	e1 fc ba 00 	st.whi	r0[0x0],r12
80004546:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8000454a:	0c 9b       	mov	r11,r6
8000454c:	e4 0c 00 2c 	add	r12,r2,r12<<0x2
80004550:	f0 1f 00 1f 	mcall	800045cc <xTaskResumeAll+0xd0>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80004554:	62 08       	ld.w	r8,r1[0x0]
80004556:	6e b9       	ld.w	r9,r7[0x2c]
80004558:	70 b8       	ld.w	r8,r8[0x2c]
8000455a:	10 39       	cp.w	r9,r8
8000455c:	f9 b4 02 01 	movhs	r4,1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80004560:	6a 08       	ld.w	r8,r5[0x0]
80004562:	58 08       	cp.w	r8,0
80004564:	ce 11       	brne	80004526 <xTaskResumeAll+0x2a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80004566:	49 b8       	lddpc	r8,800045d0 <xTaskResumeAll+0xd4>
80004568:	70 08       	ld.w	r8,r8[0x0]
8000456a:	58 08       	cp.w	r8,0
8000456c:	c0 f0       	breq	8000458a <xTaskResumeAll+0x8e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
8000456e:	49 98       	lddpc	r8,800045d0 <xTaskResumeAll+0xd4>
80004570:	70 08       	ld.w	r8,r8[0x0]
80004572:	58 08       	cp.w	r8,0
80004574:	c1 10       	breq	80004596 <xTaskResumeAll+0x9a>
					{
						vTaskIncrementTick();
						--uxMissedTicks;
80004576:	49 77       	lddpc	r7,800045d0 <xTaskResumeAll+0xd4>
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
80004578:	f0 1f 00 17 	mcall	800045d4 <xTaskResumeAll+0xd8>
						--uxMissedTicks;
8000457c:	6e 08       	ld.w	r8,r7[0x0]
8000457e:	20 18       	sub	r8,1
80004580:	8f 08       	st.w	r7[0x0],r8
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80004582:	6e 08       	ld.w	r8,r7[0x0]
80004584:	58 08       	cp.w	r8,0
80004586:	cf 91       	brne	80004578 <xTaskResumeAll+0x7c>
80004588:	c0 78       	rjmp	80004596 <xTaskResumeAll+0x9a>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
8000458a:	58 14       	cp.w	r4,1
8000458c:	c0 50       	breq	80004596 <xTaskResumeAll+0x9a>
8000458e:	49 38       	lddpc	r8,800045d8 <xTaskResumeAll+0xdc>
80004590:	70 08       	ld.w	r8,r8[0x0]
80004592:	58 18       	cp.w	r8,1
80004594:	c0 71       	brne	800045a2 <xTaskResumeAll+0xa6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
80004596:	30 09       	mov	r9,0
80004598:	49 08       	lddpc	r8,800045d8 <xTaskResumeAll+0xdc>
8000459a:	91 09       	st.w	r8[0x0],r9
					portYIELD_WITHIN_API();
8000459c:	d7 33       	scall
8000459e:	30 17       	mov	r7,1
800045a0:	c0 28       	rjmp	800045a4 <xTaskResumeAll+0xa8>
800045a2:	30 07       	mov	r7,0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
800045a4:	f0 1f 00 0e 	mcall	800045dc <xTaskResumeAll+0xe0>

	return xAlreadyYielded;
}
800045a8:	0e 9c       	mov	r12,r7
800045aa:	d8 32       	popm	r0-r7,pc
800045ac:	80 00       	ld.sh	r0,r0[0x0]
800045ae:	41 28       	lddsp	r8,sp[0x48]
800045b0:	00 00       	add	r0,r0
800045b2:	09 8c       	ld.ub	r12,r4[0x0]
800045b4:	00 00       	add	r0,r0
800045b6:	09 a8       	ld.ub	r8,r4[0x2]
800045b8:	00 00       	add	r0,r0
800045ba:	09 60       	ld.uh	r0,--r4
800045bc:	00 00       	add	r0,r0
800045be:	09 c4       	ld.ub	r4,r4[0x4]
800045c0:	00 00       	add	r0,r0
800045c2:	08 a8       	st.w	r4++,r8
800045c4:	00 00       	add	r0,r0
800045c6:	09 5c       	ld.sh	r12,--r4
800045c8:	80 00       	ld.sh	r0,r0[0x0]
800045ca:	40 6e       	lddsp	lr,sp[0x18]
800045cc:	80 00       	ld.sh	r0,r0[0x0]
800045ce:	40 1e       	lddsp	lr,sp[0x4]
800045d0:	00 00       	add	r0,r0
800045d2:	08 8c       	andn	r12,r4
800045d4:	80 00       	ld.sh	r0,r0[0x0]
800045d6:	43 e4       	lddsp	r4,sp[0xf8]
800045d8:	00 00       	add	r0,r0
800045da:	09 ac       	ld.ub	r12,r4[0x2]
800045dc:	80 00       	ld.sh	r0,r0[0x0]
800045de:	42 34       	lddsp	r4,sp[0x8c]

800045e0 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
800045e0:	eb cd 40 80 	pushm	r7,lr
800045e4:	18 97       	mov	r7,r12
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
800045e6:	49 08       	lddpc	r8,80004624 <prvAddCurrentTaskToDelayedList+0x44>
800045e8:	70 08       	ld.w	r8,r8[0x0]
800045ea:	91 1c       	st.w	r8[0x4],r12

	if( xTimeToWake < xTickCount )
800045ec:	48 f8       	lddpc	r8,80004628 <prvAddCurrentTaskToDelayedList+0x48>
800045ee:	70 08       	ld.w	r8,r8[0x0]
800045f0:	10 3c       	cp.w	r12,r8
800045f2:	c0 a2       	brcc	80004606 <prvAddCurrentTaskToDelayedList+0x26>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
800045f4:	48 c8       	lddpc	r8,80004624 <prvAddCurrentTaskToDelayedList+0x44>
800045f6:	70 0b       	ld.w	r11,r8[0x0]
800045f8:	48 d8       	lddpc	r8,8000462c <prvAddCurrentTaskToDelayedList+0x4c>
800045fa:	70 0c       	ld.w	r12,r8[0x0]
800045fc:	2f cb       	sub	r11,-4
800045fe:	f0 1f 00 0d 	mcall	80004630 <prvAddCurrentTaskToDelayedList+0x50>
80004602:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80004606:	48 88       	lddpc	r8,80004624 <prvAddCurrentTaskToDelayedList+0x44>
80004608:	70 0b       	ld.w	r11,r8[0x0]
8000460a:	48 b8       	lddpc	r8,80004634 <prvAddCurrentTaskToDelayedList+0x54>
8000460c:	70 0c       	ld.w	r12,r8[0x0]
8000460e:	2f cb       	sub	r11,-4
80004610:	f0 1f 00 08 	mcall	80004630 <prvAddCurrentTaskToDelayedList+0x50>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
80004614:	48 98       	lddpc	r8,80004638 <prvAddCurrentTaskToDelayedList+0x58>
80004616:	70 08       	ld.w	r8,r8[0x0]
80004618:	10 37       	cp.w	r7,r8
8000461a:	c0 32       	brcc	80004620 <prvAddCurrentTaskToDelayedList+0x40>
		{
			xNextTaskUnblockTime = xTimeToWake;
8000461c:	48 78       	lddpc	r8,80004638 <prvAddCurrentTaskToDelayedList+0x58>
8000461e:	91 07       	st.w	r8[0x0],r7
80004620:	e3 cd 80 80 	ldm	sp++,r7,pc
80004624:	00 00       	add	r0,r0
80004626:	09 5c       	ld.sh	r12,--r4
80004628:	00 00       	add	r0,r0
8000462a:	09 88       	ld.ub	r8,r4[0x0]
8000462c:	00 00       	add	r0,r0
8000462e:	08 a4       	st.w	r4++,r4
80004630:	80 00       	ld.sh	r0,r0[0x0]
80004632:	40 3a       	lddsp	r10,sp[0xc]
80004634:	00 00       	add	r0,r0
80004636:	08 94       	mov	r4,r4
80004638:	00 00       	add	r0,r0
8000463a:	00 f8       	st.b	--r0,r8

8000463c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
8000463c:	eb cd 40 c0 	pushm	r6-r7,lr
80004640:	18 97       	mov	r7,r12
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
80004642:	58 0c       	cp.w	r12,0
80004644:	c1 10       	breq	80004666 <vTaskDelay+0x2a>
		{
			vTaskSuspendAll();
80004646:	f0 1f 00 0a 	mcall	8000466c <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
8000464a:	48 a8       	lddpc	r8,80004670 <vTaskDelay+0x34>
8000464c:	70 06       	ld.w	r6,r8[0x0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
8000464e:	48 a8       	lddpc	r8,80004674 <vTaskDelay+0x38>
80004650:	70 0c       	ld.w	r12,r8[0x0]
80004652:	2f cc       	sub	r12,-4
80004654:	f0 1f 00 09 	mcall	80004678 <vTaskDelay+0x3c>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80004658:	ee 06 00 0c 	add	r12,r7,r6
8000465c:	f0 1f 00 08 	mcall	8000467c <vTaskDelay+0x40>
			}
			xAlreadyYielded = xTaskResumeAll();
80004660:	f0 1f 00 08 	mcall	80004680 <vTaskDelay+0x44>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
80004664:	c0 21       	brne	80004668 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
80004666:	d7 33       	scall
80004668:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000466c:	80 00       	ld.sh	r0,r0[0x0]
8000466e:	43 58       	lddsp	r8,sp[0xd4]
80004670:	00 00       	add	r0,r0
80004672:	09 88       	ld.ub	r8,r4[0x0]
80004674:	00 00       	add	r0,r0
80004676:	09 5c       	ld.sh	r12,--r4
80004678:	80 00       	ld.sh	r0,r0[0x0]
8000467a:	40 6e       	lddsp	lr,sp[0x18]
8000467c:	80 00       	ld.sh	r0,r0[0x0]
8000467e:	45 e0       	lddsp	r0,sp[0x178]
80004680:	80 00       	ld.sh	r0,r0[0x0]
80004682:	44 fc       	lddsp	r12,sp[0x13c]

80004684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80004684:	eb cd 40 f8 	pushm	r3-r7,lr
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
80004688:	49 57       	lddpc	r7,800046dc <prvIdleTask+0x58>
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
8000468a:	49 64       	lddpc	r4,800046e0 <prvIdleTask+0x5c>

				taskENTER_CRITICAL();
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					--uxCurrentNumberOfTasks;
8000468c:	49 63       	lddpc	r3,800046e4 <prvIdleTask+0x60>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
8000468e:	49 75       	lddpc	r5,800046e8 <prvIdleTask+0x64>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
80004690:	6e 08       	ld.w	r8,r7[0x0]
80004692:	58 08       	cp.w	r8,0
80004694:	c1 e0       	breq	800046d0 <prvIdleTask+0x4c>
		{
			vTaskSuspendAll();
80004696:	f0 1f 00 16 	mcall	800046ec <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
8000469a:	68 06       	ld.w	r6,r4[0x0]
			xTaskResumeAll();
8000469c:	f0 1f 00 15 	mcall	800046f0 <prvIdleTask+0x6c>

			if( xListIsEmpty == pdFALSE )
800046a0:	58 06       	cp.w	r6,0
800046a2:	c1 70       	breq	800046d0 <prvIdleTask+0x4c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
800046a4:	f0 1f 00 14 	mcall	800046f4 <prvIdleTask+0x70>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
800046a8:	68 38       	ld.w	r8,r4[0xc]
800046aa:	70 36       	ld.w	r6,r8[0xc]
					vListRemove( &( pxTCB->xGenericListItem ) );
800046ac:	ec cc ff fc 	sub	r12,r6,-4
800046b0:	f0 1f 00 12 	mcall	800046f8 <prvIdleTask+0x74>
					--uxCurrentNumberOfTasks;
800046b4:	66 08       	ld.w	r8,r3[0x0]
800046b6:	20 18       	sub	r8,1
800046b8:	87 08       	st.w	r3[0x0],r8
					--uxTasksDeleted;
800046ba:	6e 08       	ld.w	r8,r7[0x0]
800046bc:	20 18       	sub	r8,1
800046be:	8f 08       	st.w	r7[0x0],r8
				}
				taskEXIT_CRITICAL();
800046c0:	f0 1f 00 0f 	mcall	800046fc <prvIdleTask+0x78>

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
800046c4:	6c cc       	ld.w	r12,r6[0x30]
800046c6:	f0 1f 00 0f 	mcall	80004700 <prvIdleTask+0x7c>
		vPortFree( pxTCB );
800046ca:	0c 9c       	mov	r12,r6
800046cc:	f0 1f 00 0d 	mcall	80004700 <prvIdleTask+0x7c>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
800046d0:	6a 08       	ld.w	r8,r5[0x0]
800046d2:	58 18       	cp.w	r8,1
800046d4:	fe 98 ff de 	brls	80004690 <prvIdleTask+0xc>
			{
				taskYIELD();
800046d8:	d7 33       	scall
800046da:	cd bb       	rjmp	80004690 <prvIdleTask+0xc>
800046dc:	00 00       	add	r0,r0
800046de:	08 9c       	mov	r12,r4
800046e0:	00 00       	add	r0,r0
800046e2:	09 48       	ld.w	r8,--r4
800046e4:	00 00       	add	r0,r0
800046e6:	09 a8       	ld.ub	r8,r4[0x2]
800046e8:	00 00       	add	r0,r0
800046ea:	08 a8       	st.w	r4++,r8
800046ec:	80 00       	ld.sh	r0,r0[0x0]
800046ee:	43 58       	lddsp	r8,sp[0xd4]
800046f0:	80 00       	ld.sh	r0,r0[0x0]
800046f2:	44 fc       	lddsp	r12,sp[0x13c]
800046f4:	80 00       	ld.sh	r0,r0[0x0]
800046f6:	41 28       	lddsp	r8,sp[0x48]
800046f8:	80 00       	ld.sh	r0,r0[0x0]
800046fa:	40 6e       	lddsp	lr,sp[0x18]
800046fc:	80 00       	ld.sh	r0,r0[0x0]
800046fe:	42 34       	lddsp	r4,sp[0x8c]
80004700:	80 00       	ld.sh	r0,r0[0x0]
80004702:	43 08       	lddsp	r8,sp[0xc0]

80004704 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
80004704:	d4 31       	pushm	r0-r7,lr
80004706:	20 1d       	sub	sp,4
80004708:	fa c4 ff d8 	sub	r4,sp,-40
8000470c:	50 0c       	stdsp	sp[0x0],r12
8000470e:	16 91       	mov	r1,r11
80004710:	14 97       	mov	r7,r10
80004712:	12 90       	mov	r0,r9
80004714:	10 93       	mov	r3,r8
80004716:	68 02       	ld.w	r2,r4[0x0]
80004718:	68 16       	ld.w	r6,r4[0x4]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
8000471a:	34 4c       	mov	r12,68
8000471c:	f0 1f 00 5b 	mcall	80004888 <xTaskGenericCreate+0x184>
80004720:	18 95       	mov	r5,r12

	if( pxNewTCB != NULL )
80004722:	c0 31       	brne	80004728 <xTaskGenericCreate+0x24>
80004724:	3f fc       	mov	r12,-1
80004726:	ca d8       	rjmp	80004880 <xTaskGenericCreate+0x17c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80004728:	58 06       	cp.w	r6,0
8000472a:	e0 81 00 ad 	brne	80004884 <xTaskGenericCreate+0x180>
8000472e:	0e 9c       	mov	r12,r7
80004730:	5c 7c       	castu.h	r12
80004732:	a3 6c       	lsl	r12,0x2
80004734:	f0 1f 00 55 	mcall	80004888 <xTaskGenericCreate+0x184>
80004738:	18 96       	mov	r6,r12
8000473a:	8b cc       	st.w	r5[0x30],r12

		if( pxNewTCB->pxStack == NULL )
8000473c:	c0 61       	brne	80004748 <xTaskGenericCreate+0x44>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
8000473e:	0a 9c       	mov	r12,r5
80004740:	f0 1f 00 53 	mcall	8000488c <xTaskGenericCreate+0x188>
80004744:	3f fc       	mov	r12,-1
80004746:	c9 d8       	rjmp	80004880 <xTaskGenericCreate+0x17c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
80004748:	5c 77       	castu.h	r7
8000474a:	ee 0a 15 02 	lsl	r10,r7,0x2
8000474e:	e0 6b 00 a5 	mov	r11,165
80004752:	0c 9c       	mov	r12,r6
80004754:	f0 1f 00 4f 	mcall	80004890 <xTaskGenericCreate+0x18c>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
80004758:	ee c6 00 01 	sub	r6,r7,1
8000475c:	6a c8       	ld.w	r8,r5[0x30]
8000475e:	f0 06 00 26 	add	r6,r8,r6<<0x2
80004762:	e0 16 ff fc 	andl	r6,0xfffc
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
80004766:	31 0a       	mov	r10,16
80004768:	02 9b       	mov	r11,r1
8000476a:	ea cc ff cc 	sub	r12,r5,-52
8000476e:	f0 1f 00 4a 	mcall	80004894 <xTaskGenericCreate+0x190>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
80004772:	30 08       	mov	r8,0
80004774:	eb 68 00 43 	st.b	r5[67],r8
80004778:	58 73       	cp.w	r3,7
8000477a:	e6 07 17 80 	movls	r7,r3
8000477e:	f9 b7 0b 07 	movhi	r7,7
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
80004782:	8b b7       	st.w	r5[0x2c],r7
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80004784:	ea c4 ff fc 	sub	r4,r5,-4
80004788:	08 9c       	mov	r12,r4
8000478a:	f0 1f 00 44 	mcall	80004898 <xTaskGenericCreate+0x194>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
8000478e:	ea cc ff e8 	sub	r12,r5,-24
80004792:	f0 1f 00 42 	mcall	80004898 <xTaskGenericCreate+0x194>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80004796:	8b 45       	st.w	r5[0x10],r5

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
80004798:	ee 07 11 08 	rsub	r7,r7,8
8000479c:	8b 67       	st.w	r5[0x18],r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
8000479e:	8b 95       	st.w	r5[0x24],r5
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
800047a0:	00 9a       	mov	r10,r0
800047a2:	40 0b       	lddsp	r11,sp[0x0]
800047a4:	0c 9c       	mov	r12,r6
800047a6:	f0 1f 00 3e 	mcall	8000489c <xTaskGenericCreate+0x198>
800047aa:	8b 0c       	st.w	r5[0x0],r12
		if( ( void * ) pxCreatedTask != NULL )
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
800047ac:	58 02       	cp.w	r2,0
800047ae:	e5 f5 1a 00 	st.wne	r2[0x0],r5
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
800047b2:	f0 1f 00 3c 	mcall	800048a0 <xTaskGenericCreate+0x19c>
		{
			uxCurrentNumberOfTasks++;
800047b6:	4b c8       	lddpc	r8,800048a4 <xTaskGenericCreate+0x1a0>
800047b8:	70 09       	ld.w	r9,r8[0x0]
800047ba:	2f f9       	sub	r9,-1
800047bc:	91 09       	st.w	r8[0x0],r9
			if( pxCurrentTCB == NULL )
800047be:	4b b8       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
800047c0:	70 08       	ld.w	r8,r8[0x0]
800047c2:	58 08       	cp.w	r8,0
800047c4:	c2 61       	brne	80004810 <xTaskGenericCreate+0x10c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
800047c6:	4b 98       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
800047c8:	91 05       	st.w	r8[0x0],r5

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
800047ca:	4b 78       	lddpc	r8,800048a4 <xTaskGenericCreate+0x1a0>
800047cc:	70 08       	ld.w	r8,r8[0x0]
800047ce:	58 18       	cp.w	r8,1
800047d0:	c2 b1       	brne	80004826 <xTaskGenericCreate+0x122>
800047d2:	4b 77       	lddpc	r7,800048ac <xTaskGenericCreate+0x1a8>

/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
800047d4:	ee c6 ff 60 	sub	r6,r7,-160
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
800047d8:	0e 9c       	mov	r12,r7
800047da:	f0 1f 00 36 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
800047de:	2e c7       	sub	r7,-20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
800047e0:	0c 37       	cp.w	r7,r6
800047e2:	cf b1       	brne	800047d8 <xTaskGenericCreate+0xd4>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
800047e4:	4b 47       	lddpc	r7,800048b4 <xTaskGenericCreate+0x1b0>
800047e6:	0e 9c       	mov	r12,r7
800047e8:	f0 1f 00 32 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
800047ec:	4b 36       	lddpc	r6,800048b8 <xTaskGenericCreate+0x1b4>
800047ee:	0c 9c       	mov	r12,r6
800047f0:	f0 1f 00 30 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xPendingReadyList );
800047f4:	4b 2c       	lddpc	r12,800048bc <xTaskGenericCreate+0x1b8>
800047f6:	f0 1f 00 2f 	mcall	800048b0 <xTaskGenericCreate+0x1ac>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
800047fa:	4b 2c       	lddpc	r12,800048c0 <xTaskGenericCreate+0x1bc>
800047fc:	f0 1f 00 2d 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
80004800:	4b 1c       	lddpc	r12,800048c4 <xTaskGenericCreate+0x1c0>
80004802:	f0 1f 00 2c 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80004806:	4b 18       	lddpc	r8,800048c8 <xTaskGenericCreate+0x1c4>
80004808:	91 07       	st.w	r8[0x0],r7
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
8000480a:	4b 18       	lddpc	r8,800048cc <xTaskGenericCreate+0x1c8>
8000480c:	91 06       	st.w	r8[0x0],r6
8000480e:	c0 c8       	rjmp	80004826 <xTaskGenericCreate+0x122>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80004810:	4b 08       	lddpc	r8,800048d0 <xTaskGenericCreate+0x1cc>
80004812:	70 08       	ld.w	r8,r8[0x0]
80004814:	58 08       	cp.w	r8,0
80004816:	c0 81       	brne	80004826 <xTaskGenericCreate+0x122>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80004818:	4a 48       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
8000481a:	70 08       	ld.w	r8,r8[0x0]
8000481c:	70 b8       	ld.w	r8,r8[0x2c]
8000481e:	10 33       	cp.w	r3,r8
80004820:	c0 33       	brcs	80004826 <xTaskGenericCreate+0x122>
					{
						pxCurrentTCB = pxNewTCB;
80004822:	4a 28       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
80004824:	91 05       	st.w	r8[0x0],r5
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
80004826:	6a b8       	ld.w	r8,r5[0x2c]
80004828:	4a b9       	lddpc	r9,800048d4 <xTaskGenericCreate+0x1d0>
8000482a:	72 09       	ld.w	r9,r9[0x0]
8000482c:	12 38       	cp.w	r8,r9
8000482e:	e0 88 00 04 	brls	80004836 <xTaskGenericCreate+0x132>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
80004832:	4a 99       	lddpc	r9,800048d4 <xTaskGenericCreate+0x1d0>
80004834:	93 08       	st.w	r9[0x0],r8
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
80004836:	4a 98       	lddpc	r8,800048d8 <xTaskGenericCreate+0x1d4>
80004838:	70 09       	ld.w	r9,r8[0x0]
8000483a:	2f f9       	sub	r9,-1
8000483c:	91 09       	st.w	r8[0x0],r9

			prvAddTaskToReadyQueue( pxNewTCB );
8000483e:	6a b8       	ld.w	r8,r5[0x2c]
80004840:	4a 79       	lddpc	r9,800048dc <xTaskGenericCreate+0x1d8>
80004842:	72 09       	ld.w	r9,r9[0x0]
80004844:	12 38       	cp.w	r8,r9
80004846:	e0 88 00 04 	brls	8000484e <xTaskGenericCreate+0x14a>
8000484a:	4a 59       	lddpc	r9,800048dc <xTaskGenericCreate+0x1d8>
8000484c:	93 08       	st.w	r9[0x0],r8
8000484e:	6a bc       	ld.w	r12,r5[0x2c]
80004850:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004854:	08 9b       	mov	r11,r4
80004856:	49 68       	lddpc	r8,800048ac <xTaskGenericCreate+0x1a8>
80004858:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
8000485c:	f0 1f 00 21 	mcall	800048e0 <xTaskGenericCreate+0x1dc>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80004860:	f0 1f 00 21 	mcall	800048e4 <xTaskGenericCreate+0x1e0>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
80004864:	49 b8       	lddpc	r8,800048d0 <xTaskGenericCreate+0x1cc>
80004866:	70 08       	ld.w	r8,r8[0x0]
80004868:	58 08       	cp.w	r8,0
8000486a:	c0 a0       	breq	8000487e <xTaskGenericCreate+0x17a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
8000486c:	48 f8       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
8000486e:	70 08       	ld.w	r8,r8[0x0]
80004870:	70 b8       	ld.w	r8,r8[0x2c]
80004872:	10 33       	cp.w	r3,r8
80004874:	e0 88 00 05 	brls	8000487e <xTaskGenericCreate+0x17a>
			{
				portYIELD_WITHIN_API();
80004878:	d7 33       	scall
8000487a:	30 1c       	mov	r12,1
8000487c:	c0 28       	rjmp	80004880 <xTaskGenericCreate+0x17c>
8000487e:	30 1c       	mov	r12,1
			}
		}
	}

	return xReturn;
}
80004880:	2f fd       	sub	sp,-4
80004882:	d8 32       	popm	r0-r7,pc
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80004884:	99 c6       	st.w	r12[0x30],r6
80004886:	c6 1b       	rjmp	80004748 <xTaskGenericCreate+0x44>
80004888:	80 00       	ld.sh	r0,r0[0x0]
8000488a:	43 30       	lddsp	r0,sp[0xcc]
8000488c:	80 00       	ld.sh	r0,r0[0x0]
8000488e:	43 08       	lddsp	r8,sp[0xc0]
80004890:	80 00       	ld.sh	r0,r0[0x0]
80004892:	50 90       	stdsp	sp[0x24],r0
80004894:	80 00       	ld.sh	r0,r0[0x0]
80004896:	55 1c       	stdsp	sp[0x144],r12
80004898:	80 00       	ld.sh	r0,r0[0x0]
8000489a:	40 18       	lddsp	r8,sp[0x4]
8000489c:	80 00       	ld.sh	r0,r0[0x0]
8000489e:	40 94       	lddsp	r4,sp[0x24]
800048a0:	80 00       	ld.sh	r0,r0[0x0]
800048a2:	41 28       	lddsp	r8,sp[0x48]
800048a4:	00 00       	add	r0,r0
800048a6:	09 a8       	ld.ub	r8,r4[0x2]
800048a8:	00 00       	add	r0,r0
800048aa:	09 5c       	ld.sh	r12,--r4
800048ac:	00 00       	add	r0,r0
800048ae:	08 a8       	st.w	r4++,r8
800048b0:	80 00       	ld.sh	r0,r0[0x0]
800048b2:	40 04       	lddsp	r4,sp[0x0]
800048b4:	00 00       	add	r0,r0
800048b6:	09 74       	ld.ub	r4,--r4
800048b8:	00 00       	add	r0,r0
800048ba:	09 90       	ld.ub	r0,r4[0x1]
800048bc:	00 00       	add	r0,r0
800048be:	09 60       	ld.uh	r0,--r4
800048c0:	00 00       	add	r0,r0
800048c2:	09 48       	ld.w	r8,--r4
800048c4:	00 00       	add	r0,r0
800048c6:	09 b0       	ld.ub	r0,r4[0x3]
800048c8:	00 00       	add	r0,r0
800048ca:	08 94       	mov	r4,r4
800048cc:	00 00       	add	r0,r0
800048ce:	08 a4       	st.w	r4++,r4
800048d0:	00 00       	add	r0,r0
800048d2:	08 98       	mov	r8,r4
800048d4:	00 00       	add	r0,r0
800048d6:	08 90       	mov	r0,r4
800048d8:	00 00       	add	r0,r0
800048da:	09 a4       	ld.ub	r4,r4[0x2]
800048dc:	00 00       	add	r0,r0
800048de:	09 c4       	ld.ub	r4,r4[0x4]
800048e0:	80 00       	ld.sh	r0,r0[0x0]
800048e2:	40 1e       	lddsp	lr,sp[0x4]
800048e4:	80 00       	ld.sh	r0,r0[0x0]
800048e6:	42 34       	lddsp	r4,sp[0x8c]

800048e8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
800048e8:	d4 01       	pushm	lr
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
800048ea:	30 09       	mov	r9,0
800048ec:	1a d9       	st.w	--sp,r9
800048ee:	1a d9       	st.w	--sp,r9
800048f0:	1a d9       	st.w	--sp,r9
800048f2:	12 98       	mov	r8,r9
800048f4:	e0 6a 01 00 	mov	r10,256
800048f8:	48 9b       	lddpc	r11,8000491c <vTaskStartScheduler+0x34>
800048fa:	48 ac       	lddpc	r12,80004920 <vTaskStartScheduler+0x38>
800048fc:	f0 1f 00 0a 	mcall	80004924 <vTaskStartScheduler+0x3c>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
80004900:	2f dd       	sub	sp,-12
80004902:	58 1c       	cp.w	r12,1
80004904:	c0 a1       	brne	80004918 <vTaskStartScheduler+0x30>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
80004906:	d3 03       	ssrf	0x10

		xSchedulerRunning = pdTRUE;
80004908:	30 19       	mov	r9,1
8000490a:	48 88       	lddpc	r8,80004928 <vTaskStartScheduler+0x40>
8000490c:	91 09       	st.w	r8[0x0],r9
		xTickCount = ( portTickType ) 0;
8000490e:	30 09       	mov	r9,0
80004910:	48 78       	lddpc	r8,8000492c <vTaskStartScheduler+0x44>
80004912:	91 09       	st.w	r8[0x0],r9
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
80004914:	f0 1f 00 07 	mcall	80004930 <vTaskStartScheduler+0x48>
80004918:	d8 02       	popm	pc
8000491a:	00 00       	add	r0,r0
8000491c:	80 00       	ld.sh	r0,r0[0x0]
8000491e:	ad 08       	ld.d	r8,r6
80004920:	80 00       	ld.sh	r0,r0[0x0]
80004922:	46 84       	lddsp	r4,sp[0x1a0]
80004924:	80 00       	ld.sh	r0,r0[0x0]
80004926:	47 04       	lddsp	r4,sp[0x1c0]
80004928:	00 00       	add	r0,r0
8000492a:	08 98       	mov	r8,r4
8000492c:	00 00       	add	r0,r0
8000492e:	09 88       	ld.ub	r8,r4[0x0]
80004930:	80 00       	ld.sh	r0,r0[0x0]
80004932:	41 38       	lddsp	r8,sp[0x4c]

80004934 <taskFn2>:
		
		vTaskDelay(delay);
	}
}

static void taskFn2(void* args){
80004934:	eb cd 40 f8 	pushm	r3-r7,lr
80004938:	30 07       	mov	r7,0
	const portTickType delay = 500 / portTICK_RATE_MS;
	
	int iter = 0;

	while(1){
		gpio_toggle_pin(LED1_GPIO);
8000493a:	34 95       	mov	r5,73
		printf("tick %d\n", iter++);
8000493c:	48 94       	lddpc	r4,80004960 <taskFn2+0x2c>
		
		vTaskDelay(delay);
8000493e:	e0 63 01 f4 	mov	r3,500
	const portTickType delay = 500 / portTICK_RATE_MS;
	
	int iter = 0;

	while(1){
		gpio_toggle_pin(LED1_GPIO);
80004942:	0a 9c       	mov	r12,r5
80004944:	f0 1f 00 08 	mcall	80004964 <taskFn2+0x30>
		printf("tick %d\n", iter++);
80004948:	ee c6 ff ff 	sub	r6,r7,-1
8000494c:	1a d7       	st.w	--sp,r7
8000494e:	08 9c       	mov	r12,r4
80004950:	f0 1f 00 06 	mcall	80004968 <taskFn2+0x34>
		
		vTaskDelay(delay);
80004954:	06 9c       	mov	r12,r3
80004956:	f0 1f 00 06 	mcall	8000496c <taskFn2+0x38>
8000495a:	0c 97       	mov	r7,r6
8000495c:	2f fd       	sub	sp,-4
8000495e:	cf 2b       	rjmp	80004942 <taskFn2+0xe>
80004960:	80 00       	ld.sh	r0,r0[0x0]
80004962:	ad 10       	ld.d	r0,--r6
80004964:	80 00       	ld.sh	r0,r0[0x0]
80004966:	21 f4       	sub	r4,31
80004968:	80 00       	ld.sh	r0,r0[0x0]
8000496a:	50 a0       	stdsp	sp[0x28],r0
8000496c:	80 00       	ld.sh	r0,r0[0x0]
8000496e:	46 3c       	lddsp	r12,sp[0x18c]

80004970 <taskFn1>:
	    setbuf(stdout, NULL);
	    setbuf(stdin,  NULL);
    #endif
}

static void taskFn1(void* args){
80004970:	eb cd 40 f8 	pushm	r3-r7,lr
80004974:	30 07       	mov	r7,0
	const portTickType delay = 200 / portTICK_RATE_MS;
	
    int iter = 0;

	while(1){
		gpio_toggle_pin(LED0_GPIO);
80004976:	32 35       	mov	r5,35
		printf("tick %d\n", iter++);
80004978:	48 94       	lddpc	r4,8000499c <taskFn1+0x2c>
		
		vTaskDelay(delay);
8000497a:	e0 63 00 c8 	mov	r3,200
	const portTickType delay = 200 / portTICK_RATE_MS;
	
    int iter = 0;

	while(1){
		gpio_toggle_pin(LED0_GPIO);
8000497e:	0a 9c       	mov	r12,r5
80004980:	f0 1f 00 08 	mcall	800049a0 <taskFn1+0x30>
		printf("tick %d\n", iter++);
80004984:	ee c6 ff ff 	sub	r6,r7,-1
80004988:	1a d7       	st.w	--sp,r7
8000498a:	08 9c       	mov	r12,r4
8000498c:	f0 1f 00 06 	mcall	800049a4 <taskFn1+0x34>
		
		vTaskDelay(delay);
80004990:	06 9c       	mov	r12,r3
80004992:	f0 1f 00 06 	mcall	800049a8 <taskFn1+0x38>
80004996:	0c 97       	mov	r7,r6
80004998:	2f fd       	sub	sp,-4
8000499a:	cf 2b       	rjmp	8000497e <taskFn1+0xe>
8000499c:	80 00       	ld.sh	r0,r0[0x0]
8000499e:	ad 10       	ld.d	r0,--r6
800049a0:	80 00       	ld.sh	r0,r0[0x0]
800049a2:	21 f4       	sub	r4,31
800049a4:	80 00       	ld.sh	r0,r0[0x0]
800049a6:	50 a0       	stdsp	sp[0x28],r0
800049a8:	80 00       	ld.sh	r0,r0[0x0]
800049aa:	46 3c       	lddsp	r12,sp[0x18c]

800049ac <init>:
    for(int i = 0; i < 10; i++){
        asm volatile ("" ::: "memory");
    }
}

void init(){
800049ac:	eb cd 40 80 	pushm	r7,lr
	board_init();
800049b0:	f0 1f 00 1a 	mcall	80004a18 <init+0x6c>
	
    gpio_configure_pin(TEST_A, GPIO_DIR_INPUT);
800049b4:	30 0b       	mov	r11,0
800049b6:	31 fc       	mov	r12,31
800049b8:	f0 1f 00 19 	mcall	80004a1c <init+0x70>
    gpio_configure_pin(TEST_B, GPIO_DIR_INPUT);
800049bc:	30 0b       	mov	r11,0
800049be:	31 dc       	mov	r12,29
800049c0:	f0 1f 00 17 	mcall	80004a1c <init+0x70>
    gpio_configure_pin(TEST_C, GPIO_DIR_INPUT);
800049c4:	30 0b       	mov	r11,0
800049c6:	31 bc       	mov	r12,27
800049c8:	f0 1f 00 15 	mcall	80004a1c <init+0x70>
    gpio_configure_pin(RESPONSE_A, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800049cc:	30 3b       	mov	r11,3
800049ce:	31 ec       	mov	r12,30
800049d0:	f0 1f 00 13 	mcall	80004a1c <init+0x70>
    gpio_configure_pin(RESPONSE_B, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800049d4:	30 3b       	mov	r11,3
800049d6:	31 cc       	mov	r12,28
800049d8:	f0 1f 00 11 	mcall	80004a1c <init+0x70>
    gpio_configure_pin(RESPONSE_C, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800049dc:	30 3b       	mov	r11,3
800049de:	32 0c       	mov	r12,32
800049e0:	f0 1f 00 0f 	mcall	80004a1c <init+0x70>

	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
800049e4:	30 3a       	mov	r10,3
800049e6:	e0 6b 1b 00 	mov	r11,6912
800049ea:	ea 1b 00 b7 	orh	r11,0xb7
800049ee:	30 0c       	mov	r12,0
800049f0:	f0 1f 00 0c 	mcall	80004a20 <init+0x74>
	
	stdio_usb_init(&CONFIG_USART_IF);
800049f4:	fe 7c 1c 00 	mov	r12,-58368
800049f8:	f0 1f 00 0b 	mcall	80004a24 <init+0x78>

    #if defined(__GNUC__) && defined(__AVR32__)
	    setbuf(stdout, NULL);
800049fc:	48 b7       	lddpc	r7,80004a28 <init+0x7c>
800049fe:	6e 08       	ld.w	r8,r7[0x0]
80004a00:	30 0b       	mov	r11,0
80004a02:	70 1c       	ld.w	r12,r8[0x4]
80004a04:	f0 1f 00 0a 	mcall	80004a2c <init+0x80>
	    setbuf(stdin,  NULL);
80004a08:	6e 08       	ld.w	r8,r7[0x0]
80004a0a:	30 0b       	mov	r11,0
80004a0c:	70 0c       	ld.w	r12,r8[0x0]
80004a0e:	f0 1f 00 08 	mcall	80004a2c <init+0x80>
    #endif
}
80004a12:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a16:	00 00       	add	r0,r0
80004a18:	80 00       	ld.sh	r0,r0[0x0]
80004a1a:	21 0c       	sub	r12,16
80004a1c:	80 00       	ld.sh	r0,r0[0x0]
80004a1e:	21 3c       	sub	r12,19
80004a20:	80 00       	ld.sh	r0,r0[0x0]
80004a22:	23 80       	sub	r0,56
80004a24:	80 00       	ld.sh	r0,r0[0x0]
80004a26:	3f 2c       	mov	r12,-14
80004a28:	00 00       	add	r0,r0
80004a2a:	01 ec       	ld.ub	r12,r0[0x6]
80004a2c:	80 00       	ld.sh	r0,r0[0x0]
80004a2e:	53 e0       	stdsp	sp[0xf8],r0

80004a30 <main>:
		vTaskDelay(delay);
	}
}


int main(){
80004a30:	eb cd 40 c0 	pushm	r6-r7,lr
	init();
80004a34:	f0 1f 00 10 	mcall	80004a74 <main+0x44>
        
	xTaskCreate(taskFn1, "", 1024, NULL, tskIDLE_PRIORITY + 1, NULL);
80004a38:	49 06       	lddpc	r6,80004a78 <main+0x48>
80004a3a:	30 07       	mov	r7,0
80004a3c:	1a d7       	st.w	--sp,r7
80004a3e:	1a d7       	st.w	--sp,r7
80004a40:	1a d7       	st.w	--sp,r7
80004a42:	30 18       	mov	r8,1
80004a44:	0e 99       	mov	r9,r7
80004a46:	e0 6a 04 00 	mov	r10,1024
80004a4a:	0c 9b       	mov	r11,r6
80004a4c:	48 cc       	lddpc	r12,80004a7c <main+0x4c>
80004a4e:	f0 1f 00 0d 	mcall	80004a80 <main+0x50>
	xTaskCreate(taskFn2, "", 1024, NULL, tskIDLE_PRIORITY + 1, NULL);
80004a52:	1a d7       	st.w	--sp,r7
80004a54:	1a d7       	st.w	--sp,r7
80004a56:	1a d7       	st.w	--sp,r7
80004a58:	30 18       	mov	r8,1
80004a5a:	0e 99       	mov	r9,r7
80004a5c:	e0 6a 04 00 	mov	r10,1024
80004a60:	0c 9b       	mov	r11,r6
80004a62:	48 9c       	lddpc	r12,80004a84 <main+0x54>
80004a64:	f0 1f 00 07 	mcall	80004a80 <main+0x50>

	// Start the scheduler, anything after this will not run.
	vTaskStartScheduler();
80004a68:	f0 1f 00 08 	mcall	80004a88 <main+0x58>
80004a6c:	2f ad       	sub	sp,-24
    
}
80004a6e:	0e 9c       	mov	r12,r7
80004a70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004a74:	80 00       	ld.sh	r0,r0[0x0]
80004a76:	49 ac       	lddpc	r12,80004adc <free+0x14>
80004a78:	80 00       	ld.sh	r0,r0[0x0]
80004a7a:	ad 18       	ld.d	r8,--r6
80004a7c:	80 00       	ld.sh	r0,r0[0x0]
80004a7e:	49 70       	lddpc	r0,80004ad8 <free+0x10>
80004a80:	80 00       	ld.sh	r0,r0[0x0]
80004a82:	47 04       	lddsp	r4,sp[0x1c0]
80004a84:	80 00       	ld.sh	r0,r0[0x0]
80004a86:	49 34       	lddpc	r4,80004ad0 <free+0x8>
80004a88:	80 00       	ld.sh	r0,r0[0x0]
80004a8a:	48 e8       	lddpc	r8,80004ac0 <exit+0x20>

80004a8c <atexit>:
80004a8c:	d4 01       	pushm	lr
80004a8e:	30 09       	mov	r9,0
80004a90:	18 9b       	mov	r11,r12
80004a92:	12 9a       	mov	r10,r9
80004a94:	12 9c       	mov	r12,r9
80004a96:	f0 1f 00 02 	mcall	80004a9c <atexit+0x10>
80004a9a:	d8 02       	popm	pc
80004a9c:	80 00       	ld.sh	r0,r0[0x0]
80004a9e:	7a 08       	ld.w	r8,sp[0x0]

80004aa0 <exit>:
80004aa0:	d4 21       	pushm	r4-r7,lr
80004aa2:	30 0b       	mov	r11,0
80004aa4:	18 97       	mov	r7,r12
80004aa6:	f0 1f 00 06 	mcall	80004abc <exit+0x1c>
80004aaa:	48 68       	lddpc	r8,80004ac0 <exit+0x20>
80004aac:	70 0c       	ld.w	r12,r8[0x0]
80004aae:	78 a8       	ld.w	r8,r12[0x28]
80004ab0:	58 08       	cp.w	r8,0
80004ab2:	c0 20       	breq	80004ab6 <exit+0x16>
80004ab4:	5d 18       	icall	r8
80004ab6:	0e 9c       	mov	r12,r7
80004ab8:	f0 1f 00 03 	mcall	80004ac4 <exit+0x24>
80004abc:	80 00       	ld.sh	r0,r0[0x0]
80004abe:	7a b4       	ld.w	r4,sp[0x2c]
80004ac0:	80 00       	ld.sh	r0,r0[0x0]
80004ac2:	ad 20       	st.d	r6++,r0
80004ac4:	80 00       	ld.sh	r0,r0[0x0]
80004ac6:	55 46       	stdsp	sp[0x150],r6

80004ac8 <free>:
80004ac8:	d4 01       	pushm	lr
80004aca:	48 48       	lddpc	r8,80004ad8 <free+0x10>
80004acc:	18 9b       	mov	r11,r12
80004ace:	70 0c       	ld.w	r12,r8[0x0]
80004ad0:	f0 1f 00 03 	mcall	80004adc <free+0x14>
80004ad4:	d8 02       	popm	pc
80004ad6:	00 00       	add	r0,r0
80004ad8:	00 00       	add	r0,r0
80004ada:	01 ec       	ld.ub	r12,r0[0x6]
80004adc:	80 00       	ld.sh	r0,r0[0x0]
80004ade:	8c 7c       	ld.sh	r12,r6[0xe]

80004ae0 <malloc>:
80004ae0:	d4 01       	pushm	lr
80004ae2:	48 48       	lddpc	r8,80004af0 <malloc+0x10>
80004ae4:	18 9b       	mov	r11,r12
80004ae6:	70 0c       	ld.w	r12,r8[0x0]
80004ae8:	f0 1f 00 03 	mcall	80004af4 <malloc+0x14>
80004aec:	d8 02       	popm	pc
80004aee:	00 00       	add	r0,r0
80004af0:	00 00       	add	r0,r0
80004af2:	01 ec       	ld.ub	r12,r0[0x6]
80004af4:	80 00       	ld.sh	r0,r0[0x0]
80004af6:	4a f8       	lddpc	r8,80004bb0 <_malloc_r+0xb8>

80004af8 <_malloc_r>:
80004af8:	d4 31       	pushm	r0-r7,lr
80004afa:	f6 c8 ff f5 	sub	r8,r11,-11
80004afe:	18 95       	mov	r5,r12
80004b00:	10 97       	mov	r7,r8
80004b02:	e0 17 ff f8 	andl	r7,0xfff8
80004b06:	59 68       	cp.w	r8,22
80004b08:	f9 b7 08 10 	movls	r7,16
80004b0c:	16 37       	cp.w	r7,r11
80004b0e:	5f 38       	srlo	r8
80004b10:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004b14:	c0 50       	breq	80004b1e <_malloc_r+0x26>
80004b16:	30 c8       	mov	r8,12
80004b18:	99 38       	st.w	r12[0xc],r8
80004b1a:	e0 8f 01 f3 	bral	80004f00 <_malloc_r+0x408>
80004b1e:	f0 1f 00 50 	mcall	80004c5c <_malloc_r+0x164>
80004b22:	e0 47 01 f7 	cp.w	r7,503
80004b26:	e0 8b 00 1c 	brhi	80004b5e <_malloc_r+0x66>
80004b2a:	ee 03 16 03 	lsr	r3,r7,0x3
80004b2e:	4c d8       	lddpc	r8,80004c60 <_malloc_r+0x168>
80004b30:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004b34:	70 36       	ld.w	r6,r8[0xc]
80004b36:	10 36       	cp.w	r6,r8
80004b38:	c0 61       	brne	80004b44 <_malloc_r+0x4c>
80004b3a:	ec c8 ff f8 	sub	r8,r6,-8
80004b3e:	70 36       	ld.w	r6,r8[0xc]
80004b40:	10 36       	cp.w	r6,r8
80004b42:	c0 c0       	breq	80004b5a <_malloc_r+0x62>
80004b44:	6c 18       	ld.w	r8,r6[0x4]
80004b46:	e0 18 ff fc 	andl	r8,0xfffc
80004b4a:	6c 3a       	ld.w	r10,r6[0xc]
80004b4c:	ec 08 00 09 	add	r9,r6,r8
80004b50:	0a 9c       	mov	r12,r5
80004b52:	6c 28       	ld.w	r8,r6[0x8]
80004b54:	95 28       	st.w	r10[0x8],r8
80004b56:	91 3a       	st.w	r8[0xc],r10
80004b58:	c4 68       	rjmp	80004be4 <_malloc_r+0xec>
80004b5a:	2f e3       	sub	r3,-2
80004b5c:	c4 c8       	rjmp	80004bf4 <_malloc_r+0xfc>
80004b5e:	ee 03 16 09 	lsr	r3,r7,0x9
80004b62:	c0 41       	brne	80004b6a <_malloc_r+0x72>
80004b64:	ee 03 16 03 	lsr	r3,r7,0x3
80004b68:	c2 68       	rjmp	80004bb4 <_malloc_r+0xbc>
80004b6a:	58 43       	cp.w	r3,4
80004b6c:	e0 8b 00 06 	brhi	80004b78 <_malloc_r+0x80>
80004b70:	ee 03 16 06 	lsr	r3,r7,0x6
80004b74:	2c 83       	sub	r3,-56
80004b76:	c1 f8       	rjmp	80004bb4 <_malloc_r+0xbc>
80004b78:	59 43       	cp.w	r3,20
80004b7a:	e0 8b 00 04 	brhi	80004b82 <_malloc_r+0x8a>
80004b7e:	2a 53       	sub	r3,-91
80004b80:	c1 a8       	rjmp	80004bb4 <_malloc_r+0xbc>
80004b82:	e0 43 00 54 	cp.w	r3,84
80004b86:	e0 8b 00 06 	brhi	80004b92 <_malloc_r+0x9a>
80004b8a:	ee 03 16 0c 	lsr	r3,r7,0xc
80004b8e:	29 23       	sub	r3,-110
80004b90:	c1 28       	rjmp	80004bb4 <_malloc_r+0xbc>
80004b92:	e0 43 01 54 	cp.w	r3,340
80004b96:	e0 8b 00 06 	brhi	80004ba2 <_malloc_r+0xaa>
80004b9a:	ee 03 16 0f 	lsr	r3,r7,0xf
80004b9e:	28 93       	sub	r3,-119
80004ba0:	c0 a8       	rjmp	80004bb4 <_malloc_r+0xbc>
80004ba2:	e0 43 05 54 	cp.w	r3,1364
80004ba6:	e0 88 00 04 	brls	80004bae <_malloc_r+0xb6>
80004baa:	37 e3       	mov	r3,126
80004bac:	c0 48       	rjmp	80004bb4 <_malloc_r+0xbc>
80004bae:	ee 03 16 12 	lsr	r3,r7,0x12
80004bb2:	28 43       	sub	r3,-124
80004bb4:	4a ba       	lddpc	r10,80004c60 <_malloc_r+0x168>
80004bb6:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004bba:	74 36       	ld.w	r6,r10[0xc]
80004bbc:	c1 98       	rjmp	80004bee <_malloc_r+0xf6>
80004bbe:	6c 19       	ld.w	r9,r6[0x4]
80004bc0:	e0 19 ff fc 	andl	r9,0xfffc
80004bc4:	f2 07 01 0b 	sub	r11,r9,r7
80004bc8:	58 fb       	cp.w	r11,15
80004bca:	e0 8a 00 04 	brle	80004bd2 <_malloc_r+0xda>
80004bce:	20 13       	sub	r3,1
80004bd0:	c1 18       	rjmp	80004bf2 <_malloc_r+0xfa>
80004bd2:	6c 38       	ld.w	r8,r6[0xc]
80004bd4:	58 0b       	cp.w	r11,0
80004bd6:	c0 b5       	brlt	80004bec <_malloc_r+0xf4>
80004bd8:	6c 2a       	ld.w	r10,r6[0x8]
80004bda:	ec 09 00 09 	add	r9,r6,r9
80004bde:	0a 9c       	mov	r12,r5
80004be0:	91 2a       	st.w	r8[0x8],r10
80004be2:	95 38       	st.w	r10[0xc],r8
80004be4:	72 18       	ld.w	r8,r9[0x4]
80004be6:	a1 a8       	sbr	r8,0x0
80004be8:	93 18       	st.w	r9[0x4],r8
80004bea:	cb c8       	rjmp	80004d62 <_malloc_r+0x26a>
80004bec:	10 96       	mov	r6,r8
80004bee:	14 36       	cp.w	r6,r10
80004bf0:	ce 71       	brne	80004bbe <_malloc_r+0xc6>
80004bf2:	2f f3       	sub	r3,-1
80004bf4:	49 ba       	lddpc	r10,80004c60 <_malloc_r+0x168>
80004bf6:	f4 cc ff f8 	sub	r12,r10,-8
80004bfa:	78 26       	ld.w	r6,r12[0x8]
80004bfc:	18 36       	cp.w	r6,r12
80004bfe:	c6 e0       	breq	80004cda <_malloc_r+0x1e2>
80004c00:	6c 19       	ld.w	r9,r6[0x4]
80004c02:	e0 19 ff fc 	andl	r9,0xfffc
80004c06:	f2 07 01 08 	sub	r8,r9,r7
80004c0a:	58 f8       	cp.w	r8,15
80004c0c:	e0 89 00 90 	brgt	80004d2c <_malloc_r+0x234>
80004c10:	99 3c       	st.w	r12[0xc],r12
80004c12:	99 2c       	st.w	r12[0x8],r12
80004c14:	58 08       	cp.w	r8,0
80004c16:	c0 55       	brlt	80004c20 <_malloc_r+0x128>
80004c18:	ec 09 00 09 	add	r9,r6,r9
80004c1c:	0a 9c       	mov	r12,r5
80004c1e:	ce 3b       	rjmp	80004be4 <_malloc_r+0xec>
80004c20:	e0 49 01 ff 	cp.w	r9,511
80004c24:	e0 8b 00 13 	brhi	80004c4a <_malloc_r+0x152>
80004c28:	a3 99       	lsr	r9,0x3
80004c2a:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004c2e:	70 2b       	ld.w	r11,r8[0x8]
80004c30:	8d 38       	st.w	r6[0xc],r8
80004c32:	8d 2b       	st.w	r6[0x8],r11
80004c34:	97 36       	st.w	r11[0xc],r6
80004c36:	91 26       	st.w	r8[0x8],r6
80004c38:	a3 49       	asr	r9,0x2
80004c3a:	74 18       	ld.w	r8,r10[0x4]
80004c3c:	30 1b       	mov	r11,1
80004c3e:	f6 09 09 49 	lsl	r9,r11,r9
80004c42:	f1 e9 10 09 	or	r9,r8,r9
80004c46:	95 19       	st.w	r10[0x4],r9
80004c48:	c4 98       	rjmp	80004cda <_malloc_r+0x1e2>
80004c4a:	f2 0a 16 09 	lsr	r10,r9,0x9
80004c4e:	58 4a       	cp.w	r10,4
80004c50:	e0 8b 00 0a 	brhi	80004c64 <_malloc_r+0x16c>
80004c54:	f2 0a 16 06 	lsr	r10,r9,0x6
80004c58:	2c 8a       	sub	r10,-56
80004c5a:	c2 38       	rjmp	80004ca0 <_malloc_r+0x1a8>
80004c5c:	80 00       	ld.sh	r0,r0[0x0]
80004c5e:	42 d8       	lddsp	r8,sp[0xb4]
80004c60:	00 00       	add	r0,r0
80004c62:	01 f0       	ld.ub	r0,r0[0x7]
80004c64:	59 4a       	cp.w	r10,20
80004c66:	e0 8b 00 04 	brhi	80004c6e <_malloc_r+0x176>
80004c6a:	2a 5a       	sub	r10,-91
80004c6c:	c1 a8       	rjmp	80004ca0 <_malloc_r+0x1a8>
80004c6e:	e0 4a 00 54 	cp.w	r10,84
80004c72:	e0 8b 00 06 	brhi	80004c7e <_malloc_r+0x186>
80004c76:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004c7a:	29 2a       	sub	r10,-110
80004c7c:	c1 28       	rjmp	80004ca0 <_malloc_r+0x1a8>
80004c7e:	e0 4a 01 54 	cp.w	r10,340
80004c82:	e0 8b 00 06 	brhi	80004c8e <_malloc_r+0x196>
80004c86:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004c8a:	28 9a       	sub	r10,-119
80004c8c:	c0 a8       	rjmp	80004ca0 <_malloc_r+0x1a8>
80004c8e:	e0 4a 05 54 	cp.w	r10,1364
80004c92:	e0 88 00 04 	brls	80004c9a <_malloc_r+0x1a2>
80004c96:	37 ea       	mov	r10,126
80004c98:	c0 48       	rjmp	80004ca0 <_malloc_r+0x1a8>
80004c9a:	f2 0a 16 12 	lsr	r10,r9,0x12
80004c9e:	28 4a       	sub	r10,-124
80004ca0:	4c 8b       	lddpc	r11,80004dc0 <_malloc_r+0x2c8>
80004ca2:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004ca6:	68 28       	ld.w	r8,r4[0x8]
80004ca8:	08 38       	cp.w	r8,r4
80004caa:	c0 e1       	brne	80004cc6 <_malloc_r+0x1ce>
80004cac:	76 19       	ld.w	r9,r11[0x4]
80004cae:	a3 4a       	asr	r10,0x2
80004cb0:	30 1e       	mov	lr,1
80004cb2:	fc 0a 09 4a 	lsl	r10,lr,r10
80004cb6:	f3 ea 10 0a 	or	r10,r9,r10
80004cba:	10 99       	mov	r9,r8
80004cbc:	97 1a       	st.w	r11[0x4],r10
80004cbe:	c0 a8       	rjmp	80004cd2 <_malloc_r+0x1da>
80004cc0:	70 28       	ld.w	r8,r8[0x8]
80004cc2:	08 38       	cp.w	r8,r4
80004cc4:	c0 60       	breq	80004cd0 <_malloc_r+0x1d8>
80004cc6:	70 1a       	ld.w	r10,r8[0x4]
80004cc8:	e0 1a ff fc 	andl	r10,0xfffc
80004ccc:	14 39       	cp.w	r9,r10
80004cce:	cf 93       	brcs	80004cc0 <_malloc_r+0x1c8>
80004cd0:	70 39       	ld.w	r9,r8[0xc]
80004cd2:	8d 39       	st.w	r6[0xc],r9
80004cd4:	8d 28       	st.w	r6[0x8],r8
80004cd6:	91 36       	st.w	r8[0xc],r6
80004cd8:	93 26       	st.w	r9[0x8],r6
80004cda:	e6 08 14 02 	asr	r8,r3,0x2
80004cde:	30 1b       	mov	r11,1
80004ce0:	4b 84       	lddpc	r4,80004dc0 <_malloc_r+0x2c8>
80004ce2:	f6 08 09 4b 	lsl	r11,r11,r8
80004ce6:	68 18       	ld.w	r8,r4[0x4]
80004ce8:	10 3b       	cp.w	r11,r8
80004cea:	e0 8b 00 6f 	brhi	80004dc8 <_malloc_r+0x2d0>
80004cee:	f7 e8 00 09 	and	r9,r11,r8
80004cf2:	c0 b1       	brne	80004d08 <_malloc_r+0x210>
80004cf4:	e0 13 ff fc 	andl	r3,0xfffc
80004cf8:	a1 7b       	lsl	r11,0x1
80004cfa:	2f c3       	sub	r3,-4
80004cfc:	c0 38       	rjmp	80004d02 <_malloc_r+0x20a>
80004cfe:	2f c3       	sub	r3,-4
80004d00:	a1 7b       	lsl	r11,0x1
80004d02:	f7 e8 00 09 	and	r9,r11,r8
80004d06:	cf c0       	breq	80004cfe <_malloc_r+0x206>
80004d08:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004d0c:	06 92       	mov	r2,r3
80004d0e:	1c 91       	mov	r1,lr
80004d10:	62 36       	ld.w	r6,r1[0xc]
80004d12:	c2 e8       	rjmp	80004d6e <_malloc_r+0x276>
80004d14:	6c 1a       	ld.w	r10,r6[0x4]
80004d16:	e0 1a ff fc 	andl	r10,0xfffc
80004d1a:	f4 07 01 08 	sub	r8,r10,r7
80004d1e:	58 f8       	cp.w	r8,15
80004d20:	e0 8a 00 15 	brle	80004d4a <_malloc_r+0x252>
80004d24:	6c 3a       	ld.w	r10,r6[0xc]
80004d26:	6c 29       	ld.w	r9,r6[0x8]
80004d28:	95 29       	st.w	r10[0x8],r9
80004d2a:	93 3a       	st.w	r9[0xc],r10
80004d2c:	0e 99       	mov	r9,r7
80004d2e:	ec 07 00 07 	add	r7,r6,r7
80004d32:	a1 a9       	sbr	r9,0x0
80004d34:	99 37       	st.w	r12[0xc],r7
80004d36:	99 27       	st.w	r12[0x8],r7
80004d38:	8d 19       	st.w	r6[0x4],r9
80004d3a:	ee 08 09 08 	st.w	r7[r8],r8
80004d3e:	8f 2c       	st.w	r7[0x8],r12
80004d40:	8f 3c       	st.w	r7[0xc],r12
80004d42:	a1 a8       	sbr	r8,0x0
80004d44:	0a 9c       	mov	r12,r5
80004d46:	8f 18       	st.w	r7[0x4],r8
80004d48:	c0 d8       	rjmp	80004d62 <_malloc_r+0x26a>
80004d4a:	6c 39       	ld.w	r9,r6[0xc]
80004d4c:	58 08       	cp.w	r8,0
80004d4e:	c0 f5       	brlt	80004d6c <_malloc_r+0x274>
80004d50:	ec 0a 00 0a 	add	r10,r6,r10
80004d54:	74 18       	ld.w	r8,r10[0x4]
80004d56:	a1 a8       	sbr	r8,0x0
80004d58:	0a 9c       	mov	r12,r5
80004d5a:	95 18       	st.w	r10[0x4],r8
80004d5c:	6c 28       	ld.w	r8,r6[0x8]
80004d5e:	93 28       	st.w	r9[0x8],r8
80004d60:	91 39       	st.w	r8[0xc],r9
80004d62:	f0 1f 00 19 	mcall	80004dc4 <_malloc_r+0x2cc>
80004d66:	ec cc ff f8 	sub	r12,r6,-8
80004d6a:	d8 32       	popm	r0-r7,pc
80004d6c:	12 96       	mov	r6,r9
80004d6e:	02 36       	cp.w	r6,r1
80004d70:	cd 21       	brne	80004d14 <_malloc_r+0x21c>
80004d72:	2f f2       	sub	r2,-1
80004d74:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004d78:	c0 30       	breq	80004d7e <_malloc_r+0x286>
80004d7a:	2f 81       	sub	r1,-8
80004d7c:	cc ab       	rjmp	80004d10 <_malloc_r+0x218>
80004d7e:	1c 98       	mov	r8,lr
80004d80:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004d84:	c0 81       	brne	80004d94 <_malloc_r+0x29c>
80004d86:	68 19       	ld.w	r9,r4[0x4]
80004d88:	f6 08 11 ff 	rsub	r8,r11,-1
80004d8c:	f3 e8 00 08 	and	r8,r9,r8
80004d90:	89 18       	st.w	r4[0x4],r8
80004d92:	c0 78       	rjmp	80004da0 <_malloc_r+0x2a8>
80004d94:	f0 c9 00 08 	sub	r9,r8,8
80004d98:	20 13       	sub	r3,1
80004d9a:	70 08       	ld.w	r8,r8[0x0]
80004d9c:	12 38       	cp.w	r8,r9
80004d9e:	cf 10       	breq	80004d80 <_malloc_r+0x288>
80004da0:	a1 7b       	lsl	r11,0x1
80004da2:	68 18       	ld.w	r8,r4[0x4]
80004da4:	10 3b       	cp.w	r11,r8
80004da6:	e0 8b 00 11 	brhi	80004dc8 <_malloc_r+0x2d0>
80004daa:	58 0b       	cp.w	r11,0
80004dac:	c0 e0       	breq	80004dc8 <_malloc_r+0x2d0>
80004dae:	04 93       	mov	r3,r2
80004db0:	c0 38       	rjmp	80004db6 <_malloc_r+0x2be>
80004db2:	2f c3       	sub	r3,-4
80004db4:	a1 7b       	lsl	r11,0x1
80004db6:	f7 e8 00 09 	and	r9,r11,r8
80004dba:	ca 71       	brne	80004d08 <_malloc_r+0x210>
80004dbc:	cf bb       	rjmp	80004db2 <_malloc_r+0x2ba>
80004dbe:	00 00       	add	r0,r0
80004dc0:	00 00       	add	r0,r0
80004dc2:	01 f0       	ld.ub	r0,r0[0x7]
80004dc4:	80 00       	ld.sh	r0,r0[0x0]
80004dc6:	42 e4       	lddsp	r4,sp[0xb8]
80004dc8:	68 23       	ld.w	r3,r4[0x8]
80004dca:	66 12       	ld.w	r2,r3[0x4]
80004dcc:	e0 12 ff fc 	andl	r2,0xfffc
80004dd0:	0e 32       	cp.w	r2,r7
80004dd2:	5f 39       	srlo	r9
80004dd4:	e4 07 01 08 	sub	r8,r2,r7
80004dd8:	58 f8       	cp.w	r8,15
80004dda:	5f aa       	srle	r10
80004ddc:	f5 e9 10 09 	or	r9,r10,r9
80004de0:	e0 80 00 a2 	breq	80004f24 <_malloc_r+0x42c>
80004de4:	4c 88       	lddpc	r8,80004f04 <_malloc_r+0x40c>
80004de6:	70 01       	ld.w	r1,r8[0x0]
80004de8:	4c 88       	lddpc	r8,80004f08 <_malloc_r+0x410>
80004dea:	2f 01       	sub	r1,-16
80004dec:	70 08       	ld.w	r8,r8[0x0]
80004dee:	0e 01       	add	r1,r7
80004df0:	5b f8       	cp.w	r8,-1
80004df2:	c0 40       	breq	80004dfa <_malloc_r+0x302>
80004df4:	28 11       	sub	r1,-127
80004df6:	e0 11 ff 80 	andl	r1,0xff80
80004dfa:	02 9b       	mov	r11,r1
80004dfc:	0a 9c       	mov	r12,r5
80004dfe:	f0 1f 00 44 	mcall	80004f0c <_malloc_r+0x414>
80004e02:	18 96       	mov	r6,r12
80004e04:	5b fc       	cp.w	r12,-1
80004e06:	c6 e0       	breq	80004ee2 <_malloc_r+0x3ea>
80004e08:	e6 02 00 08 	add	r8,r3,r2
80004e0c:	10 3c       	cp.w	r12,r8
80004e0e:	c0 32       	brcc	80004e14 <_malloc_r+0x31c>
80004e10:	08 33       	cp.w	r3,r4
80004e12:	c6 81       	brne	80004ee2 <_malloc_r+0x3ea>
80004e14:	4b fa       	lddpc	r10,80004f10 <_malloc_r+0x418>
80004e16:	74 09       	ld.w	r9,r10[0x0]
80004e18:	e2 09 00 09 	add	r9,r1,r9
80004e1c:	95 09       	st.w	r10[0x0],r9
80004e1e:	10 36       	cp.w	r6,r8
80004e20:	c0 a1       	brne	80004e34 <_malloc_r+0x33c>
80004e22:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004e26:	c0 71       	brne	80004e34 <_malloc_r+0x33c>
80004e28:	e2 02 00 02 	add	r2,r1,r2
80004e2c:	68 28       	ld.w	r8,r4[0x8]
80004e2e:	a1 a2       	sbr	r2,0x0
80004e30:	91 12       	st.w	r8[0x4],r2
80004e32:	c4 c8       	rjmp	80004eca <_malloc_r+0x3d2>
80004e34:	4b 5a       	lddpc	r10,80004f08 <_malloc_r+0x410>
80004e36:	74 0b       	ld.w	r11,r10[0x0]
80004e38:	5b fb       	cp.w	r11,-1
80004e3a:	c0 31       	brne	80004e40 <_malloc_r+0x348>
80004e3c:	95 06       	st.w	r10[0x0],r6
80004e3e:	c0 68       	rjmp	80004e4a <_malloc_r+0x352>
80004e40:	ec 09 00 09 	add	r9,r6,r9
80004e44:	4b 3a       	lddpc	r10,80004f10 <_malloc_r+0x418>
80004e46:	10 19       	sub	r9,r8
80004e48:	95 09       	st.w	r10[0x0],r9
80004e4a:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004e4e:	f0 09 11 08 	rsub	r9,r8,8
80004e52:	58 08       	cp.w	r8,0
80004e54:	f2 08 17 10 	movne	r8,r9
80004e58:	ed d8 e1 06 	addne	r6,r6,r8
80004e5c:	28 08       	sub	r8,-128
80004e5e:	ec 01 00 01 	add	r1,r6,r1
80004e62:	0a 9c       	mov	r12,r5
80004e64:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004e68:	f0 01 01 01 	sub	r1,r8,r1
80004e6c:	02 9b       	mov	r11,r1
80004e6e:	f0 1f 00 28 	mcall	80004f0c <_malloc_r+0x414>
80004e72:	4a 88       	lddpc	r8,80004f10 <_malloc_r+0x418>
80004e74:	5b fc       	cp.w	r12,-1
80004e76:	ec 0c 17 00 	moveq	r12,r6
80004e7a:	f9 b1 00 00 	moveq	r1,0
80004e7e:	70 09       	ld.w	r9,r8[0x0]
80004e80:	0c 1c       	sub	r12,r6
80004e82:	89 26       	st.w	r4[0x8],r6
80004e84:	02 0c       	add	r12,r1
80004e86:	12 01       	add	r1,r9
80004e88:	a1 ac       	sbr	r12,0x0
80004e8a:	91 01       	st.w	r8[0x0],r1
80004e8c:	8d 1c       	st.w	r6[0x4],r12
80004e8e:	08 33       	cp.w	r3,r4
80004e90:	c1 d0       	breq	80004eca <_malloc_r+0x3d2>
80004e92:	58 f2       	cp.w	r2,15
80004e94:	e0 8b 00 05 	brhi	80004e9e <_malloc_r+0x3a6>
80004e98:	30 18       	mov	r8,1
80004e9a:	8d 18       	st.w	r6[0x4],r8
80004e9c:	c2 38       	rjmp	80004ee2 <_malloc_r+0x3ea>
80004e9e:	30 59       	mov	r9,5
80004ea0:	20 c2       	sub	r2,12
80004ea2:	e0 12 ff f8 	andl	r2,0xfff8
80004ea6:	e6 02 00 08 	add	r8,r3,r2
80004eaa:	91 29       	st.w	r8[0x8],r9
80004eac:	91 19       	st.w	r8[0x4],r9
80004eae:	66 18       	ld.w	r8,r3[0x4]
80004eb0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004eb4:	e5 e8 10 08 	or	r8,r2,r8
80004eb8:	87 18       	st.w	r3[0x4],r8
80004eba:	58 f2       	cp.w	r2,15
80004ebc:	e0 88 00 07 	brls	80004eca <_malloc_r+0x3d2>
80004ec0:	e6 cb ff f8 	sub	r11,r3,-8
80004ec4:	0a 9c       	mov	r12,r5
80004ec6:	f0 1f 00 14 	mcall	80004f14 <_malloc_r+0x41c>
80004eca:	49 49       	lddpc	r9,80004f18 <_malloc_r+0x420>
80004ecc:	72 0a       	ld.w	r10,r9[0x0]
80004ece:	49 18       	lddpc	r8,80004f10 <_malloc_r+0x418>
80004ed0:	70 08       	ld.w	r8,r8[0x0]
80004ed2:	14 38       	cp.w	r8,r10
80004ed4:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004ed8:	49 19       	lddpc	r9,80004f1c <_malloc_r+0x424>
80004eda:	72 0a       	ld.w	r10,r9[0x0]
80004edc:	14 38       	cp.w	r8,r10
80004ede:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004ee2:	68 28       	ld.w	r8,r4[0x8]
80004ee4:	70 18       	ld.w	r8,r8[0x4]
80004ee6:	e0 18 ff fc 	andl	r8,0xfffc
80004eea:	0e 38       	cp.w	r8,r7
80004eec:	5f 39       	srlo	r9
80004eee:	0e 18       	sub	r8,r7
80004ef0:	58 f8       	cp.w	r8,15
80004ef2:	5f aa       	srle	r10
80004ef4:	f5 e9 10 09 	or	r9,r10,r9
80004ef8:	c1 60       	breq	80004f24 <_malloc_r+0x42c>
80004efa:	0a 9c       	mov	r12,r5
80004efc:	f0 1f 00 09 	mcall	80004f20 <_malloc_r+0x428>
80004f00:	d8 3a       	popm	r0-r7,pc,r12=0
80004f02:	00 00       	add	r0,r0
80004f04:	00 00       	add	r0,r0
80004f06:	09 d0       	ld.ub	r0,r4[0x5]
80004f08:	00 00       	add	r0,r0
80004f0a:	05 fc       	ld.ub	r12,r2[0x7]
80004f0c:	80 00       	ld.sh	r0,r0[0x0]
80004f0e:	53 b8       	stdsp	sp[0xec],r8
80004f10:	00 00       	add	r0,r0
80004f12:	09 d4       	ld.ub	r4,r4[0x5]
80004f14:	80 00       	ld.sh	r0,r0[0x0]
80004f16:	8c 7c       	ld.sh	r12,r6[0xe]
80004f18:	00 00       	add	r0,r0
80004f1a:	09 cc       	ld.ub	r12,r4[0x4]
80004f1c:	00 00       	add	r0,r0
80004f1e:	09 c8       	ld.ub	r8,r4[0x4]
80004f20:	80 00       	ld.sh	r0,r0[0x0]
80004f22:	42 e4       	lddsp	r4,sp[0xb8]
80004f24:	68 26       	ld.w	r6,r4[0x8]
80004f26:	a1 a8       	sbr	r8,0x0
80004f28:	0e 99       	mov	r9,r7
80004f2a:	a1 a9       	sbr	r9,0x0
80004f2c:	8d 19       	st.w	r6[0x4],r9
80004f2e:	ec 07 00 07 	add	r7,r6,r7
80004f32:	0a 9c       	mov	r12,r5
80004f34:	89 27       	st.w	r4[0x8],r7
80004f36:	8f 18       	st.w	r7[0x4],r8
80004f38:	f0 1f 00 03 	mcall	80004f44 <_malloc_r+0x44c>
80004f3c:	ec cc ff f8 	sub	r12,r6,-8
80004f40:	d8 32       	popm	r0-r7,pc
80004f42:	00 00       	add	r0,r0
80004f44:	80 00       	ld.sh	r0,r0[0x0]
80004f46:	42 e4       	lddsp	r4,sp[0xb8]

80004f48 <memcpy>:
80004f48:	58 8a       	cp.w	r10,8
80004f4a:	c2 f5       	brlt	80004fa8 <memcpy+0x60>
80004f4c:	f9 eb 10 09 	or	r9,r12,r11
80004f50:	e2 19 00 03 	andl	r9,0x3,COH
80004f54:	e0 81 00 97 	brne	80005082 <memcpy+0x13a>
80004f58:	e0 4a 00 20 	cp.w	r10,32
80004f5c:	c3 b4       	brge	80004fd2 <memcpy+0x8a>
80004f5e:	f4 08 14 02 	asr	r8,r10,0x2
80004f62:	f0 09 11 08 	rsub	r9,r8,8
80004f66:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80004f6a:	76 69       	ld.w	r9,r11[0x18]
80004f6c:	99 69       	st.w	r12[0x18],r9
80004f6e:	76 59       	ld.w	r9,r11[0x14]
80004f70:	99 59       	st.w	r12[0x14],r9
80004f72:	76 49       	ld.w	r9,r11[0x10]
80004f74:	99 49       	st.w	r12[0x10],r9
80004f76:	76 39       	ld.w	r9,r11[0xc]
80004f78:	99 39       	st.w	r12[0xc],r9
80004f7a:	76 29       	ld.w	r9,r11[0x8]
80004f7c:	99 29       	st.w	r12[0x8],r9
80004f7e:	76 19       	ld.w	r9,r11[0x4]
80004f80:	99 19       	st.w	r12[0x4],r9
80004f82:	76 09       	ld.w	r9,r11[0x0]
80004f84:	99 09       	st.w	r12[0x0],r9
80004f86:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80004f8a:	f8 08 00 28 	add	r8,r12,r8<<0x2
80004f8e:	e0 1a 00 03 	andl	r10,0x3
80004f92:	f4 0a 11 04 	rsub	r10,r10,4
80004f96:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004f9a:	17 a9       	ld.ub	r9,r11[0x2]
80004f9c:	b0 a9       	st.b	r8[0x2],r9
80004f9e:	17 99       	ld.ub	r9,r11[0x1]
80004fa0:	b0 99       	st.b	r8[0x1],r9
80004fa2:	17 89       	ld.ub	r9,r11[0x0]
80004fa4:	b0 89       	st.b	r8[0x0],r9
80004fa6:	5e fc       	retal	r12
80004fa8:	f4 0a 11 09 	rsub	r10,r10,9
80004fac:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004fb0:	17 f9       	ld.ub	r9,r11[0x7]
80004fb2:	b8 f9       	st.b	r12[0x7],r9
80004fb4:	17 e9       	ld.ub	r9,r11[0x6]
80004fb6:	b8 e9       	st.b	r12[0x6],r9
80004fb8:	17 d9       	ld.ub	r9,r11[0x5]
80004fba:	b8 d9       	st.b	r12[0x5],r9
80004fbc:	17 c9       	ld.ub	r9,r11[0x4]
80004fbe:	b8 c9       	st.b	r12[0x4],r9
80004fc0:	17 b9       	ld.ub	r9,r11[0x3]
80004fc2:	b8 b9       	st.b	r12[0x3],r9
80004fc4:	17 a9       	ld.ub	r9,r11[0x2]
80004fc6:	b8 a9       	st.b	r12[0x2],r9
80004fc8:	17 99       	ld.ub	r9,r11[0x1]
80004fca:	b8 99       	st.b	r12[0x1],r9
80004fcc:	17 89       	ld.ub	r9,r11[0x0]
80004fce:	b8 89       	st.b	r12[0x0],r9
80004fd0:	5e fc       	retal	r12
80004fd2:	eb cd 40 c0 	pushm	r6-r7,lr
80004fd6:	18 99       	mov	r9,r12
80004fd8:	22 0a       	sub	r10,32
80004fda:	b7 07       	ld.d	r6,r11++
80004fdc:	b3 26       	st.d	r9++,r6
80004fde:	b7 07       	ld.d	r6,r11++
80004fe0:	b3 26       	st.d	r9++,r6
80004fe2:	b7 07       	ld.d	r6,r11++
80004fe4:	b3 26       	st.d	r9++,r6
80004fe6:	b7 07       	ld.d	r6,r11++
80004fe8:	b3 26       	st.d	r9++,r6
80004fea:	22 0a       	sub	r10,32
80004fec:	cf 74       	brge	80004fda <memcpy+0x92>
80004fee:	2f 0a       	sub	r10,-16
80004ff0:	c0 65       	brlt	80004ffc <memcpy+0xb4>
80004ff2:	b7 07       	ld.d	r6,r11++
80004ff4:	b3 26       	st.d	r9++,r6
80004ff6:	b7 07       	ld.d	r6,r11++
80004ff8:	b3 26       	st.d	r9++,r6
80004ffa:	21 0a       	sub	r10,16
80004ffc:	5c 3a       	neg	r10
80004ffe:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80005002:	d7 03       	nop
80005004:	d7 03       	nop
80005006:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000500a:	f3 66 00 0e 	st.b	r9[14],r6
8000500e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80005012:	f3 66 00 0d 	st.b	r9[13],r6
80005016:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000501a:	f3 66 00 0c 	st.b	r9[12],r6
8000501e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80005022:	f3 66 00 0b 	st.b	r9[11],r6
80005026:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000502a:	f3 66 00 0a 	st.b	r9[10],r6
8000502e:	f7 36 00 09 	ld.ub	r6,r11[9]
80005032:	f3 66 00 09 	st.b	r9[9],r6
80005036:	f7 36 00 08 	ld.ub	r6,r11[8]
8000503a:	f3 66 00 08 	st.b	r9[8],r6
8000503e:	f7 36 00 07 	ld.ub	r6,r11[7]
80005042:	f3 66 00 07 	st.b	r9[7],r6
80005046:	f7 36 00 06 	ld.ub	r6,r11[6]
8000504a:	f3 66 00 06 	st.b	r9[6],r6
8000504e:	f7 36 00 05 	ld.ub	r6,r11[5]
80005052:	f3 66 00 05 	st.b	r9[5],r6
80005056:	f7 36 00 04 	ld.ub	r6,r11[4]
8000505a:	f3 66 00 04 	st.b	r9[4],r6
8000505e:	f7 36 00 03 	ld.ub	r6,r11[3]
80005062:	f3 66 00 03 	st.b	r9[3],r6
80005066:	f7 36 00 02 	ld.ub	r6,r11[2]
8000506a:	f3 66 00 02 	st.b	r9[2],r6
8000506e:	f7 36 00 01 	ld.ub	r6,r11[1]
80005072:	f3 66 00 01 	st.b	r9[1],r6
80005076:	f7 36 00 00 	ld.ub	r6,r11[0]
8000507a:	f3 66 00 00 	st.b	r9[0],r6
8000507e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005082:	20 1a       	sub	r10,1
80005084:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80005088:	f8 0a 0b 09 	st.b	r12[r10],r9
8000508c:	cf b1       	brne	80005082 <memcpy+0x13a>
8000508e:	5e fc       	retal	r12

80005090 <memset>:
80005090:	18 98       	mov	r8,r12
80005092:	c0 38       	rjmp	80005098 <memset+0x8>
80005094:	10 cb       	st.b	r8++,r11
80005096:	20 1a       	sub	r10,1
80005098:	58 0a       	cp.w	r10,0
8000509a:	cf d1       	brne	80005094 <memset+0x4>
8000509c:	5e fc       	retal	r12
8000509e:	d7 03       	nop

800050a0 <printf>:
800050a0:	d4 21       	pushm	r4-r7,lr
800050a2:	48 b8       	lddpc	r8,800050cc <printf+0x2c>
800050a4:	fa c4 ff ec 	sub	r4,sp,-20
800050a8:	18 96       	mov	r6,r12
800050aa:	70 07       	ld.w	r7,r8[0x0]
800050ac:	58 07       	cp.w	r7,0
800050ae:	c0 70       	breq	800050bc <printf+0x1c>
800050b0:	6e 68       	ld.w	r8,r7[0x18]
800050b2:	58 08       	cp.w	r8,0
800050b4:	c0 41       	brne	800050bc <printf+0x1c>
800050b6:	0e 9c       	mov	r12,r7
800050b8:	f0 1f 00 06 	mcall	800050d0 <printf+0x30>
800050bc:	08 99       	mov	r9,r4
800050be:	0c 9a       	mov	r10,r6
800050c0:	0e 9c       	mov	r12,r7
800050c2:	6e 1b       	ld.w	r11,r7[0x4]
800050c4:	f0 1f 00 04 	mcall	800050d4 <printf+0x34>
800050c8:	d8 22       	popm	r4-r7,pc
800050ca:	00 00       	add	r0,r0
800050cc:	00 00       	add	r0,r0
800050ce:	01 ec       	ld.ub	r12,r0[0x6]
800050d0:	80 00       	ld.sh	r0,r0[0x0]
800050d2:	8b 24       	st.w	r5[0x8],r4
800050d4:	80 00       	ld.sh	r0,r0[0x0]
800050d6:	59 84       	cp.w	r4,24

800050d8 <_realloc_r>:
800050d8:	d4 31       	pushm	r0-r7,lr
800050da:	20 1d       	sub	sp,4
800050dc:	16 94       	mov	r4,r11
800050de:	18 92       	mov	r2,r12
800050e0:	14 9b       	mov	r11,r10
800050e2:	58 04       	cp.w	r4,0
800050e4:	c0 51       	brne	800050ee <_realloc_r+0x16>
800050e6:	f0 1f 00 5b 	mcall	80005250 <_realloc_r+0x178>
800050ea:	18 95       	mov	r5,r12
800050ec:	c5 b9       	rjmp	800053a2 <_realloc_r+0x2ca>
800050ee:	50 0a       	stdsp	sp[0x0],r10
800050f0:	f0 1f 00 59 	mcall	80005254 <_realloc_r+0x17c>
800050f4:	40 0b       	lddsp	r11,sp[0x0]
800050f6:	f6 c8 ff f5 	sub	r8,r11,-11
800050fa:	e8 c1 00 08 	sub	r1,r4,8
800050fe:	10 96       	mov	r6,r8
80005100:	62 1c       	ld.w	r12,r1[0x4]
80005102:	e0 16 ff f8 	andl	r6,0xfff8
80005106:	59 68       	cp.w	r8,22
80005108:	f9 b6 08 10 	movls	r6,16
8000510c:	16 36       	cp.w	r6,r11
8000510e:	5f 38       	srlo	r8
80005110:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80005114:	c0 50       	breq	8000511e <_realloc_r+0x46>
80005116:	30 c8       	mov	r8,12
80005118:	30 05       	mov	r5,0
8000511a:	85 38       	st.w	r2[0xc],r8
8000511c:	c4 39       	rjmp	800053a2 <_realloc_r+0x2ca>
8000511e:	18 90       	mov	r0,r12
80005120:	e0 10 ff fc 	andl	r0,0xfffc
80005124:	0c 30       	cp.w	r0,r6
80005126:	e0 84 01 13 	brge	8000534c <_realloc_r+0x274>
8000512a:	4c c8       	lddpc	r8,80005258 <_realloc_r+0x180>
8000512c:	e2 00 00 09 	add	r9,r1,r0
80005130:	70 25       	ld.w	r5,r8[0x8]
80005132:	0a 39       	cp.w	r9,r5
80005134:	c0 90       	breq	80005146 <_realloc_r+0x6e>
80005136:	72 1a       	ld.w	r10,r9[0x4]
80005138:	a1 ca       	cbr	r10,0x0
8000513a:	f2 0a 00 0a 	add	r10,r9,r10
8000513e:	74 1a       	ld.w	r10,r10[0x4]
80005140:	ed ba 00 00 	bld	r10,0x0
80005144:	c2 20       	breq	80005188 <_realloc_r+0xb0>
80005146:	72 1a       	ld.w	r10,r9[0x4]
80005148:	e0 1a ff fc 	andl	r10,0xfffc
8000514c:	f4 00 00 03 	add	r3,r10,r0
80005150:	0a 39       	cp.w	r9,r5
80005152:	c1 31       	brne	80005178 <_realloc_r+0xa0>
80005154:	ec c7 ff f0 	sub	r7,r6,-16
80005158:	0e 33       	cp.w	r3,r7
8000515a:	c1 95       	brlt	8000518c <_realloc_r+0xb4>
8000515c:	e2 06 00 09 	add	r9,r1,r6
80005160:	0c 13       	sub	r3,r6
80005162:	a1 a3       	sbr	r3,0x0
80005164:	93 13       	st.w	r9[0x4],r3
80005166:	91 29       	st.w	r8[0x8],r9
80005168:	04 9c       	mov	r12,r2
8000516a:	62 18       	ld.w	r8,r1[0x4]
8000516c:	08 95       	mov	r5,r4
8000516e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005172:	10 46       	or	r6,r8
80005174:	83 16       	st.w	r1[0x4],r6
80005176:	c1 49       	rjmp	8000539e <_realloc_r+0x2c6>
80005178:	0c 33       	cp.w	r3,r6
8000517a:	c0 95       	brlt	8000518c <_realloc_r+0xb4>
8000517c:	72 28       	ld.w	r8,r9[0x8]
8000517e:	02 97       	mov	r7,r1
80005180:	72 39       	ld.w	r9,r9[0xc]
80005182:	93 28       	st.w	r9[0x8],r8
80005184:	91 39       	st.w	r8[0xc],r9
80005186:	ce 58       	rjmp	80005350 <_realloc_r+0x278>
80005188:	30 0a       	mov	r10,0
8000518a:	14 99       	mov	r9,r10
8000518c:	ed bc 00 00 	bld	r12,0x0
80005190:	e0 80 00 9e 	breq	800052cc <_realloc_r+0x1f4>
80005194:	62 07       	ld.w	r7,r1[0x0]
80005196:	e2 07 01 07 	sub	r7,r1,r7
8000519a:	6e 1c       	ld.w	r12,r7[0x4]
8000519c:	e0 1c ff fc 	andl	r12,0xfffc
800051a0:	58 09       	cp.w	r9,0
800051a2:	c5 f0       	breq	80005260 <_realloc_r+0x188>
800051a4:	f8 00 00 03 	add	r3,r12,r0
800051a8:	0a 39       	cp.w	r9,r5
800051aa:	c4 81       	brne	8000523a <_realloc_r+0x162>
800051ac:	14 03       	add	r3,r10
800051ae:	ec c9 ff f0 	sub	r9,r6,-16
800051b2:	12 33       	cp.w	r3,r9
800051b4:	c5 65       	brlt	80005260 <_realloc_r+0x188>
800051b6:	6e 3a       	ld.w	r10,r7[0xc]
800051b8:	6e 29       	ld.w	r9,r7[0x8]
800051ba:	95 29       	st.w	r10[0x8],r9
800051bc:	93 3a       	st.w	r9[0xc],r10
800051be:	ee c5 ff f8 	sub	r5,r7,-8
800051c2:	e0 ca 00 04 	sub	r10,r0,4
800051c6:	e0 4a 00 24 	cp.w	r10,36
800051ca:	e0 8b 00 25 	brhi	80005214 <_realloc_r+0x13c>
800051ce:	0a 99       	mov	r9,r5
800051d0:	59 3a       	cp.w	r10,19
800051d2:	e0 88 00 1a 	brls	80005206 <_realloc_r+0x12e>
800051d6:	09 09       	ld.w	r9,r4++
800051d8:	8b 09       	st.w	r5[0x0],r9
800051da:	09 09       	ld.w	r9,r4++
800051dc:	8f 39       	st.w	r7[0xc],r9
800051de:	ee c9 ff f0 	sub	r9,r7,-16
800051e2:	59 ba       	cp.w	r10,27
800051e4:	e0 88 00 11 	brls	80005206 <_realloc_r+0x12e>
800051e8:	09 0b       	ld.w	r11,r4++
800051ea:	93 0b       	st.w	r9[0x0],r11
800051ec:	09 09       	ld.w	r9,r4++
800051ee:	8f 59       	st.w	r7[0x14],r9
800051f0:	ee c9 ff e8 	sub	r9,r7,-24
800051f4:	e0 4a 00 24 	cp.w	r10,36
800051f8:	c0 71       	brne	80005206 <_realloc_r+0x12e>
800051fa:	09 0a       	ld.w	r10,r4++
800051fc:	93 0a       	st.w	r9[0x0],r10
800051fe:	ee c9 ff e0 	sub	r9,r7,-32
80005202:	09 0a       	ld.w	r10,r4++
80005204:	8f 7a       	st.w	r7[0x1c],r10
80005206:	09 0a       	ld.w	r10,r4++
80005208:	12 aa       	st.w	r9++,r10
8000520a:	68 0a       	ld.w	r10,r4[0x0]
8000520c:	93 0a       	st.w	r9[0x0],r10
8000520e:	68 1a       	ld.w	r10,r4[0x4]
80005210:	93 1a       	st.w	r9[0x4],r10
80005212:	c0 78       	rjmp	80005220 <_realloc_r+0x148>
80005214:	50 08       	stdsp	sp[0x0],r8
80005216:	08 9b       	mov	r11,r4
80005218:	0a 9c       	mov	r12,r5
8000521a:	f0 1f 00 11 	mcall	8000525c <_realloc_r+0x184>
8000521e:	40 08       	lddsp	r8,sp[0x0]
80005220:	ee 06 00 09 	add	r9,r7,r6
80005224:	0c 13       	sub	r3,r6
80005226:	a1 a3       	sbr	r3,0x0
80005228:	93 13       	st.w	r9[0x4],r3
8000522a:	91 29       	st.w	r8[0x8],r9
8000522c:	04 9c       	mov	r12,r2
8000522e:	6e 18       	ld.w	r8,r7[0x4]
80005230:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005234:	10 46       	or	r6,r8
80005236:	8f 16       	st.w	r7[0x4],r6
80005238:	cb 38       	rjmp	8000539e <_realloc_r+0x2c6>
8000523a:	14 03       	add	r3,r10
8000523c:	0c 33       	cp.w	r3,r6
8000523e:	c1 15       	brlt	80005260 <_realloc_r+0x188>
80005240:	72 28       	ld.w	r8,r9[0x8]
80005242:	72 39       	ld.w	r9,r9[0xc]
80005244:	93 28       	st.w	r9[0x8],r8
80005246:	91 39       	st.w	r8[0xc],r9
80005248:	6e 28       	ld.w	r8,r7[0x8]
8000524a:	6e 39       	ld.w	r9,r7[0xc]
8000524c:	c1 08       	rjmp	8000526c <_realloc_r+0x194>
8000524e:	00 00       	add	r0,r0
80005250:	80 00       	ld.sh	r0,r0[0x0]
80005252:	4a f8       	lddpc	r8,8000530c <_realloc_r+0x234>
80005254:	80 00       	ld.sh	r0,r0[0x0]
80005256:	42 d8       	lddsp	r8,sp[0xb4]
80005258:	00 00       	add	r0,r0
8000525a:	01 f0       	ld.ub	r0,r0[0x7]
8000525c:	80 00       	ld.sh	r0,r0[0x0]
8000525e:	92 1e       	ld.sh	lr,r9[0x2]
80005260:	f8 00 00 03 	add	r3,r12,r0
80005264:	0c 33       	cp.w	r3,r6
80005266:	c3 35       	brlt	800052cc <_realloc_r+0x1f4>
80005268:	6e 39       	ld.w	r9,r7[0xc]
8000526a:	6e 28       	ld.w	r8,r7[0x8]
8000526c:	93 28       	st.w	r9[0x8],r8
8000526e:	91 39       	st.w	r8[0xc],r9
80005270:	e0 ca 00 04 	sub	r10,r0,4
80005274:	ee cc ff f8 	sub	r12,r7,-8
80005278:	e0 4a 00 24 	cp.w	r10,36
8000527c:	e0 8b 00 24 	brhi	800052c4 <_realloc_r+0x1ec>
80005280:	59 3a       	cp.w	r10,19
80005282:	e0 88 00 1a 	brls	800052b6 <_realloc_r+0x1de>
80005286:	09 08       	ld.w	r8,r4++
80005288:	99 08       	st.w	r12[0x0],r8
8000528a:	09 08       	ld.w	r8,r4++
8000528c:	8f 38       	st.w	r7[0xc],r8
8000528e:	ee cc ff f0 	sub	r12,r7,-16
80005292:	59 ba       	cp.w	r10,27
80005294:	e0 88 00 11 	brls	800052b6 <_realloc_r+0x1de>
80005298:	09 08       	ld.w	r8,r4++
8000529a:	99 08       	st.w	r12[0x0],r8
8000529c:	09 08       	ld.w	r8,r4++
8000529e:	8f 58       	st.w	r7[0x14],r8
800052a0:	ee cc ff e8 	sub	r12,r7,-24
800052a4:	e0 4a 00 24 	cp.w	r10,36
800052a8:	c0 71       	brne	800052b6 <_realloc_r+0x1de>
800052aa:	09 08       	ld.w	r8,r4++
800052ac:	99 08       	st.w	r12[0x0],r8
800052ae:	ee cc ff e0 	sub	r12,r7,-32
800052b2:	09 08       	ld.w	r8,r4++
800052b4:	8f 78       	st.w	r7[0x1c],r8
800052b6:	09 08       	ld.w	r8,r4++
800052b8:	18 a8       	st.w	r12++,r8
800052ba:	68 08       	ld.w	r8,r4[0x0]
800052bc:	99 08       	st.w	r12[0x0],r8
800052be:	68 18       	ld.w	r8,r4[0x4]
800052c0:	99 18       	st.w	r12[0x4],r8
800052c2:	c4 78       	rjmp	80005350 <_realloc_r+0x278>
800052c4:	08 9b       	mov	r11,r4
800052c6:	f0 1f 00 39 	mcall	800053a8 <_realloc_r+0x2d0>
800052ca:	c4 38       	rjmp	80005350 <_realloc_r+0x278>
800052cc:	04 9c       	mov	r12,r2
800052ce:	f0 1f 00 38 	mcall	800053ac <_realloc_r+0x2d4>
800052d2:	18 95       	mov	r5,r12
800052d4:	c3 a0       	breq	80005348 <_realloc_r+0x270>
800052d6:	62 18       	ld.w	r8,r1[0x4]
800052d8:	f8 c9 00 08 	sub	r9,r12,8
800052dc:	a1 c8       	cbr	r8,0x0
800052de:	e2 08 00 08 	add	r8,r1,r8
800052e2:	10 39       	cp.w	r9,r8
800052e4:	c0 71       	brne	800052f2 <_realloc_r+0x21a>
800052e6:	72 13       	ld.w	r3,r9[0x4]
800052e8:	02 97       	mov	r7,r1
800052ea:	e0 13 ff fc 	andl	r3,0xfffc
800052ee:	00 03       	add	r3,r0
800052f0:	c3 08       	rjmp	80005350 <_realloc_r+0x278>
800052f2:	e0 ca 00 04 	sub	r10,r0,4
800052f6:	e0 4a 00 24 	cp.w	r10,36
800052fa:	e0 8b 00 20 	brhi	8000533a <_realloc_r+0x262>
800052fe:	08 99       	mov	r9,r4
80005300:	18 98       	mov	r8,r12
80005302:	59 3a       	cp.w	r10,19
80005304:	e0 88 00 14 	brls	8000532c <_realloc_r+0x254>
80005308:	13 0b       	ld.w	r11,r9++
8000530a:	10 ab       	st.w	r8++,r11
8000530c:	13 0b       	ld.w	r11,r9++
8000530e:	10 ab       	st.w	r8++,r11
80005310:	59 ba       	cp.w	r10,27
80005312:	e0 88 00 0d 	brls	8000532c <_realloc_r+0x254>
80005316:	13 0b       	ld.w	r11,r9++
80005318:	10 ab       	st.w	r8++,r11
8000531a:	13 0b       	ld.w	r11,r9++
8000531c:	10 ab       	st.w	r8++,r11
8000531e:	e0 4a 00 24 	cp.w	r10,36
80005322:	c0 51       	brne	8000532c <_realloc_r+0x254>
80005324:	13 0a       	ld.w	r10,r9++
80005326:	10 aa       	st.w	r8++,r10
80005328:	13 0a       	ld.w	r10,r9++
8000532a:	10 aa       	st.w	r8++,r10
8000532c:	13 0a       	ld.w	r10,r9++
8000532e:	10 aa       	st.w	r8++,r10
80005330:	72 0a       	ld.w	r10,r9[0x0]
80005332:	91 0a       	st.w	r8[0x0],r10
80005334:	72 19       	ld.w	r9,r9[0x4]
80005336:	91 19       	st.w	r8[0x4],r9
80005338:	c0 48       	rjmp	80005340 <_realloc_r+0x268>
8000533a:	08 9b       	mov	r11,r4
8000533c:	f0 1f 00 1b 	mcall	800053a8 <_realloc_r+0x2d0>
80005340:	08 9b       	mov	r11,r4
80005342:	04 9c       	mov	r12,r2
80005344:	f0 1f 00 1b 	mcall	800053b0 <_realloc_r+0x2d8>
80005348:	04 9c       	mov	r12,r2
8000534a:	c2 a8       	rjmp	8000539e <_realloc_r+0x2c6>
8000534c:	00 93       	mov	r3,r0
8000534e:	02 97       	mov	r7,r1
80005350:	e6 06 01 09 	sub	r9,r3,r6
80005354:	6e 18       	ld.w	r8,r7[0x4]
80005356:	58 f9       	cp.w	r9,15
80005358:	e0 88 00 16 	brls	80005384 <_realloc_r+0x2ac>
8000535c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005360:	ed e8 10 08 	or	r8,r6,r8
80005364:	8f 18       	st.w	r7[0x4],r8
80005366:	12 98       	mov	r8,r9
80005368:	a1 a8       	sbr	r8,0x0
8000536a:	ee 06 00 0b 	add	r11,r7,r6
8000536e:	f6 09 00 09 	add	r9,r11,r9
80005372:	97 18       	st.w	r11[0x4],r8
80005374:	72 18       	ld.w	r8,r9[0x4]
80005376:	a1 a8       	sbr	r8,0x0
80005378:	2f 8b       	sub	r11,-8
8000537a:	93 18       	st.w	r9[0x4],r8
8000537c:	04 9c       	mov	r12,r2
8000537e:	f0 1f 00 0d 	mcall	800053b0 <_realloc_r+0x2d8>
80005382:	c0 b8       	rjmp	80005398 <_realloc_r+0x2c0>
80005384:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005388:	e7 e8 10 08 	or	r8,r3,r8
8000538c:	8f 18       	st.w	r7[0x4],r8
8000538e:	ee 03 00 03 	add	r3,r7,r3
80005392:	66 18       	ld.w	r8,r3[0x4]
80005394:	a1 a8       	sbr	r8,0x0
80005396:	87 18       	st.w	r3[0x4],r8
80005398:	04 9c       	mov	r12,r2
8000539a:	ee c5 ff f8 	sub	r5,r7,-8
8000539e:	f0 1f 00 06 	mcall	800053b4 <_realloc_r+0x2dc>
800053a2:	0a 9c       	mov	r12,r5
800053a4:	2f fd       	sub	sp,-4
800053a6:	d8 32       	popm	r0-r7,pc
800053a8:	80 00       	ld.sh	r0,r0[0x0]
800053aa:	92 1e       	ld.sh	lr,r9[0x2]
800053ac:	80 00       	ld.sh	r0,r0[0x0]
800053ae:	4a f8       	lddpc	r8,80005468 <setvbuf+0x6c>
800053b0:	80 00       	ld.sh	r0,r0[0x0]
800053b2:	8c 7c       	ld.sh	r12,r6[0xe]
800053b4:	80 00       	ld.sh	r0,r0[0x0]
800053b6:	42 e4       	lddsp	r4,sp[0xb8]

800053b8 <_sbrk_r>:
800053b8:	d4 21       	pushm	r4-r7,lr
800053ba:	30 08       	mov	r8,0
800053bc:	18 97       	mov	r7,r12
800053be:	48 76       	lddpc	r6,800053d8 <_sbrk_r+0x20>
800053c0:	16 9c       	mov	r12,r11
800053c2:	8d 08       	st.w	r6[0x0],r8
800053c4:	f0 1f 00 06 	mcall	800053dc <_sbrk_r+0x24>
800053c8:	5b fc       	cp.w	r12,-1
800053ca:	c0 51       	brne	800053d4 <_sbrk_r+0x1c>
800053cc:	6c 08       	ld.w	r8,r6[0x0]
800053ce:	58 08       	cp.w	r8,0
800053d0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800053d4:	d8 22       	popm	r4-r7,pc
800053d6:	00 00       	add	r0,r0
800053d8:	00 00       	add	r0,r0
800053da:	0a 2c       	rsub	r12,r5
800053dc:	80 00       	ld.sh	r0,r0[0x0]
800053de:	56 00       	stdsp	sp[0x180],r0

800053e0 <setbuf>:
800053e0:	d4 01       	pushm	lr
800053e2:	e0 69 04 00 	mov	r9,1024
800053e6:	58 0b       	cp.w	r11,0
800053e8:	f9 ba 00 02 	moveq	r10,2
800053ec:	f9 ba 01 00 	movne	r10,0
800053f0:	f0 1f 00 02 	mcall	800053f8 <setbuf+0x18>
800053f4:	d8 02       	popm	pc
800053f6:	00 00       	add	r0,r0
800053f8:	80 00       	ld.sh	r0,r0[0x0]
800053fa:	53 fc       	stdsp	sp[0xfc],r12

800053fc <setvbuf>:
800053fc:	d4 31       	pushm	r0-r7,lr
800053fe:	4b f8       	lddpc	r8,800054f8 <setvbuf+0xfc>
80005400:	18 97       	mov	r7,r12
80005402:	16 96       	mov	r6,r11
80005404:	14 95       	mov	r5,r10
80005406:	12 94       	mov	r4,r9
80005408:	70 0c       	ld.w	r12,r8[0x0]
8000540a:	58 0c       	cp.w	r12,0
8000540c:	c0 60       	breq	80005418 <setvbuf+0x1c>
8000540e:	78 68       	ld.w	r8,r12[0x18]
80005410:	58 08       	cp.w	r8,0
80005412:	c0 31       	brne	80005418 <setvbuf+0x1c>
80005414:	f0 1f 00 3a 	mcall	800054fc <setvbuf+0x100>
80005418:	4b a8       	lddpc	r8,80005500 <setvbuf+0x104>
8000541a:	10 37       	cp.w	r7,r8
8000541c:	c0 51       	brne	80005426 <setvbuf+0x2a>
8000541e:	4b 78       	lddpc	r8,800054f8 <setvbuf+0xfc>
80005420:	70 08       	ld.w	r8,r8[0x0]
80005422:	70 07       	ld.w	r7,r8[0x0]
80005424:	c0 e8       	rjmp	80005440 <setvbuf+0x44>
80005426:	4b 88       	lddpc	r8,80005504 <setvbuf+0x108>
80005428:	10 37       	cp.w	r7,r8
8000542a:	c0 51       	brne	80005434 <setvbuf+0x38>
8000542c:	4b 38       	lddpc	r8,800054f8 <setvbuf+0xfc>
8000542e:	70 08       	ld.w	r8,r8[0x0]
80005430:	70 17       	ld.w	r7,r8[0x4]
80005432:	c0 78       	rjmp	80005440 <setvbuf+0x44>
80005434:	4b 58       	lddpc	r8,80005508 <setvbuf+0x10c>
80005436:	10 37       	cp.w	r7,r8
80005438:	c0 41       	brne	80005440 <setvbuf+0x44>
8000543a:	4b 08       	lddpc	r8,800054f8 <setvbuf+0xfc>
8000543c:	70 08       	ld.w	r8,r8[0x0]
8000543e:	70 27       	ld.w	r7,r8[0x8]
80005440:	58 25       	cp.w	r5,2
80005442:	5f b8       	srhi	r8
80005444:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
80005448:	c0 20       	breq	8000544c <setvbuf+0x50>
8000544a:	dc 3a       	popm	r0-r7,pc,r12=-1
8000544c:	4a b3       	lddpc	r3,800054f8 <setvbuf+0xfc>
8000544e:	0e 9b       	mov	r11,r7
80005450:	66 0c       	ld.w	r12,r3[0x0]
80005452:	f0 1f 00 2f 	mcall	8000550c <setvbuf+0x110>
80005456:	30 08       	mov	r8,0
80005458:	8f 68       	st.w	r7[0x18],r8
8000545a:	8f 18       	st.w	r7[0x4],r8
8000545c:	8e 68       	ld.sh	r8,r7[0xc]
8000545e:	ed b8 00 07 	bld	r8,0x7
80005462:	c0 51       	brne	8000546c <setvbuf+0x70>
80005464:	66 0c       	ld.w	r12,r3[0x0]
80005466:	6e 4b       	ld.w	r11,r7[0x10]
80005468:	f0 1f 00 2a 	mcall	80005510 <setvbuf+0x114>
8000546c:	8e 68       	ld.sh	r8,r7[0xc]
8000546e:	e0 18 ff 7c 	andl	r8,0xff7c
80005472:	ae 68       	st.h	r7[0xc],r8
80005474:	58 25       	cp.w	r5,2
80005476:	c0 31       	brne	8000547c <setvbuf+0x80>
80005478:	30 0c       	mov	r12,0
8000547a:	c1 38       	rjmp	800054a0 <setvbuf+0xa4>
8000547c:	58 06       	cp.w	r6,0
8000547e:	c2 11       	brne	800054c0 <setvbuf+0xc4>
80005480:	e0 63 04 00 	mov	r3,1024
80005484:	58 04       	cp.w	r4,0
80005486:	e6 04 17 00 	moveq	r4,r3
8000548a:	08 9c       	mov	r12,r4
8000548c:	f0 1f 00 22 	mcall	80005514 <setvbuf+0x118>
80005490:	18 96       	mov	r6,r12
80005492:	c1 41       	brne	800054ba <setvbuf+0xbe>
80005494:	06 9c       	mov	r12,r3
80005496:	f0 1f 00 20 	mcall	80005514 <setvbuf+0x118>
8000549a:	18 96       	mov	r6,r12
8000549c:	c0 e1       	brne	800054b8 <setvbuf+0xbc>
8000549e:	3f fc       	mov	r12,-1
800054a0:	8e 68       	ld.sh	r8,r7[0xc]
800054a2:	a1 b8       	sbr	r8,0x1
800054a4:	ae 68       	st.h	r7[0xc],r8
800054a6:	ee c8 ff b9 	sub	r8,r7,-71
800054aa:	8f 48       	st.w	r7[0x10],r8
800054ac:	8f 08       	st.w	r7[0x0],r8
800054ae:	30 08       	mov	r8,0
800054b0:	8f 28       	st.w	r7[0x8],r8
800054b2:	30 18       	mov	r8,1
800054b4:	8f 58       	st.w	r7[0x14],r8
800054b6:	d8 32       	popm	r0-r7,pc
800054b8:	06 94       	mov	r4,r3
800054ba:	8e 68       	ld.sh	r8,r7[0xc]
800054bc:	a7 b8       	sbr	r8,0x7
800054be:	ae 68       	st.h	r7[0xc],r8
800054c0:	58 15       	cp.w	r5,1
800054c2:	c0 71       	brne	800054d0 <setvbuf+0xd4>
800054c4:	8e 68       	ld.sh	r8,r7[0xc]
800054c6:	a1 a8       	sbr	r8,0x0
800054c8:	ae 68       	st.h	r7[0xc],r8
800054ca:	e8 08 11 00 	rsub	r8,r4,0
800054ce:	8f 68       	st.w	r7[0x18],r8
800054d0:	48 a8       	lddpc	r8,800054f8 <setvbuf+0xfc>
800054d2:	49 29       	lddpc	r9,80005518 <setvbuf+0x11c>
800054d4:	70 08       	ld.w	r8,r8[0x0]
800054d6:	8f 46       	st.w	r7[0x10],r6
800054d8:	91 a9       	st.w	r8[0x28],r9
800054da:	8f 06       	st.w	r7[0x0],r6
800054dc:	8f 54       	st.w	r7[0x14],r4
800054de:	8e 68       	ld.sh	r8,r7[0xc]
800054e0:	10 9c       	mov	r12,r8
800054e2:	e2 1c 00 08 	andl	r12,0x8,COH
800054e6:	c0 70       	breq	800054f4 <setvbuf+0xf8>
800054e8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800054ec:	30 0c       	mov	r12,0
800054ee:	f9 b4 01 00 	movne	r4,0
800054f2:	8f 24       	st.w	r7[0x8],r4
800054f4:	d8 32       	popm	r0-r7,pc
800054f6:	00 00       	add	r0,r0
800054f8:	00 00       	add	r0,r0
800054fa:	01 ec       	ld.ub	r12,r0[0x6]
800054fc:	80 00       	ld.sh	r0,r0[0x0]
800054fe:	8b 24       	st.w	r5[0x8],r4
80005500:	80 00       	ld.sh	r0,r0[0x0]
80005502:	b1 08       	ld.d	r8,r8
80005504:	80 00       	ld.sh	r0,r0[0x0]
80005506:	b1 28       	st.d	r8++,r8
80005508:	80 00       	ld.sh	r0,r0[0x0]
8000550a:	b1 48       	asr	r8,0x10
8000550c:	80 00       	ld.sh	r0,r0[0x0]
8000550e:	89 48       	st.w	r4[0x10],r8
80005510:	80 00       	ld.sh	r0,r0[0x0]
80005512:	8c 7c       	ld.sh	r12,r6[0xe]
80005514:	80 00       	ld.sh	r0,r0[0x0]
80005516:	4a e0       	lddpc	r0,800055cc <_fstat+0x1c>
80005518:	80 00       	ld.sh	r0,r0[0x0]
8000551a:	8a 64       	ld.sh	r4,r5[0xc]

8000551c <strncpy>:
8000551c:	30 08       	mov	r8,0
8000551e:	10 3a       	cp.w	r10,r8
80005520:	5e 0c       	reteq	r12
80005522:	f6 08 07 09 	ld.ub	r9,r11[r8]
80005526:	f8 08 0b 09 	st.b	r12[r8],r9
8000552a:	2f f8       	sub	r8,-1
8000552c:	58 09       	cp.w	r9,0
8000552e:	cf 81       	brne	8000551e <strncpy+0x2>
80005530:	10 3a       	cp.w	r10,r8
80005532:	5e 0c       	reteq	r12
80005534:	f8 08 0b 09 	st.b	r12[r8],r9
80005538:	2f f8       	sub	r8,-1
8000553a:	cf bb       	rjmp	80005530 <strncpy+0x14>

8000553c <_init_argv>:
8000553c:	30 e8       	mov	r8,14
8000553e:	d6 73       	breakpoint
80005540:	3f fc       	mov	r12,-1
80005542:	35 8b       	mov	r11,88
80005544:	5e fc       	retal	r12

80005546 <_exit>:
80005546:	30 d8       	mov	r8,13
80005548:	d6 73       	breakpoint
8000554a:	3f fc       	mov	r12,-1
8000554c:	35 8b       	mov	r11,88
8000554e:	c0 08       	rjmp	8000554e <_exit+0x8>

80005550 <_close>:
80005550:	30 28       	mov	r8,2
80005552:	d6 73       	breakpoint
80005554:	3f fc       	mov	r12,-1
80005556:	35 8b       	mov	r11,88
80005558:	58 0c       	cp.w	r12,0
8000555a:	5e 4c       	retge	r12
8000555c:	48 2a       	lddpc	r10,80005564 <_close+0x14>
8000555e:	95 0b       	st.w	r10[0x0],r11
80005560:	5e fc       	retal	r12
80005562:	00 00       	add	r0,r0
80005564:	00 00       	add	r0,r0
80005566:	0a 2c       	rsub	r12,r5

80005568 <_lseek>:
80005568:	30 58       	mov	r8,5
8000556a:	d6 73       	breakpoint
8000556c:	3f fc       	mov	r12,-1
8000556e:	35 8b       	mov	r11,88
80005570:	58 0c       	cp.w	r12,0
80005572:	5e 4c       	retge	r12
80005574:	48 2a       	lddpc	r10,8000557c <_lseek+0x14>
80005576:	95 0b       	st.w	r10[0x0],r11
80005578:	5e fc       	retal	r12
8000557a:	00 00       	add	r0,r0
8000557c:	00 00       	add	r0,r0
8000557e:	0a 2c       	rsub	r12,r5

80005580 <isatty>:
80005580:	30 b8       	mov	r8,11
80005582:	d6 73       	breakpoint
80005584:	3f fc       	mov	r12,-1
80005586:	35 8b       	mov	r11,88
80005588:	58 0c       	cp.w	r12,0
8000558a:	5e 4c       	retge	r12
8000558c:	48 2a       	lddpc	r10,80005594 <isatty+0x14>
8000558e:	95 0b       	st.w	r10[0x0],r11
80005590:	5e fc       	retal	r12
80005592:	00 00       	add	r0,r0
80005594:	00 00       	add	r0,r0
80005596:	0a 2c       	rsub	r12,r5

80005598 <_fstat_host>:
80005598:	30 98       	mov	r8,9
8000559a:	d6 73       	breakpoint
8000559c:	3f fc       	mov	r12,-1
8000559e:	35 8b       	mov	r11,88
800055a0:	58 0c       	cp.w	r12,0
800055a2:	5e 4c       	retge	r12
800055a4:	48 2a       	lddpc	r10,800055ac <_fstat_host+0x14>
800055a6:	95 0b       	st.w	r10[0x0],r11
800055a8:	5e fc       	retal	r12
800055aa:	00 00       	add	r0,r0
800055ac:	00 00       	add	r0,r0
800055ae:	0a 2c       	rsub	r12,r5

800055b0 <_fstat>:
800055b0:	d4 21       	pushm	r4-r7,lr
800055b2:	21 0d       	sub	sp,64
800055b4:	16 97       	mov	r7,r11
800055b6:	1a 9b       	mov	r11,sp
800055b8:	f0 1f 00 11 	mcall	800055fc <_fstat+0x4c>
800055bc:	c0 34       	brge	800055c2 <_fstat+0x12>
800055be:	3f fc       	mov	r12,-1
800055c0:	c1 c8       	rjmp	800055f8 <_fstat+0x48>
800055c2:	40 08       	lddsp	r8,sp[0x0]
800055c4:	ae 08       	st.h	r7[0x0],r8
800055c6:	40 18       	lddsp	r8,sp[0x4]
800055c8:	ae 18       	st.h	r7[0x2],r8
800055ca:	40 28       	lddsp	r8,sp[0x8]
800055cc:	8f 18       	st.w	r7[0x4],r8
800055ce:	40 38       	lddsp	r8,sp[0xc]
800055d0:	ae 48       	st.h	r7[0x8],r8
800055d2:	40 48       	lddsp	r8,sp[0x10]
800055d4:	ae 58       	st.h	r7[0xa],r8
800055d6:	40 58       	lddsp	r8,sp[0x14]
800055d8:	ae 68       	st.h	r7[0xc],r8
800055da:	40 68       	lddsp	r8,sp[0x18]
800055dc:	ae 78       	st.h	r7[0xe],r8
800055de:	40 88       	lddsp	r8,sp[0x20]
800055e0:	8f 48       	st.w	r7[0x10],r8
800055e2:	40 a8       	lddsp	r8,sp[0x28]
800055e4:	8f b8       	st.w	r7[0x2c],r8
800055e6:	40 c8       	lddsp	r8,sp[0x30]
800055e8:	8f c8       	st.w	r7[0x30],r8
800055ea:	40 d8       	lddsp	r8,sp[0x34]
800055ec:	8f 58       	st.w	r7[0x14],r8
800055ee:	40 e8       	lddsp	r8,sp[0x38]
800055f0:	30 0c       	mov	r12,0
800055f2:	8f 78       	st.w	r7[0x1c],r8
800055f4:	40 f8       	lddsp	r8,sp[0x3c]
800055f6:	8f 98       	st.w	r7[0x24],r8
800055f8:	2f 0d       	sub	sp,-64
800055fa:	d8 22       	popm	r4-r7,pc
800055fc:	80 00       	ld.sh	r0,r0[0x0]
800055fe:	55 98       	stdsp	sp[0x164],r8

80005600 <_sbrk>:
80005600:	d4 01       	pushm	lr
80005602:	48 c8       	lddpc	r8,80005630 <_sbrk+0x30>
80005604:	70 09       	ld.w	r9,r8[0x0]
80005606:	58 09       	cp.w	r9,0
80005608:	c0 31       	brne	8000560e <_sbrk+0xe>
8000560a:	48 b9       	lddpc	r9,80005634 <_sbrk+0x34>
8000560c:	91 09       	st.w	r8[0x0],r9
8000560e:	48 99       	lddpc	r9,80005630 <_sbrk+0x30>
80005610:	48 aa       	lddpc	r10,80005638 <_sbrk+0x38>
80005612:	72 08       	ld.w	r8,r9[0x0]
80005614:	f0 0c 00 0c 	add	r12,r8,r12
80005618:	14 3c       	cp.w	r12,r10
8000561a:	e0 8b 00 04 	brhi	80005622 <_sbrk+0x22>
8000561e:	93 0c       	st.w	r9[0x0],r12
80005620:	c0 68       	rjmp	8000562c <_sbrk+0x2c>
80005622:	f0 1f 00 07 	mcall	8000563c <_sbrk+0x3c>
80005626:	30 c8       	mov	r8,12
80005628:	99 08       	st.w	r12[0x0],r8
8000562a:	3f f8       	mov	r8,-1
8000562c:	10 9c       	mov	r12,r8
8000562e:	d8 02       	popm	pc
80005630:	00 00       	add	r0,r0
80005632:	09 fc       	ld.ub	r12,r4[0x7]
80005634:	00 00       	add	r0,r0
80005636:	0a 30       	cp.w	r0,r5
80005638:	00 00       	add	r0,r0
8000563a:	f0 00       	*unknown*
8000563c:	80 00       	ld.sh	r0,r0[0x0]
8000563e:	89 3c       	st.w	r4[0xc],r12

80005640 <get_arg>:
80005640:	d4 31       	pushm	r0-r7,lr
80005642:	20 8d       	sub	sp,32
80005644:	fa c4 ff bc 	sub	r4,sp,-68
80005648:	50 4b       	stdsp	sp[0x10],r11
8000564a:	68 2e       	ld.w	lr,r4[0x8]
8000564c:	50 58       	stdsp	sp[0x14],r8
8000564e:	12 96       	mov	r6,r9
80005650:	7c 0b       	ld.w	r11,lr[0x0]
80005652:	70 05       	ld.w	r5,r8[0x0]
80005654:	50 6e       	stdsp	sp[0x18],lr
80005656:	58 0b       	cp.w	r11,0
80005658:	f4 0b 17 00 	moveq	r11,r10
8000565c:	68 03       	ld.w	r3,r4[0x0]
8000565e:	68 11       	ld.w	r1,r4[0x4]
80005660:	40 49       	lddsp	r9,sp[0x10]
80005662:	30 08       	mov	r8,0
80005664:	c2 e9       	rjmp	800058c0 <get_arg+0x280>
80005666:	2f fb       	sub	r11,-1
80005668:	32 5c       	mov	r12,37
8000566a:	17 8a       	ld.ub	r10,r11[0x0]
8000566c:	f8 0a 18 00 	cp.b	r10,r12
80005670:	5f 1e       	srne	lr
80005672:	f0 0a 18 00 	cp.b	r10,r8
80005676:	5f 1c       	srne	r12
80005678:	fd ec 00 0c 	and	r12,lr,r12
8000567c:	f0 0c 18 00 	cp.b	r12,r8
80005680:	cf 31       	brne	80005666 <get_arg+0x26>
80005682:	58 0a       	cp.w	r10,0
80005684:	e0 80 01 2b 	breq	800058da <get_arg+0x29a>
80005688:	30 0c       	mov	r12,0
8000568a:	3f fa       	mov	r10,-1
8000568c:	18 90       	mov	r0,r12
8000568e:	50 3a       	stdsp	sp[0xc],r10
80005690:	18 94       	mov	r4,r12
80005692:	18 92       	mov	r2,r12
80005694:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80005698:	16 97       	mov	r7,r11
8000569a:	50 7c       	stdsp	sp[0x1c],r12
8000569c:	4c ec       	lddpc	r12,800057d4 <get_arg+0x194>
8000569e:	0f 3a       	ld.ub	r10,r7++
800056a0:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800056a4:	40 7c       	lddsp	r12,sp[0x1c]
800056a6:	1c 0c       	add	r12,lr
800056a8:	4c ce       	lddpc	lr,800057d8 <get_arg+0x198>
800056aa:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800056ae:	20 1e       	sub	lr,1
800056b0:	50 0e       	stdsp	sp[0x0],lr
800056b2:	4c be       	lddpc	lr,800057dc <get_arg+0x19c>
800056b4:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800056b8:	50 7c       	stdsp	sp[0x1c],r12
800056ba:	40 0c       	lddsp	r12,sp[0x0]
800056bc:	58 7c       	cp.w	r12,7
800056be:	e0 8b 00 fa 	brhi	800058b2 <get_arg+0x272>
800056c2:	4c 8e       	lddpc	lr,800057e0 <get_arg+0x1a0>
800056c4:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800056c8:	36 8b       	mov	r11,104
800056ca:	f6 0a 18 00 	cp.b	r10,r11
800056ce:	e0 80 00 f2 	breq	800058b2 <get_arg+0x272>
800056d2:	37 1b       	mov	r11,113
800056d4:	f6 0a 18 00 	cp.b	r10,r11
800056d8:	c0 70       	breq	800056e6 <get_arg+0xa6>
800056da:	34 cb       	mov	r11,76
800056dc:	f6 0a 18 00 	cp.b	r10,r11
800056e0:	c0 51       	brne	800056ea <get_arg+0xaa>
800056e2:	a3 b4       	sbr	r4,0x3
800056e4:	ce 78       	rjmp	800058b2 <get_arg+0x272>
800056e6:	a5 b4       	sbr	r4,0x5
800056e8:	ce 58       	rjmp	800058b2 <get_arg+0x272>
800056ea:	08 9a       	mov	r10,r4
800056ec:	0e 9b       	mov	r11,r7
800056ee:	a5 aa       	sbr	r10,0x4
800056f0:	17 3c       	ld.ub	r12,r11++
800056f2:	a5 b4       	sbr	r4,0x5
800056f4:	36 ce       	mov	lr,108
800056f6:	fc 0c 18 00 	cp.b	r12,lr
800056fa:	e0 80 00 dd 	breq	800058b4 <get_arg+0x274>
800056fe:	14 94       	mov	r4,r10
80005700:	cd 98       	rjmp	800058b2 <get_arg+0x272>
80005702:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80005706:	36 7c       	mov	r12,103
80005708:	f8 0a 18 00 	cp.b	r10,r12
8000570c:	e0 8b 00 27 	brhi	8000575a <get_arg+0x11a>
80005710:	36 5b       	mov	r11,101
80005712:	f6 0a 18 00 	cp.b	r10,r11
80005716:	c4 82       	brcc	800057a6 <get_arg+0x166>
80005718:	34 fb       	mov	r11,79
8000571a:	f6 0a 18 00 	cp.b	r10,r11
8000571e:	c4 80       	breq	800057ae <get_arg+0x16e>
80005720:	e0 8b 00 0c 	brhi	80005738 <get_arg+0xf8>
80005724:	34 5b       	mov	r11,69
80005726:	f6 0a 18 00 	cp.b	r10,r11
8000572a:	c3 e0       	breq	800057a6 <get_arg+0x166>
8000572c:	34 7b       	mov	r11,71
8000572e:	f6 0a 18 00 	cp.b	r10,r11
80005732:	c3 a0       	breq	800057a6 <get_arg+0x166>
80005734:	34 4b       	mov	r11,68
80005736:	c0 88       	rjmp	80005746 <get_arg+0x106>
80005738:	35 8b       	mov	r11,88
8000573a:	f6 0a 18 00 	cp.b	r10,r11
8000573e:	c2 c0       	breq	80005796 <get_arg+0x156>
80005740:	e0 8b 00 07 	brhi	8000574e <get_arg+0x10e>
80005744:	35 5b       	mov	r11,85
80005746:	f6 0a 18 00 	cp.b	r10,r11
8000574a:	c3 51       	brne	800057b4 <get_arg+0x174>
8000574c:	c3 18       	rjmp	800057ae <get_arg+0x16e>
8000574e:	36 3b       	mov	r11,99
80005750:	f6 0a 18 00 	cp.b	r10,r11
80005754:	c2 f0       	breq	800057b2 <get_arg+0x172>
80005756:	36 4b       	mov	r11,100
80005758:	c0 e8       	rjmp	80005774 <get_arg+0x134>
8000575a:	37 0b       	mov	r11,112
8000575c:	f6 0a 18 00 	cp.b	r10,r11
80005760:	c2 50       	breq	800057aa <get_arg+0x16a>
80005762:	e0 8b 00 0d 	brhi	8000577c <get_arg+0x13c>
80005766:	36 eb       	mov	r11,110
80005768:	f6 0a 18 00 	cp.b	r10,r11
8000576c:	c1 f0       	breq	800057aa <get_arg+0x16a>
8000576e:	e0 8b 00 14 	brhi	80005796 <get_arg+0x156>
80005772:	36 9b       	mov	r11,105
80005774:	f6 0a 18 00 	cp.b	r10,r11
80005778:	c1 e1       	brne	800057b4 <get_arg+0x174>
8000577a:	c0 e8       	rjmp	80005796 <get_arg+0x156>
8000577c:	37 5b       	mov	r11,117
8000577e:	f6 0a 18 00 	cp.b	r10,r11
80005782:	c0 a0       	breq	80005796 <get_arg+0x156>
80005784:	37 8b       	mov	r11,120
80005786:	f6 0a 18 00 	cp.b	r10,r11
8000578a:	c0 60       	breq	80005796 <get_arg+0x156>
8000578c:	37 3b       	mov	r11,115
8000578e:	f6 0a 18 00 	cp.b	r10,r11
80005792:	c1 11       	brne	800057b4 <get_arg+0x174>
80005794:	c0 b8       	rjmp	800057aa <get_arg+0x16a>
80005796:	ed b4 00 04 	bld	r4,0x4
8000579a:	c0 a0       	breq	800057ae <get_arg+0x16e>
8000579c:	ed b4 00 05 	bld	r4,0x5
800057a0:	c0 91       	brne	800057b2 <get_arg+0x172>
800057a2:	30 20       	mov	r0,2
800057a4:	c0 88       	rjmp	800057b4 <get_arg+0x174>
800057a6:	30 40       	mov	r0,4
800057a8:	c0 68       	rjmp	800057b4 <get_arg+0x174>
800057aa:	30 30       	mov	r0,3
800057ac:	c0 48       	rjmp	800057b4 <get_arg+0x174>
800057ae:	30 10       	mov	r0,1
800057b0:	c0 28       	rjmp	800057b4 <get_arg+0x174>
800057b2:	30 00       	mov	r0,0
800057b4:	40 3b       	lddsp	r11,sp[0xc]
800057b6:	5b fb       	cp.w	r11,-1
800057b8:	c0 40       	breq	800057c0 <get_arg+0x180>
800057ba:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800057be:	c7 a8       	rjmp	800058b2 <get_arg+0x272>
800057c0:	58 60       	cp.w	r0,6
800057c2:	e0 8b 00 78 	brhi	800058b2 <get_arg+0x272>
800057c6:	6c 0a       	ld.w	r10,r6[0x0]
800057c8:	ea cc ff ff 	sub	r12,r5,-1
800057cc:	48 6e       	lddpc	lr,800057e4 <get_arg+0x1a4>
800057ce:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800057d2:	00 00       	add	r0,r0
800057d4:	80 00       	ld.sh	r0,r0[0x0]
800057d6:	af f8       	*unknown*
800057d8:	80 00       	ld.sh	r0,r0[0x0]
800057da:	af 30       	mul	r0,r7
800057dc:	80 00       	ld.sh	r0,r0[0x0]
800057de:	ae c4       	st.b	r7[0x4],r4
800057e0:	80 00       	ld.sh	r0,r0[0x0]
800057e2:	ad 24       	st.d	r6++,r4
800057e4:	80 00       	ld.sh	r0,r0[0x0]
800057e6:	ad 44       	asr	r4,0xc
800057e8:	f4 cb ff f8 	sub	r11,r10,-8
800057ec:	8d 0b       	st.w	r6[0x0],r11
800057ee:	f4 ea 00 00 	ld.d	r10,r10[0]
800057f2:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800057f6:	c0 f8       	rjmp	80005814 <get_arg+0x1d4>
800057f8:	f4 cb ff fc 	sub	r11,r10,-4
800057fc:	8d 0b       	st.w	r6[0x0],r11
800057fe:	74 0a       	ld.w	r10,r10[0x0]
80005800:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80005804:	c0 88       	rjmp	80005814 <get_arg+0x1d4>
80005806:	f4 cb ff f8 	sub	r11,r10,-8
8000580a:	8d 0b       	st.w	r6[0x0],r11
8000580c:	f4 ea 00 00 	ld.d	r10,r10[0]
80005810:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80005814:	0e 9b       	mov	r11,r7
80005816:	18 95       	mov	r5,r12
80005818:	c4 e8       	rjmp	800058b4 <get_arg+0x274>
8000581a:	62 0a       	ld.w	r10,r1[0x0]
8000581c:	5b fa       	cp.w	r10,-1
8000581e:	c0 b1       	brne	80005834 <get_arg+0x1f4>
80005820:	50 19       	stdsp	sp[0x4],r9
80005822:	50 28       	stdsp	sp[0x8],r8
80005824:	e0 6a 00 80 	mov	r10,128
80005828:	30 0b       	mov	r11,0
8000582a:	02 9c       	mov	r12,r1
8000582c:	f0 1f 00 4d 	mcall	80005960 <get_arg+0x320>
80005830:	40 28       	lddsp	r8,sp[0x8]
80005832:	40 19       	lddsp	r9,sp[0x4]
80005834:	e4 cc 00 01 	sub	r12,r2,1
80005838:	0e 9b       	mov	r11,r7
8000583a:	50 3c       	stdsp	sp[0xc],r12
8000583c:	f2 0c 0c 49 	max	r9,r9,r12
80005840:	c3 a8       	rjmp	800058b4 <get_arg+0x274>
80005842:	62 0a       	ld.w	r10,r1[0x0]
80005844:	5b fa       	cp.w	r10,-1
80005846:	c0 b1       	brne	8000585c <get_arg+0x21c>
80005848:	50 19       	stdsp	sp[0x4],r9
8000584a:	50 28       	stdsp	sp[0x8],r8
8000584c:	e0 6a 00 80 	mov	r10,128
80005850:	30 0b       	mov	r11,0
80005852:	02 9c       	mov	r12,r1
80005854:	f0 1f 00 43 	mcall	80005960 <get_arg+0x320>
80005858:	40 28       	lddsp	r8,sp[0x8]
8000585a:	40 19       	lddsp	r9,sp[0x4]
8000585c:	20 12       	sub	r2,1
8000585e:	30 0a       	mov	r10,0
80005860:	0e 9b       	mov	r11,r7
80005862:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80005866:	f2 02 0c 49 	max	r9,r9,r2
8000586a:	c2 58       	rjmp	800058b4 <get_arg+0x274>
8000586c:	16 97       	mov	r7,r11
8000586e:	6c 0a       	ld.w	r10,r6[0x0]
80005870:	f4 cb ff fc 	sub	r11,r10,-4
80005874:	8d 0b       	st.w	r6[0x0],r11
80005876:	74 0a       	ld.w	r10,r10[0x0]
80005878:	0e 9b       	mov	r11,r7
8000587a:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000587e:	2f f5       	sub	r5,-1
80005880:	c1 a8       	rjmp	800058b4 <get_arg+0x274>
80005882:	f4 c2 00 30 	sub	r2,r10,48
80005886:	c0 68       	rjmp	80005892 <get_arg+0x252>
80005888:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000588c:	2f f7       	sub	r7,-1
8000588e:	f4 02 00 12 	add	r2,r10,r2<<0x1
80005892:	0f 8a       	ld.ub	r10,r7[0x0]
80005894:	58 0a       	cp.w	r10,0
80005896:	c0 e0       	breq	800058b2 <get_arg+0x272>
80005898:	23 0a       	sub	r10,48
8000589a:	58 9a       	cp.w	r10,9
8000589c:	fe 98 ff f6 	brls	80005888 <get_arg+0x248>
800058a0:	c0 98       	rjmp	800058b2 <get_arg+0x272>
800058a2:	2f f7       	sub	r7,-1
800058a4:	0f 8a       	ld.ub	r10,r7[0x0]
800058a6:	58 0a       	cp.w	r10,0
800058a8:	c0 50       	breq	800058b2 <get_arg+0x272>
800058aa:	23 0a       	sub	r10,48
800058ac:	58 9a       	cp.w	r10,9
800058ae:	fe 98 ff fa 	brls	800058a2 <get_arg+0x262>
800058b2:	0e 9b       	mov	r11,r7
800058b4:	40 7c       	lddsp	r12,sp[0x1c]
800058b6:	30 ba       	mov	r10,11
800058b8:	f4 0c 18 00 	cp.b	r12,r10
800058bc:	fe 91 fe ec 	brne	80005694 <get_arg+0x54>
800058c0:	40 42       	lddsp	r2,sp[0x10]
800058c2:	17 8c       	ld.ub	r12,r11[0x0]
800058c4:	0a 32       	cp.w	r2,r5
800058c6:	5f 4a       	srge	r10
800058c8:	f0 0c 18 00 	cp.b	r12,r8
800058cc:	5f 1c       	srne	r12
800058ce:	f9 ea 00 0a 	and	r10,r12,r10
800058d2:	f0 0a 18 00 	cp.b	r10,r8
800058d6:	fe 91 fe c9 	brne	80005668 <get_arg+0x28>
800058da:	30 08       	mov	r8,0
800058dc:	40 4e       	lddsp	lr,sp[0x10]
800058de:	17 8a       	ld.ub	r10,r11[0x0]
800058e0:	e2 05 00 21 	add	r1,r1,r5<<0x2
800058e4:	f0 0a 18 00 	cp.b	r10,r8
800058e8:	fc 09 17 10 	movne	r9,lr
800058ec:	e6 05 00 38 	add	r8,r3,r5<<0x3
800058f0:	06 9e       	mov	lr,r3
800058f2:	c2 a8       	rjmp	80005946 <get_arg+0x306>
800058f4:	62 0a       	ld.w	r10,r1[0x0]
800058f6:	58 3a       	cp.w	r10,3
800058f8:	c1 e0       	breq	80005934 <get_arg+0x2f4>
800058fa:	e0 89 00 07 	brgt	80005908 <get_arg+0x2c8>
800058fe:	58 1a       	cp.w	r10,1
80005900:	c1 a0       	breq	80005934 <get_arg+0x2f4>
80005902:	58 2a       	cp.w	r10,2
80005904:	c1 81       	brne	80005934 <get_arg+0x2f4>
80005906:	c0 58       	rjmp	80005910 <get_arg+0x2d0>
80005908:	58 5a       	cp.w	r10,5
8000590a:	c0 c0       	breq	80005922 <get_arg+0x2e2>
8000590c:	c0 b5       	brlt	80005922 <get_arg+0x2e2>
8000590e:	c1 38       	rjmp	80005934 <get_arg+0x2f4>
80005910:	6c 0a       	ld.w	r10,r6[0x0]
80005912:	f4 cc ff f8 	sub	r12,r10,-8
80005916:	8d 0c       	st.w	r6[0x0],r12
80005918:	f4 e2 00 00 	ld.d	r2,r10[0]
8000591c:	f0 e3 00 00 	st.d	r8[0],r2
80005920:	c1 08       	rjmp	80005940 <get_arg+0x300>
80005922:	6c 0a       	ld.w	r10,r6[0x0]
80005924:	f4 cc ff f8 	sub	r12,r10,-8
80005928:	8d 0c       	st.w	r6[0x0],r12
8000592a:	f4 e2 00 00 	ld.d	r2,r10[0]
8000592e:	f0 e3 00 00 	st.d	r8[0],r2
80005932:	c0 78       	rjmp	80005940 <get_arg+0x300>
80005934:	6c 0a       	ld.w	r10,r6[0x0]
80005936:	f4 cc ff fc 	sub	r12,r10,-4
8000593a:	8d 0c       	st.w	r6[0x0],r12
8000593c:	74 0a       	ld.w	r10,r10[0x0]
8000593e:	91 0a       	st.w	r8[0x0],r10
80005940:	2f f5       	sub	r5,-1
80005942:	2f 88       	sub	r8,-8
80005944:	2f c1       	sub	r1,-4
80005946:	12 35       	cp.w	r5,r9
80005948:	fe 9a ff d6 	brle	800058f4 <get_arg+0x2b4>
8000594c:	1c 93       	mov	r3,lr
8000594e:	40 52       	lddsp	r2,sp[0x14]
80005950:	40 6e       	lddsp	lr,sp[0x18]
80005952:	85 05       	st.w	r2[0x0],r5
80005954:	9d 0b       	st.w	lr[0x0],r11
80005956:	40 4b       	lddsp	r11,sp[0x10]
80005958:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000595c:	2f 8d       	sub	sp,-32
8000595e:	d8 32       	popm	r0-r7,pc
80005960:	80 00       	ld.sh	r0,r0[0x0]
80005962:	50 90       	stdsp	sp[0x24],r0

80005964 <__sprint_r>:
80005964:	d4 21       	pushm	r4-r7,lr
80005966:	14 97       	mov	r7,r10
80005968:	74 28       	ld.w	r8,r10[0x8]
8000596a:	58 08       	cp.w	r8,0
8000596c:	c0 41       	brne	80005974 <__sprint_r+0x10>
8000596e:	95 18       	st.w	r10[0x4],r8
80005970:	10 9c       	mov	r12,r8
80005972:	d8 22       	popm	r4-r7,pc
80005974:	f0 1f 00 03 	mcall	80005980 <__sprint_r+0x1c>
80005978:	30 08       	mov	r8,0
8000597a:	8f 18       	st.w	r7[0x4],r8
8000597c:	8f 28       	st.w	r7[0x8],r8
8000597e:	d8 22       	popm	r4-r7,pc
80005980:	80 00       	ld.sh	r0,r0[0x0]
80005982:	8e 1c       	ld.sh	r12,r7[0x2]

80005984 <_vfprintf_r>:
80005984:	d4 31       	pushm	r0-r7,lr
80005986:	fa cd 06 bc 	sub	sp,sp,1724
8000598a:	51 09       	stdsp	sp[0x40],r9
8000598c:	16 91       	mov	r1,r11
8000598e:	14 97       	mov	r7,r10
80005990:	18 95       	mov	r5,r12
80005992:	f0 1f 00 56 	mcall	80005ae8 <_vfprintf_r+0x164>
80005996:	78 0c       	ld.w	r12,r12[0x0]
80005998:	50 cc       	stdsp	sp[0x30],r12
8000599a:	58 05       	cp.w	r5,0
8000599c:	c0 70       	breq	800059aa <_vfprintf_r+0x26>
8000599e:	6a 68       	ld.w	r8,r5[0x18]
800059a0:	58 08       	cp.w	r8,0
800059a2:	c0 41       	brne	800059aa <_vfprintf_r+0x26>
800059a4:	0a 9c       	mov	r12,r5
800059a6:	f0 1f 00 52 	mcall	80005aec <_vfprintf_r+0x168>
800059aa:	4d 28       	lddpc	r8,80005af0 <_vfprintf_r+0x16c>
800059ac:	10 31       	cp.w	r1,r8
800059ae:	c0 31       	brne	800059b4 <_vfprintf_r+0x30>
800059b0:	6a 01       	ld.w	r1,r5[0x0]
800059b2:	c0 a8       	rjmp	800059c6 <_vfprintf_r+0x42>
800059b4:	4d 08       	lddpc	r8,80005af4 <_vfprintf_r+0x170>
800059b6:	10 31       	cp.w	r1,r8
800059b8:	c0 31       	brne	800059be <_vfprintf_r+0x3a>
800059ba:	6a 11       	ld.w	r1,r5[0x4]
800059bc:	c0 58       	rjmp	800059c6 <_vfprintf_r+0x42>
800059be:	4c f8       	lddpc	r8,80005af8 <_vfprintf_r+0x174>
800059c0:	10 31       	cp.w	r1,r8
800059c2:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800059c6:	82 68       	ld.sh	r8,r1[0xc]
800059c8:	ed b8 00 03 	bld	r8,0x3
800059cc:	c0 41       	brne	800059d4 <_vfprintf_r+0x50>
800059ce:	62 48       	ld.w	r8,r1[0x10]
800059d0:	58 08       	cp.w	r8,0
800059d2:	c0 71       	brne	800059e0 <_vfprintf_r+0x5c>
800059d4:	02 9b       	mov	r11,r1
800059d6:	0a 9c       	mov	r12,r5
800059d8:	f0 1f 00 49 	mcall	80005afc <_vfprintf_r+0x178>
800059dc:	e0 81 0f 99 	brne	8000790e <_vfprintf_r+0x1f8a>
800059e0:	82 68       	ld.sh	r8,r1[0xc]
800059e2:	10 99       	mov	r9,r8
800059e4:	e2 19 00 1a 	andl	r9,0x1a,COH
800059e8:	58 a9       	cp.w	r9,10
800059ea:	c3 d1       	brne	80005a64 <_vfprintf_r+0xe0>
800059ec:	82 79       	ld.sh	r9,r1[0xe]
800059ee:	30 0a       	mov	r10,0
800059f0:	f4 09 19 00 	cp.h	r9,r10
800059f4:	c3 85       	brlt	80005a64 <_vfprintf_r+0xe0>
800059f6:	a1 d8       	cbr	r8,0x1
800059f8:	fb 58 05 d0 	st.h	sp[1488],r8
800059fc:	62 88       	ld.w	r8,r1[0x20]
800059fe:	fb 48 05 e4 	st.w	sp[1508],r8
80005a02:	62 a8       	ld.w	r8,r1[0x28]
80005a04:	fb 48 05 ec 	st.w	sp[1516],r8
80005a08:	fa c8 ff bc 	sub	r8,sp,-68
80005a0c:	fb 48 05 d4 	st.w	sp[1492],r8
80005a10:	fb 48 05 c4 	st.w	sp[1476],r8
80005a14:	e0 68 04 00 	mov	r8,1024
80005a18:	fb 48 05 d8 	st.w	sp[1496],r8
80005a1c:	fb 48 05 cc 	st.w	sp[1484],r8
80005a20:	30 08       	mov	r8,0
80005a22:	fb 59 05 d2 	st.h	sp[1490],r9
80005a26:	0e 9a       	mov	r10,r7
80005a28:	41 09       	lddsp	r9,sp[0x40]
80005a2a:	fa c7 fa 3c 	sub	r7,sp,-1476
80005a2e:	fb 48 05 dc 	st.w	sp[1500],r8
80005a32:	0a 9c       	mov	r12,r5
80005a34:	0e 9b       	mov	r11,r7
80005a36:	f0 1f 00 33 	mcall	80005b00 <_vfprintf_r+0x17c>
80005a3a:	50 bc       	stdsp	sp[0x2c],r12
80005a3c:	c0 95       	brlt	80005a4e <_vfprintf_r+0xca>
80005a3e:	0e 9b       	mov	r11,r7
80005a40:	0a 9c       	mov	r12,r5
80005a42:	f0 1f 00 31 	mcall	80005b04 <_vfprintf_r+0x180>
80005a46:	40 be       	lddsp	lr,sp[0x2c]
80005a48:	f9 be 01 ff 	movne	lr,-1
80005a4c:	50 be       	stdsp	sp[0x2c],lr
80005a4e:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80005a52:	ed b8 00 06 	bld	r8,0x6
80005a56:	e0 81 0f 5e 	brne	80007912 <_vfprintf_r+0x1f8e>
80005a5a:	82 68       	ld.sh	r8,r1[0xc]
80005a5c:	a7 a8       	sbr	r8,0x6
80005a5e:	a2 68       	st.h	r1[0xc],r8
80005a60:	e0 8f 0f 59 	bral	80007912 <_vfprintf_r+0x1f8e>
80005a64:	30 08       	mov	r8,0
80005a66:	fb 48 06 b4 	st.w	sp[1716],r8
80005a6a:	fb 48 06 90 	st.w	sp[1680],r8
80005a6e:	fb 48 06 8c 	st.w	sp[1676],r8
80005a72:	fb 48 06 b0 	st.w	sp[1712],r8
80005a76:	30 08       	mov	r8,0
80005a78:	30 09       	mov	r9,0
80005a7a:	50 a7       	stdsp	sp[0x28],r7
80005a7c:	50 78       	stdsp	sp[0x1c],r8
80005a7e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a82:	3f f8       	mov	r8,-1
80005a84:	50 59       	stdsp	sp[0x14],r9
80005a86:	fb 43 06 88 	st.w	sp[1672],r3
80005a8a:	fb 48 05 44 	st.w	sp[1348],r8
80005a8e:	12 9c       	mov	r12,r9
80005a90:	50 69       	stdsp	sp[0x18],r9
80005a92:	50 d9       	stdsp	sp[0x34],r9
80005a94:	50 e9       	stdsp	sp[0x38],r9
80005a96:	50 b9       	stdsp	sp[0x2c],r9
80005a98:	12 97       	mov	r7,r9
80005a9a:	0a 94       	mov	r4,r5
80005a9c:	40 a2       	lddsp	r2,sp[0x28]
80005a9e:	32 5a       	mov	r10,37
80005aa0:	30 08       	mov	r8,0
80005aa2:	c0 28       	rjmp	80005aa6 <_vfprintf_r+0x122>
80005aa4:	2f f2       	sub	r2,-1
80005aa6:	05 89       	ld.ub	r9,r2[0x0]
80005aa8:	f0 09 18 00 	cp.b	r9,r8
80005aac:	5f 1b       	srne	r11
80005aae:	f4 09 18 00 	cp.b	r9,r10
80005ab2:	5f 19       	srne	r9
80005ab4:	f3 eb 00 0b 	and	r11,r9,r11
80005ab8:	f0 0b 18 00 	cp.b	r11,r8
80005abc:	cf 41       	brne	80005aa4 <_vfprintf_r+0x120>
80005abe:	40 ab       	lddsp	r11,sp[0x28]
80005ac0:	e4 0b 01 06 	sub	r6,r2,r11
80005ac4:	c2 f0       	breq	80005b22 <_vfprintf_r+0x19e>
80005ac6:	fa f8 06 90 	ld.w	r8,sp[1680]
80005aca:	0c 08       	add	r8,r6
80005acc:	87 0b       	st.w	r3[0x0],r11
80005ace:	fb 48 06 90 	st.w	sp[1680],r8
80005ad2:	87 16       	st.w	r3[0x4],r6
80005ad4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ad8:	2f f8       	sub	r8,-1
80005ada:	fb 48 06 8c 	st.w	sp[1676],r8
80005ade:	58 78       	cp.w	r8,7
80005ae0:	e0 89 00 14 	brgt	80005b08 <_vfprintf_r+0x184>
80005ae4:	2f 83       	sub	r3,-8
80005ae6:	c1 b8       	rjmp	80005b1c <_vfprintf_r+0x198>
80005ae8:	80 00       	ld.sh	r0,r0[0x0]
80005aea:	91 34       	st.w	r8[0xc],r4
80005aec:	80 00       	ld.sh	r0,r0[0x0]
80005aee:	8b 24       	st.w	r5[0x8],r4
80005af0:	80 00       	ld.sh	r0,r0[0x0]
80005af2:	b1 08       	ld.d	r8,r8
80005af4:	80 00       	ld.sh	r0,r0[0x0]
80005af6:	b1 28       	st.d	r8++,r8
80005af8:	80 00       	ld.sh	r0,r0[0x0]
80005afa:	b1 48       	asr	r8,0x10
80005afc:	80 00       	ld.sh	r0,r0[0x0]
80005afe:	79 20       	ld.w	r0,r12[0x48]
80005b00:	80 00       	ld.sh	r0,r0[0x0]
80005b02:	59 84       	cp.w	r4,24
80005b04:	80 00       	ld.sh	r0,r0[0x0]
80005b06:	89 48       	st.w	r4[0x10],r8
80005b08:	fa ca f9 78 	sub	r10,sp,-1672
80005b0c:	02 9b       	mov	r11,r1
80005b0e:	08 9c       	mov	r12,r4
80005b10:	f0 1f 00 71 	mcall	80005cd4 <_vfprintf_r+0x350>
80005b14:	e0 81 0e f9 	brne	80007906 <_vfprintf_r+0x1f82>
80005b18:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b1c:	40 ba       	lddsp	r10,sp[0x2c]
80005b1e:	0c 0a       	add	r10,r6
80005b20:	50 ba       	stdsp	sp[0x2c],r10
80005b22:	05 89       	ld.ub	r9,r2[0x0]
80005b24:	30 08       	mov	r8,0
80005b26:	f0 09 18 00 	cp.b	r9,r8
80005b2a:	e0 80 0e dd 	breq	800078e4 <_vfprintf_r+0x1f60>
80005b2e:	30 09       	mov	r9,0
80005b30:	fb 68 06 bb 	st.b	sp[1723],r8
80005b34:	0e 96       	mov	r6,r7
80005b36:	e4 c8 ff ff 	sub	r8,r2,-1
80005b3a:	3f fe       	mov	lr,-1
80005b3c:	50 93       	stdsp	sp[0x24],r3
80005b3e:	50 41       	stdsp	sp[0x10],r1
80005b40:	0e 93       	mov	r3,r7
80005b42:	04 91       	mov	r1,r2
80005b44:	50 89       	stdsp	sp[0x20],r9
80005b46:	50 a8       	stdsp	sp[0x28],r8
80005b48:	50 2e       	stdsp	sp[0x8],lr
80005b4a:	50 39       	stdsp	sp[0xc],r9
80005b4c:	12 95       	mov	r5,r9
80005b4e:	12 90       	mov	r0,r9
80005b50:	10 97       	mov	r7,r8
80005b52:	08 92       	mov	r2,r4
80005b54:	c0 78       	rjmp	80005b62 <_vfprintf_r+0x1de>
80005b56:	3f fc       	mov	r12,-1
80005b58:	08 97       	mov	r7,r4
80005b5a:	50 2c       	stdsp	sp[0x8],r12
80005b5c:	c0 38       	rjmp	80005b62 <_vfprintf_r+0x1de>
80005b5e:	30 0b       	mov	r11,0
80005b60:	50 3b       	stdsp	sp[0xc],r11
80005b62:	0f 38       	ld.ub	r8,r7++
80005b64:	c0 28       	rjmp	80005b68 <_vfprintf_r+0x1e4>
80005b66:	12 90       	mov	r0,r9
80005b68:	f0 c9 00 20 	sub	r9,r8,32
80005b6c:	e0 49 00 58 	cp.w	r9,88
80005b70:	e0 8b 0a 4d 	brhi	8000700a <_vfprintf_r+0x1686>
80005b74:	4d 9a       	lddpc	r10,80005cd8 <_vfprintf_r+0x354>
80005b76:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80005b7a:	50 a7       	stdsp	sp[0x28],r7
80005b7c:	50 80       	stdsp	sp[0x20],r0
80005b7e:	0c 97       	mov	r7,r6
80005b80:	04 94       	mov	r4,r2
80005b82:	06 96       	mov	r6,r3
80005b84:	02 92       	mov	r2,r1
80005b86:	4d 69       	lddpc	r9,80005cdc <_vfprintf_r+0x358>
80005b88:	40 93       	lddsp	r3,sp[0x24]
80005b8a:	10 90       	mov	r0,r8
80005b8c:	40 41       	lddsp	r1,sp[0x10]
80005b8e:	50 d9       	stdsp	sp[0x34],r9
80005b90:	e0 8f 08 aa 	bral	80006ce4 <_vfprintf_r+0x1360>
80005b94:	30 08       	mov	r8,0
80005b96:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80005b9a:	f0 09 18 00 	cp.b	r9,r8
80005b9e:	ce 21       	brne	80005b62 <_vfprintf_r+0x1de>
80005ba0:	32 08       	mov	r8,32
80005ba2:	c6 e8       	rjmp	80005c7e <_vfprintf_r+0x2fa>
80005ba4:	a1 a5       	sbr	r5,0x0
80005ba6:	cd eb       	rjmp	80005b62 <_vfprintf_r+0x1de>
80005ba8:	0f 89       	ld.ub	r9,r7[0x0]
80005baa:	f2 c8 00 30 	sub	r8,r9,48
80005bae:	58 98       	cp.w	r8,9
80005bb0:	e0 8b 00 1d 	brhi	80005bea <_vfprintf_r+0x266>
80005bb4:	ee c8 ff ff 	sub	r8,r7,-1
80005bb8:	30 0b       	mov	r11,0
80005bba:	23 09       	sub	r9,48
80005bbc:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80005bc0:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80005bc4:	11 39       	ld.ub	r9,r8++
80005bc6:	f2 ca 00 30 	sub	r10,r9,48
80005bca:	58 9a       	cp.w	r10,9
80005bcc:	fe 98 ff f7 	brls	80005bba <_vfprintf_r+0x236>
80005bd0:	e0 49 00 24 	cp.w	r9,36
80005bd4:	cc 51       	brne	80005b5e <_vfprintf_r+0x1da>
80005bd6:	e0 4b 00 20 	cp.w	r11,32
80005bda:	e0 89 0e 95 	brgt	80007904 <_vfprintf_r+0x1f80>
80005bde:	20 1b       	sub	r11,1
80005be0:	fa f9 06 b4 	ld.w	r9,sp[1716]
80005be4:	12 3b       	cp.w	r11,r9
80005be6:	c0 95       	brlt	80005bf8 <_vfprintf_r+0x274>
80005be8:	c1 08       	rjmp	80005c08 <_vfprintf_r+0x284>
80005bea:	fa f9 06 b4 	ld.w	r9,sp[1716]
80005bee:	ec ca ff ff 	sub	r10,r6,-1
80005bf2:	12 36       	cp.w	r6,r9
80005bf4:	c1 f5       	brlt	80005c32 <_vfprintf_r+0x2ae>
80005bf6:	c2 68       	rjmp	80005c42 <_vfprintf_r+0x2be>
80005bf8:	fa ce f9 44 	sub	lr,sp,-1724
80005bfc:	10 97       	mov	r7,r8
80005bfe:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80005c02:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80005c06:	c3 58       	rjmp	80005c70 <_vfprintf_r+0x2ec>
80005c08:	10 97       	mov	r7,r8
80005c0a:	fa c8 f9 50 	sub	r8,sp,-1712
80005c0e:	1a d8       	st.w	--sp,r8
80005c10:	fa c8 fa b8 	sub	r8,sp,-1352
80005c14:	1a d8       	st.w	--sp,r8
80005c16:	fa c8 fb b4 	sub	r8,sp,-1100
80005c1a:	02 9a       	mov	r10,r1
80005c1c:	1a d8       	st.w	--sp,r8
80005c1e:	04 9c       	mov	r12,r2
80005c20:	fa c8 f9 40 	sub	r8,sp,-1728
80005c24:	fa c9 ff b4 	sub	r9,sp,-76
80005c28:	f0 1f 00 2e 	mcall	80005ce0 <_vfprintf_r+0x35c>
80005c2c:	2f dd       	sub	sp,-12
80005c2e:	78 00       	ld.w	r0,r12[0x0]
80005c30:	c2 08       	rjmp	80005c70 <_vfprintf_r+0x2ec>
80005c32:	fa cc f9 44 	sub	r12,sp,-1724
80005c36:	14 96       	mov	r6,r10
80005c38:	f8 03 00 38 	add	r8,r12,r3<<0x3
80005c3c:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80005c40:	c1 88       	rjmp	80005c70 <_vfprintf_r+0x2ec>
80005c42:	41 08       	lddsp	r8,sp[0x40]
80005c44:	59 f9       	cp.w	r9,31
80005c46:	e0 89 00 11 	brgt	80005c68 <_vfprintf_r+0x2e4>
80005c4a:	f0 cb ff fc 	sub	r11,r8,-4
80005c4e:	51 0b       	stdsp	sp[0x40],r11
80005c50:	70 00       	ld.w	r0,r8[0x0]
80005c52:	fa cb f9 44 	sub	r11,sp,-1724
80005c56:	f6 09 00 38 	add	r8,r11,r9<<0x3
80005c5a:	f1 40 fd 88 	st.w	r8[-632],r0
80005c5e:	2f f9       	sub	r9,-1
80005c60:	14 96       	mov	r6,r10
80005c62:	fb 49 06 b4 	st.w	sp[1716],r9
80005c66:	c0 58       	rjmp	80005c70 <_vfprintf_r+0x2ec>
80005c68:	70 00       	ld.w	r0,r8[0x0]
80005c6a:	14 96       	mov	r6,r10
80005c6c:	2f c8       	sub	r8,-4
80005c6e:	51 08       	stdsp	sp[0x40],r8
80005c70:	58 00       	cp.w	r0,0
80005c72:	fe 94 ff 78 	brge	80005b62 <_vfprintf_r+0x1de>
80005c76:	5c 30       	neg	r0
80005c78:	a3 a5       	sbr	r5,0x2
80005c7a:	c7 4b       	rjmp	80005b62 <_vfprintf_r+0x1de>
80005c7c:	32 b8       	mov	r8,43
80005c7e:	fb 68 06 bb 	st.b	sp[1723],r8
80005c82:	c7 0b       	rjmp	80005b62 <_vfprintf_r+0x1de>
80005c84:	0f 38       	ld.ub	r8,r7++
80005c86:	e0 48 00 2a 	cp.w	r8,42
80005c8a:	c0 30       	breq	80005c90 <_vfprintf_r+0x30c>
80005c8c:	30 09       	mov	r9,0
80005c8e:	c8 08       	rjmp	80005d8e <_vfprintf_r+0x40a>
80005c90:	0f 88       	ld.ub	r8,r7[0x0]
80005c92:	f0 c9 00 30 	sub	r9,r8,48
80005c96:	58 99       	cp.w	r9,9
80005c98:	e0 8b 00 26 	brhi	80005ce4 <_vfprintf_r+0x360>
80005c9c:	ee c4 ff ff 	sub	r4,r7,-1
80005ca0:	30 0b       	mov	r11,0
80005ca2:	23 08       	sub	r8,48
80005ca4:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80005ca8:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80005cac:	09 38       	ld.ub	r8,r4++
80005cae:	f0 c9 00 30 	sub	r9,r8,48
80005cb2:	58 99       	cp.w	r9,9
80005cb4:	fe 98 ff f7 	brls	80005ca2 <_vfprintf_r+0x31e>
80005cb8:	e0 48 00 24 	cp.w	r8,36
80005cbc:	fe 91 ff 51 	brne	80005b5e <_vfprintf_r+0x1da>
80005cc0:	e0 4b 00 20 	cp.w	r11,32
80005cc4:	e0 89 0e 20 	brgt	80007904 <_vfprintf_r+0x1f80>
80005cc8:	20 1b       	sub	r11,1
80005cca:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005cce:	10 3b       	cp.w	r11,r8
80005cd0:	c1 15       	brlt	80005cf2 <_vfprintf_r+0x36e>
80005cd2:	c1 88       	rjmp	80005d02 <_vfprintf_r+0x37e>
80005cd4:	80 00       	ld.sh	r0,r0[0x0]
80005cd6:	59 64       	cp.w	r4,22
80005cd8:	80 00       	ld.sh	r0,r0[0x0]
80005cda:	ad 60       	lsl	r0,0xc
80005cdc:	80 00       	ld.sh	r0,r0[0x0]
80005cde:	af 9c       	lsr	r12,0xf
80005ce0:	80 00       	ld.sh	r0,r0[0x0]
80005ce2:	56 40       	stdsp	sp[0x190],r0
80005ce4:	fa fa 06 b4 	ld.w	r10,sp[1716]
80005ce8:	ec c9 ff ff 	sub	r9,r6,-1
80005cec:	14 36       	cp.w	r6,r10
80005cee:	c1 f5       	brlt	80005d2c <_vfprintf_r+0x3a8>
80005cf0:	c2 88       	rjmp	80005d40 <_vfprintf_r+0x3bc>
80005cf2:	fa ca f9 44 	sub	r10,sp,-1724
80005cf6:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80005cfa:	f6 fb fd 88 	ld.w	r11,r11[-632]
80005cfe:	50 2b       	stdsp	sp[0x8],r11
80005d00:	c3 c8       	rjmp	80005d78 <_vfprintf_r+0x3f4>
80005d02:	fa c8 f9 50 	sub	r8,sp,-1712
80005d06:	1a d8       	st.w	--sp,r8
80005d08:	fa c8 fa b8 	sub	r8,sp,-1352
80005d0c:	1a d8       	st.w	--sp,r8
80005d0e:	fa c8 fb b4 	sub	r8,sp,-1100
80005d12:	02 9a       	mov	r10,r1
80005d14:	1a d8       	st.w	--sp,r8
80005d16:	04 9c       	mov	r12,r2
80005d18:	fa c8 f9 40 	sub	r8,sp,-1728
80005d1c:	fa c9 ff b4 	sub	r9,sp,-76
80005d20:	f0 1f 01 9e 	mcall	80006398 <_vfprintf_r+0xa14>
80005d24:	2f dd       	sub	sp,-12
80005d26:	78 0c       	ld.w	r12,r12[0x0]
80005d28:	50 2c       	stdsp	sp[0x8],r12
80005d2a:	c2 78       	rjmp	80005d78 <_vfprintf_r+0x3f4>
80005d2c:	12 96       	mov	r6,r9
80005d2e:	0e 94       	mov	r4,r7
80005d30:	fa c9 f9 44 	sub	r9,sp,-1724
80005d34:	f2 03 00 38 	add	r8,r9,r3<<0x3
80005d38:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80005d3c:	50 28       	stdsp	sp[0x8],r8
80005d3e:	c1 d8       	rjmp	80005d78 <_vfprintf_r+0x3f4>
80005d40:	41 08       	lddsp	r8,sp[0x40]
80005d42:	59 fa       	cp.w	r10,31
80005d44:	e0 89 00 14 	brgt	80005d6c <_vfprintf_r+0x3e8>
80005d48:	f0 cb ff fc 	sub	r11,r8,-4
80005d4c:	70 08       	ld.w	r8,r8[0x0]
80005d4e:	51 0b       	stdsp	sp[0x40],r11
80005d50:	50 28       	stdsp	sp[0x8],r8
80005d52:	fa c6 f9 44 	sub	r6,sp,-1724
80005d56:	40 2e       	lddsp	lr,sp[0x8]
80005d58:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80005d5c:	f1 4e fd 88 	st.w	r8[-632],lr
80005d60:	2f fa       	sub	r10,-1
80005d62:	0e 94       	mov	r4,r7
80005d64:	fb 4a 06 b4 	st.w	sp[1716],r10
80005d68:	12 96       	mov	r6,r9
80005d6a:	c0 78       	rjmp	80005d78 <_vfprintf_r+0x3f4>
80005d6c:	70 0c       	ld.w	r12,r8[0x0]
80005d6e:	0e 94       	mov	r4,r7
80005d70:	2f c8       	sub	r8,-4
80005d72:	50 2c       	stdsp	sp[0x8],r12
80005d74:	12 96       	mov	r6,r9
80005d76:	51 08       	stdsp	sp[0x40],r8
80005d78:	40 2b       	lddsp	r11,sp[0x8]
80005d7a:	58 0b       	cp.w	r11,0
80005d7c:	fe 95 fe ed 	brlt	80005b56 <_vfprintf_r+0x1d2>
80005d80:	08 97       	mov	r7,r4
80005d82:	cf 0a       	rjmp	80005b62 <_vfprintf_r+0x1de>
80005d84:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005d88:	0f 38       	ld.ub	r8,r7++
80005d8a:	f4 09 00 19 	add	r9,r10,r9<<0x1
80005d8e:	f0 ca 00 30 	sub	r10,r8,48
80005d92:	58 9a       	cp.w	r10,9
80005d94:	fe 98 ff f8 	brls	80005d84 <_vfprintf_r+0x400>
80005d98:	3f fa       	mov	r10,-1
80005d9a:	f2 0a 0c 49 	max	r9,r9,r10
80005d9e:	50 29       	stdsp	sp[0x8],r9
80005da0:	ce 4a       	rjmp	80005b68 <_vfprintf_r+0x1e4>
80005da2:	a7 b5       	sbr	r5,0x7
80005da4:	cd fa       	rjmp	80005b62 <_vfprintf_r+0x1de>
80005da6:	30 09       	mov	r9,0
80005da8:	23 08       	sub	r8,48
80005daa:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005dae:	f0 09 00 19 	add	r9,r8,r9<<0x1
80005db2:	0f 38       	ld.ub	r8,r7++
80005db4:	f0 ca 00 30 	sub	r10,r8,48
80005db8:	58 9a       	cp.w	r10,9
80005dba:	fe 98 ff f7 	brls	80005da8 <_vfprintf_r+0x424>
80005dbe:	e0 48 00 24 	cp.w	r8,36
80005dc2:	fe 91 fe d2 	brne	80005b66 <_vfprintf_r+0x1e2>
80005dc6:	e0 49 00 20 	cp.w	r9,32
80005dca:	e0 89 0d 9d 	brgt	80007904 <_vfprintf_r+0x1f80>
80005dce:	f2 c3 00 01 	sub	r3,r9,1
80005dd2:	30 19       	mov	r9,1
80005dd4:	50 39       	stdsp	sp[0xc],r9
80005dd6:	cc 6a       	rjmp	80005b62 <_vfprintf_r+0x1de>
80005dd8:	a3 b5       	sbr	r5,0x3
80005dda:	cc 4a       	rjmp	80005b62 <_vfprintf_r+0x1de>
80005ddc:	a7 a5       	sbr	r5,0x6
80005dde:	cc 2a       	rjmp	80005b62 <_vfprintf_r+0x1de>
80005de0:	0a 98       	mov	r8,r5
80005de2:	a5 b5       	sbr	r5,0x5
80005de4:	a5 a8       	sbr	r8,0x4
80005de6:	0f 89       	ld.ub	r9,r7[0x0]
80005de8:	36 ce       	mov	lr,108
80005dea:	fc 09 18 00 	cp.b	r9,lr
80005dee:	f7 b7 00 ff 	subeq	r7,-1
80005df2:	f0 05 17 10 	movne	r5,r8
80005df6:	cb 6a       	rjmp	80005b62 <_vfprintf_r+0x1de>
80005df8:	a5 b5       	sbr	r5,0x5
80005dfa:	cb 4a       	rjmp	80005b62 <_vfprintf_r+0x1de>
80005dfc:	50 a7       	stdsp	sp[0x28],r7
80005dfe:	50 80       	stdsp	sp[0x20],r0
80005e00:	0c 97       	mov	r7,r6
80005e02:	10 90       	mov	r0,r8
80005e04:	06 96       	mov	r6,r3
80005e06:	04 94       	mov	r4,r2
80005e08:	40 93       	lddsp	r3,sp[0x24]
80005e0a:	02 92       	mov	r2,r1
80005e0c:	0e 99       	mov	r9,r7
80005e0e:	40 41       	lddsp	r1,sp[0x10]
80005e10:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005e14:	40 3c       	lddsp	r12,sp[0xc]
80005e16:	58 0c       	cp.w	r12,0
80005e18:	c1 d0       	breq	80005e52 <_vfprintf_r+0x4ce>
80005e1a:	10 36       	cp.w	r6,r8
80005e1c:	c0 64       	brge	80005e28 <_vfprintf_r+0x4a4>
80005e1e:	fa cb f9 44 	sub	r11,sp,-1724
80005e22:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005e26:	c1 d8       	rjmp	80005e60 <_vfprintf_r+0x4dc>
80005e28:	fa c8 f9 50 	sub	r8,sp,-1712
80005e2c:	1a d8       	st.w	--sp,r8
80005e2e:	fa c8 fa b8 	sub	r8,sp,-1352
80005e32:	1a d8       	st.w	--sp,r8
80005e34:	fa c8 fb b4 	sub	r8,sp,-1100
80005e38:	1a d8       	st.w	--sp,r8
80005e3a:	fa c8 f9 40 	sub	r8,sp,-1728
80005e3e:	fa c9 ff b4 	sub	r9,sp,-76
80005e42:	04 9a       	mov	r10,r2
80005e44:	0c 9b       	mov	r11,r6
80005e46:	08 9c       	mov	r12,r4
80005e48:	f0 1f 01 54 	mcall	80006398 <_vfprintf_r+0xa14>
80005e4c:	2f dd       	sub	sp,-12
80005e4e:	19 b8       	ld.ub	r8,r12[0x3]
80005e50:	c2 28       	rjmp	80005e94 <_vfprintf_r+0x510>
80005e52:	2f f7       	sub	r7,-1
80005e54:	10 39       	cp.w	r9,r8
80005e56:	c0 84       	brge	80005e66 <_vfprintf_r+0x4e2>
80005e58:	fa ca f9 44 	sub	r10,sp,-1724
80005e5c:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005e60:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80005e64:	c1 88       	rjmp	80005e94 <_vfprintf_r+0x510>
80005e66:	41 09       	lddsp	r9,sp[0x40]
80005e68:	59 f8       	cp.w	r8,31
80005e6a:	e0 89 00 12 	brgt	80005e8e <_vfprintf_r+0x50a>
80005e6e:	f2 ca ff fc 	sub	r10,r9,-4
80005e72:	51 0a       	stdsp	sp[0x40],r10
80005e74:	72 09       	ld.w	r9,r9[0x0]
80005e76:	fa c6 f9 44 	sub	r6,sp,-1724
80005e7a:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005e7e:	2f f8       	sub	r8,-1
80005e80:	f5 49 fd 88 	st.w	r10[-632],r9
80005e84:	fb 48 06 b4 	st.w	sp[1716],r8
80005e88:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80005e8c:	c0 48       	rjmp	80005e94 <_vfprintf_r+0x510>
80005e8e:	13 b8       	ld.ub	r8,r9[0x3]
80005e90:	2f c9       	sub	r9,-4
80005e92:	51 09       	stdsp	sp[0x40],r9
80005e94:	fb 68 06 60 	st.b	sp[1632],r8
80005e98:	30 0e       	mov	lr,0
80005e9a:	30 08       	mov	r8,0
80005e9c:	30 12       	mov	r2,1
80005e9e:	fb 68 06 bb 	st.b	sp[1723],r8
80005ea2:	50 2e       	stdsp	sp[0x8],lr
80005ea4:	e0 8f 08 c5 	bral	8000702e <_vfprintf_r+0x16aa>
80005ea8:	50 a7       	stdsp	sp[0x28],r7
80005eaa:	50 80       	stdsp	sp[0x20],r0
80005eac:	0c 97       	mov	r7,r6
80005eae:	04 94       	mov	r4,r2
80005eb0:	06 96       	mov	r6,r3
80005eb2:	02 92       	mov	r2,r1
80005eb4:	40 93       	lddsp	r3,sp[0x24]
80005eb6:	10 90       	mov	r0,r8
80005eb8:	40 41       	lddsp	r1,sp[0x10]
80005eba:	a5 a5       	sbr	r5,0x4
80005ebc:	c0 a8       	rjmp	80005ed0 <_vfprintf_r+0x54c>
80005ebe:	50 a7       	stdsp	sp[0x28],r7
80005ec0:	50 80       	stdsp	sp[0x20],r0
80005ec2:	0c 97       	mov	r7,r6
80005ec4:	04 94       	mov	r4,r2
80005ec6:	06 96       	mov	r6,r3
80005ec8:	02 92       	mov	r2,r1
80005eca:	40 93       	lddsp	r3,sp[0x24]
80005ecc:	10 90       	mov	r0,r8
80005ece:	40 41       	lddsp	r1,sp[0x10]
80005ed0:	ed b5 00 05 	bld	r5,0x5
80005ed4:	c5 11       	brne	80005f76 <_vfprintf_r+0x5f2>
80005ed6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005eda:	40 3c       	lddsp	r12,sp[0xc]
80005edc:	58 0c       	cp.w	r12,0
80005ede:	c1 e0       	breq	80005f1a <_vfprintf_r+0x596>
80005ee0:	10 36       	cp.w	r6,r8
80005ee2:	c0 64       	brge	80005eee <_vfprintf_r+0x56a>
80005ee4:	fa cb f9 44 	sub	r11,sp,-1724
80005ee8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005eec:	c2 08       	rjmp	80005f2c <_vfprintf_r+0x5a8>
80005eee:	fa c8 f9 50 	sub	r8,sp,-1712
80005ef2:	1a d8       	st.w	--sp,r8
80005ef4:	fa c8 fa b8 	sub	r8,sp,-1352
80005ef8:	0c 9b       	mov	r11,r6
80005efa:	1a d8       	st.w	--sp,r8
80005efc:	fa c8 fb b4 	sub	r8,sp,-1100
80005f00:	1a d8       	st.w	--sp,r8
80005f02:	fa c9 ff b4 	sub	r9,sp,-76
80005f06:	fa c8 f9 40 	sub	r8,sp,-1728
80005f0a:	04 9a       	mov	r10,r2
80005f0c:	08 9c       	mov	r12,r4
80005f0e:	f0 1f 01 23 	mcall	80006398 <_vfprintf_r+0xa14>
80005f12:	2f dd       	sub	sp,-12
80005f14:	78 1b       	ld.w	r11,r12[0x4]
80005f16:	78 09       	ld.w	r9,r12[0x0]
80005f18:	c2 b8       	rjmp	80005f6e <_vfprintf_r+0x5ea>
80005f1a:	ee ca ff ff 	sub	r10,r7,-1
80005f1e:	10 37       	cp.w	r7,r8
80005f20:	c0 b4       	brge	80005f36 <_vfprintf_r+0x5b2>
80005f22:	fa c9 f9 44 	sub	r9,sp,-1724
80005f26:	14 97       	mov	r7,r10
80005f28:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005f2c:	ec fb fd 8c 	ld.w	r11,r6[-628]
80005f30:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005f34:	c1 d8       	rjmp	80005f6e <_vfprintf_r+0x5ea>
80005f36:	41 09       	lddsp	r9,sp[0x40]
80005f38:	59 f8       	cp.w	r8,31
80005f3a:	e0 89 00 14 	brgt	80005f62 <_vfprintf_r+0x5de>
80005f3e:	f2 cb ff f8 	sub	r11,r9,-8
80005f42:	51 0b       	stdsp	sp[0x40],r11
80005f44:	fa c6 f9 44 	sub	r6,sp,-1724
80005f48:	72 1b       	ld.w	r11,r9[0x4]
80005f4a:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80005f4e:	72 09       	ld.w	r9,r9[0x0]
80005f50:	f9 4b fd 8c 	st.w	r12[-628],r11
80005f54:	f9 49 fd 88 	st.w	r12[-632],r9
80005f58:	2f f8       	sub	r8,-1
80005f5a:	14 97       	mov	r7,r10
80005f5c:	fb 48 06 b4 	st.w	sp[1716],r8
80005f60:	c0 78       	rjmp	80005f6e <_vfprintf_r+0x5ea>
80005f62:	f2 c8 ff f8 	sub	r8,r9,-8
80005f66:	72 1b       	ld.w	r11,r9[0x4]
80005f68:	14 97       	mov	r7,r10
80005f6a:	51 08       	stdsp	sp[0x40],r8
80005f6c:	72 09       	ld.w	r9,r9[0x0]
80005f6e:	16 98       	mov	r8,r11
80005f70:	fa e9 00 00 	st.d	sp[0],r8
80005f74:	ca e8       	rjmp	800060d0 <_vfprintf_r+0x74c>
80005f76:	ed b5 00 04 	bld	r5,0x4
80005f7a:	c1 71       	brne	80005fa8 <_vfprintf_r+0x624>
80005f7c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005f80:	40 3e       	lddsp	lr,sp[0xc]
80005f82:	58 0e       	cp.w	lr,0
80005f84:	c0 80       	breq	80005f94 <_vfprintf_r+0x610>
80005f86:	10 36       	cp.w	r6,r8
80005f88:	c6 94       	brge	8000605a <_vfprintf_r+0x6d6>
80005f8a:	fa cc f9 44 	sub	r12,sp,-1724
80005f8e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005f92:	c8 28       	rjmp	80006096 <_vfprintf_r+0x712>
80005f94:	ee ca ff ff 	sub	r10,r7,-1
80005f98:	10 37       	cp.w	r7,r8
80005f9a:	e0 84 00 81 	brge	8000609c <_vfprintf_r+0x718>
80005f9e:	fa cb f9 44 	sub	r11,sp,-1724
80005fa2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005fa6:	c7 78       	rjmp	80006094 <_vfprintf_r+0x710>
80005fa8:	ed b5 00 06 	bld	r5,0x6
80005fac:	c4 b1       	brne	80006042 <_vfprintf_r+0x6be>
80005fae:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005fb2:	40 3c       	lddsp	r12,sp[0xc]
80005fb4:	58 0c       	cp.w	r12,0
80005fb6:	c1 d0       	breq	80005ff0 <_vfprintf_r+0x66c>
80005fb8:	10 36       	cp.w	r6,r8
80005fba:	c0 64       	brge	80005fc6 <_vfprintf_r+0x642>
80005fbc:	fa cb f9 44 	sub	r11,sp,-1724
80005fc0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005fc4:	c1 f8       	rjmp	80006002 <_vfprintf_r+0x67e>
80005fc6:	fa c8 f9 50 	sub	r8,sp,-1712
80005fca:	1a d8       	st.w	--sp,r8
80005fcc:	fa c8 fa b8 	sub	r8,sp,-1352
80005fd0:	1a d8       	st.w	--sp,r8
80005fd2:	fa c8 fb b4 	sub	r8,sp,-1100
80005fd6:	1a d8       	st.w	--sp,r8
80005fd8:	fa c8 f9 40 	sub	r8,sp,-1728
80005fdc:	fa c9 ff b4 	sub	r9,sp,-76
80005fe0:	04 9a       	mov	r10,r2
80005fe2:	0c 9b       	mov	r11,r6
80005fe4:	08 9c       	mov	r12,r4
80005fe6:	f0 1f 00 ed 	mcall	80006398 <_vfprintf_r+0xa14>
80005fea:	2f dd       	sub	sp,-12
80005fec:	98 18       	ld.sh	r8,r12[0x2]
80005fee:	c2 68       	rjmp	8000603a <_vfprintf_r+0x6b6>
80005ff0:	ee ca ff ff 	sub	r10,r7,-1
80005ff4:	10 37       	cp.w	r7,r8
80005ff6:	c0 94       	brge	80006008 <_vfprintf_r+0x684>
80005ff8:	fa c9 f9 44 	sub	r9,sp,-1724
80005ffc:	14 97       	mov	r7,r10
80005ffe:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006002:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006006:	c1 a8       	rjmp	8000603a <_vfprintf_r+0x6b6>
80006008:	41 09       	lddsp	r9,sp[0x40]
8000600a:	59 f8       	cp.w	r8,31
8000600c:	e0 89 00 13 	brgt	80006032 <_vfprintf_r+0x6ae>
80006010:	f2 cb ff fc 	sub	r11,r9,-4
80006014:	51 0b       	stdsp	sp[0x40],r11
80006016:	72 09       	ld.w	r9,r9[0x0]
80006018:	fa c6 f9 44 	sub	r6,sp,-1724
8000601c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006020:	2f f8       	sub	r8,-1
80006022:	f7 49 fd 88 	st.w	r11[-632],r9
80006026:	fb 48 06 b4 	st.w	sp[1716],r8
8000602a:	14 97       	mov	r7,r10
8000602c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006030:	c0 58       	rjmp	8000603a <_vfprintf_r+0x6b6>
80006032:	92 18       	ld.sh	r8,r9[0x2]
80006034:	14 97       	mov	r7,r10
80006036:	2f c9       	sub	r9,-4
80006038:	51 09       	stdsp	sp[0x40],r9
8000603a:	50 18       	stdsp	sp[0x4],r8
8000603c:	bf 58       	asr	r8,0x1f
8000603e:	50 08       	stdsp	sp[0x0],r8
80006040:	c4 88       	rjmp	800060d0 <_vfprintf_r+0x74c>
80006042:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006046:	40 3c       	lddsp	r12,sp[0xc]
80006048:	58 0c       	cp.w	r12,0
8000604a:	c1 d0       	breq	80006084 <_vfprintf_r+0x700>
8000604c:	10 36       	cp.w	r6,r8
8000604e:	c0 64       	brge	8000605a <_vfprintf_r+0x6d6>
80006050:	fa cb f9 44 	sub	r11,sp,-1724
80006054:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006058:	c1 f8       	rjmp	80006096 <_vfprintf_r+0x712>
8000605a:	fa c8 f9 50 	sub	r8,sp,-1712
8000605e:	1a d8       	st.w	--sp,r8
80006060:	fa c8 fa b8 	sub	r8,sp,-1352
80006064:	0c 9b       	mov	r11,r6
80006066:	1a d8       	st.w	--sp,r8
80006068:	fa c8 fb b4 	sub	r8,sp,-1100
8000606c:	04 9a       	mov	r10,r2
8000606e:	1a d8       	st.w	--sp,r8
80006070:	08 9c       	mov	r12,r4
80006072:	fa c8 f9 40 	sub	r8,sp,-1728
80006076:	fa c9 ff b4 	sub	r9,sp,-76
8000607a:	f0 1f 00 c8 	mcall	80006398 <_vfprintf_r+0xa14>
8000607e:	2f dd       	sub	sp,-12
80006080:	78 0b       	ld.w	r11,r12[0x0]
80006082:	c2 48       	rjmp	800060ca <_vfprintf_r+0x746>
80006084:	ee ca ff ff 	sub	r10,r7,-1
80006088:	10 37       	cp.w	r7,r8
8000608a:	c0 94       	brge	8000609c <_vfprintf_r+0x718>
8000608c:	fa c9 f9 44 	sub	r9,sp,-1724
80006090:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006094:	14 97       	mov	r7,r10
80006096:	ec fb fd 88 	ld.w	r11,r6[-632]
8000609a:	c1 88       	rjmp	800060ca <_vfprintf_r+0x746>
8000609c:	41 09       	lddsp	r9,sp[0x40]
8000609e:	59 f8       	cp.w	r8,31
800060a0:	e0 89 00 11 	brgt	800060c2 <_vfprintf_r+0x73e>
800060a4:	f2 cb ff fc 	sub	r11,r9,-4
800060a8:	51 0b       	stdsp	sp[0x40],r11
800060aa:	fa c6 f9 44 	sub	r6,sp,-1724
800060ae:	72 0b       	ld.w	r11,r9[0x0]
800060b0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800060b4:	f3 4b fd 88 	st.w	r9[-632],r11
800060b8:	2f f8       	sub	r8,-1
800060ba:	14 97       	mov	r7,r10
800060bc:	fb 48 06 b4 	st.w	sp[1716],r8
800060c0:	c0 58       	rjmp	800060ca <_vfprintf_r+0x746>
800060c2:	72 0b       	ld.w	r11,r9[0x0]
800060c4:	14 97       	mov	r7,r10
800060c6:	2f c9       	sub	r9,-4
800060c8:	51 09       	stdsp	sp[0x40],r9
800060ca:	50 1b       	stdsp	sp[0x4],r11
800060cc:	bf 5b       	asr	r11,0x1f
800060ce:	50 0b       	stdsp	sp[0x0],r11
800060d0:	fa ea 00 00 	ld.d	r10,sp[0]
800060d4:	58 0a       	cp.w	r10,0
800060d6:	5c 2b       	cpc	r11
800060d8:	c0 e4       	brge	800060f4 <_vfprintf_r+0x770>
800060da:	30 08       	mov	r8,0
800060dc:	fa ea 00 00 	ld.d	r10,sp[0]
800060e0:	30 09       	mov	r9,0
800060e2:	f0 0a 01 0a 	sub	r10,r8,r10
800060e6:	f2 0b 01 4b 	sbc	r11,r9,r11
800060ea:	32 d8       	mov	r8,45
800060ec:	fa eb 00 00 	st.d	sp[0],r10
800060f0:	fb 68 06 bb 	st.b	sp[1723],r8
800060f4:	30 18       	mov	r8,1
800060f6:	e0 8f 07 12 	bral	80006f1a <_vfprintf_r+0x1596>
800060fa:	50 a7       	stdsp	sp[0x28],r7
800060fc:	50 80       	stdsp	sp[0x20],r0
800060fe:	0c 97       	mov	r7,r6
80006100:	04 94       	mov	r4,r2
80006102:	06 96       	mov	r6,r3
80006104:	02 92       	mov	r2,r1
80006106:	40 93       	lddsp	r3,sp[0x24]
80006108:	10 90       	mov	r0,r8
8000610a:	40 41       	lddsp	r1,sp[0x10]
8000610c:	0e 99       	mov	r9,r7
8000610e:	ed b5 00 03 	bld	r5,0x3
80006112:	c4 11       	brne	80006194 <_vfprintf_r+0x810>
80006114:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006118:	40 3a       	lddsp	r10,sp[0xc]
8000611a:	58 0a       	cp.w	r10,0
8000611c:	c1 90       	breq	8000614e <_vfprintf_r+0x7ca>
8000611e:	10 36       	cp.w	r6,r8
80006120:	c6 45       	brlt	800061e8 <_vfprintf_r+0x864>
80006122:	fa c8 f9 50 	sub	r8,sp,-1712
80006126:	1a d8       	st.w	--sp,r8
80006128:	fa c8 fa b8 	sub	r8,sp,-1352
8000612c:	1a d8       	st.w	--sp,r8
8000612e:	fa c8 fb b4 	sub	r8,sp,-1100
80006132:	0c 9b       	mov	r11,r6
80006134:	1a d8       	st.w	--sp,r8
80006136:	04 9a       	mov	r10,r2
80006138:	fa c8 f9 40 	sub	r8,sp,-1728
8000613c:	fa c9 ff b4 	sub	r9,sp,-76
80006140:	08 9c       	mov	r12,r4
80006142:	f0 1f 00 96 	mcall	80006398 <_vfprintf_r+0xa14>
80006146:	2f dd       	sub	sp,-12
80006148:	78 16       	ld.w	r6,r12[0x4]
8000614a:	50 76       	stdsp	sp[0x1c],r6
8000614c:	c4 88       	rjmp	800061dc <_vfprintf_r+0x858>
8000614e:	2f f7       	sub	r7,-1
80006150:	10 39       	cp.w	r9,r8
80006152:	c0 c4       	brge	8000616a <_vfprintf_r+0x7e6>
80006154:	fa ce f9 44 	sub	lr,sp,-1724
80006158:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000615c:	ec fc fd 8c 	ld.w	r12,r6[-628]
80006160:	50 7c       	stdsp	sp[0x1c],r12
80006162:	ec f6 fd 88 	ld.w	r6,r6[-632]
80006166:	50 56       	stdsp	sp[0x14],r6
80006168:	c6 68       	rjmp	80006234 <_vfprintf_r+0x8b0>
8000616a:	41 09       	lddsp	r9,sp[0x40]
8000616c:	59 f8       	cp.w	r8,31
8000616e:	e0 89 00 10 	brgt	8000618e <_vfprintf_r+0x80a>
80006172:	f2 ca ff f8 	sub	r10,r9,-8
80006176:	72 1b       	ld.w	r11,r9[0x4]
80006178:	51 0a       	stdsp	sp[0x40],r10
8000617a:	72 09       	ld.w	r9,r9[0x0]
8000617c:	fa ca f9 44 	sub	r10,sp,-1724
80006180:	50 7b       	stdsp	sp[0x1c],r11
80006182:	50 59       	stdsp	sp[0x14],r9
80006184:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006188:	40 5b       	lddsp	r11,sp[0x14]
8000618a:	40 7a       	lddsp	r10,sp[0x1c]
8000618c:	c4 78       	rjmp	8000621a <_vfprintf_r+0x896>
8000618e:	72 18       	ld.w	r8,r9[0x4]
80006190:	50 78       	stdsp	sp[0x1c],r8
80006192:	c4 c8       	rjmp	8000622a <_vfprintf_r+0x8a6>
80006194:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006198:	40 3e       	lddsp	lr,sp[0xc]
8000619a:	58 0e       	cp.w	lr,0
8000619c:	c2 30       	breq	800061e2 <_vfprintf_r+0x85e>
8000619e:	10 36       	cp.w	r6,r8
800061a0:	c0 94       	brge	800061b2 <_vfprintf_r+0x82e>
800061a2:	fa cc f9 44 	sub	r12,sp,-1724
800061a6:	f8 06 00 36 	add	r6,r12,r6<<0x3
800061aa:	ec fb fd 8c 	ld.w	r11,r6[-628]
800061ae:	50 7b       	stdsp	sp[0x1c],r11
800061b0:	cd 9b       	rjmp	80006162 <_vfprintf_r+0x7de>
800061b2:	fa c8 f9 50 	sub	r8,sp,-1712
800061b6:	1a d8       	st.w	--sp,r8
800061b8:	fa c8 fa b8 	sub	r8,sp,-1352
800061bc:	04 9a       	mov	r10,r2
800061be:	1a d8       	st.w	--sp,r8
800061c0:	fa c8 fb b4 	sub	r8,sp,-1100
800061c4:	0c 9b       	mov	r11,r6
800061c6:	1a d8       	st.w	--sp,r8
800061c8:	08 9c       	mov	r12,r4
800061ca:	fa c8 f9 40 	sub	r8,sp,-1728
800061ce:	fa c9 ff b4 	sub	r9,sp,-76
800061d2:	f0 1f 00 72 	mcall	80006398 <_vfprintf_r+0xa14>
800061d6:	2f dd       	sub	sp,-12
800061d8:	78 1a       	ld.w	r10,r12[0x4]
800061da:	50 7a       	stdsp	sp[0x1c],r10
800061dc:	78 0c       	ld.w	r12,r12[0x0]
800061de:	50 5c       	stdsp	sp[0x14],r12
800061e0:	c2 a8       	rjmp	80006234 <_vfprintf_r+0x8b0>
800061e2:	2f f7       	sub	r7,-1
800061e4:	10 39       	cp.w	r9,r8
800061e6:	c0 94       	brge	800061f8 <_vfprintf_r+0x874>
800061e8:	fa c9 f9 44 	sub	r9,sp,-1724
800061ec:	f2 06 00 36 	add	r6,r9,r6<<0x3
800061f0:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800061f4:	50 78       	stdsp	sp[0x1c],r8
800061f6:	cb 6b       	rjmp	80006162 <_vfprintf_r+0x7de>
800061f8:	41 09       	lddsp	r9,sp[0x40]
800061fa:	59 f8       	cp.w	r8,31
800061fc:	e0 89 00 15 	brgt	80006226 <_vfprintf_r+0x8a2>
80006200:	f2 ca ff f8 	sub	r10,r9,-8
80006204:	72 16       	ld.w	r6,r9[0x4]
80006206:	72 09       	ld.w	r9,r9[0x0]
80006208:	51 0a       	stdsp	sp[0x40],r10
8000620a:	50 59       	stdsp	sp[0x14],r9
8000620c:	fa ce f9 44 	sub	lr,sp,-1724
80006210:	50 76       	stdsp	sp[0x1c],r6
80006212:	fc 08 00 39 	add	r9,lr,r8<<0x3
80006216:	40 5b       	lddsp	r11,sp[0x14]
80006218:	0c 9a       	mov	r10,r6
8000621a:	f2 eb fd 88 	st.d	r9[-632],r10
8000621e:	2f f8       	sub	r8,-1
80006220:	fb 48 06 b4 	st.w	sp[1716],r8
80006224:	c0 88       	rjmp	80006234 <_vfprintf_r+0x8b0>
80006226:	72 1c       	ld.w	r12,r9[0x4]
80006228:	50 7c       	stdsp	sp[0x1c],r12
8000622a:	f2 c8 ff f8 	sub	r8,r9,-8
8000622e:	51 08       	stdsp	sp[0x40],r8
80006230:	72 09       	ld.w	r9,r9[0x0]
80006232:	50 59       	stdsp	sp[0x14],r9
80006234:	40 5b       	lddsp	r11,sp[0x14]
80006236:	40 7a       	lddsp	r10,sp[0x1c]
80006238:	f0 1f 00 59 	mcall	8000639c <_vfprintf_r+0xa18>
8000623c:	18 96       	mov	r6,r12
8000623e:	c1 50       	breq	80006268 <_vfprintf_r+0x8e4>
80006240:	30 08       	mov	r8,0
80006242:	30 09       	mov	r9,0
80006244:	40 5b       	lddsp	r11,sp[0x14]
80006246:	40 7a       	lddsp	r10,sp[0x1c]
80006248:	f0 1f 00 56 	mcall	800063a0 <_vfprintf_r+0xa1c>
8000624c:	c0 40       	breq	80006254 <_vfprintf_r+0x8d0>
8000624e:	32 d8       	mov	r8,45
80006250:	fb 68 06 bb 	st.b	sp[1723],r8
80006254:	4d 48       	lddpc	r8,800063a4 <_vfprintf_r+0xa20>
80006256:	4d 56       	lddpc	r6,800063a8 <_vfprintf_r+0xa24>
80006258:	a7 d5       	cbr	r5,0x7
8000625a:	e0 40 00 47 	cp.w	r0,71
8000625e:	f0 06 17 a0 	movle	r6,r8
80006262:	30 32       	mov	r2,3
80006264:	e0 8f 06 e8 	bral	80007034 <_vfprintf_r+0x16b0>
80006268:	40 5b       	lddsp	r11,sp[0x14]
8000626a:	40 7a       	lddsp	r10,sp[0x1c]
8000626c:	f0 1f 00 50 	mcall	800063ac <_vfprintf_r+0xa28>
80006270:	c0 c0       	breq	80006288 <_vfprintf_r+0x904>
80006272:	50 26       	stdsp	sp[0x8],r6
80006274:	4c f8       	lddpc	r8,800063b0 <_vfprintf_r+0xa2c>
80006276:	4d 06       	lddpc	r6,800063b4 <_vfprintf_r+0xa30>
80006278:	a7 d5       	cbr	r5,0x7
8000627a:	e0 40 00 47 	cp.w	r0,71
8000627e:	f0 06 17 a0 	movle	r6,r8
80006282:	30 32       	mov	r2,3
80006284:	e0 8f 06 de 	bral	80007040 <_vfprintf_r+0x16bc>
80006288:	40 2a       	lddsp	r10,sp[0x8]
8000628a:	5b fa       	cp.w	r10,-1
8000628c:	c0 41       	brne	80006294 <_vfprintf_r+0x910>
8000628e:	30 69       	mov	r9,6
80006290:	50 29       	stdsp	sp[0x8],r9
80006292:	c1 18       	rjmp	800062b4 <_vfprintf_r+0x930>
80006294:	e0 40 00 47 	cp.w	r0,71
80006298:	5f 09       	sreq	r9
8000629a:	e0 40 00 67 	cp.w	r0,103
8000629e:	5f 08       	sreq	r8
800062a0:	f3 e8 10 08 	or	r8,r9,r8
800062a4:	f8 08 18 00 	cp.b	r8,r12
800062a8:	c0 60       	breq	800062b4 <_vfprintf_r+0x930>
800062aa:	40 28       	lddsp	r8,sp[0x8]
800062ac:	58 08       	cp.w	r8,0
800062ae:	f9 b8 00 01 	moveq	r8,1
800062b2:	50 28       	stdsp	sp[0x8],r8
800062b4:	40 78       	lddsp	r8,sp[0x1c]
800062b6:	40 59       	lddsp	r9,sp[0x14]
800062b8:	fa e9 06 94 	st.d	sp[1684],r8
800062bc:	a9 a5       	sbr	r5,0x8
800062be:	fa f8 06 94 	ld.w	r8,sp[1684]
800062c2:	58 08       	cp.w	r8,0
800062c4:	c0 65       	brlt	800062d0 <_vfprintf_r+0x94c>
800062c6:	40 5e       	lddsp	lr,sp[0x14]
800062c8:	30 0c       	mov	r12,0
800062ca:	50 6e       	stdsp	sp[0x18],lr
800062cc:	50 9c       	stdsp	sp[0x24],r12
800062ce:	c0 78       	rjmp	800062dc <_vfprintf_r+0x958>
800062d0:	40 5b       	lddsp	r11,sp[0x14]
800062d2:	32 da       	mov	r10,45
800062d4:	ee 1b 80 00 	eorh	r11,0x8000
800062d8:	50 9a       	stdsp	sp[0x24],r10
800062da:	50 6b       	stdsp	sp[0x18],r11
800062dc:	e0 40 00 46 	cp.w	r0,70
800062e0:	5f 09       	sreq	r9
800062e2:	e0 40 00 66 	cp.w	r0,102
800062e6:	5f 08       	sreq	r8
800062e8:	f3 e8 10 08 	or	r8,r9,r8
800062ec:	50 48       	stdsp	sp[0x10],r8
800062ee:	c0 40       	breq	800062f6 <_vfprintf_r+0x972>
800062f0:	40 22       	lddsp	r2,sp[0x8]
800062f2:	30 39       	mov	r9,3
800062f4:	c1 08       	rjmp	80006314 <_vfprintf_r+0x990>
800062f6:	e0 40 00 45 	cp.w	r0,69
800062fa:	5f 09       	sreq	r9
800062fc:	e0 40 00 65 	cp.w	r0,101
80006300:	5f 08       	sreq	r8
80006302:	40 22       	lddsp	r2,sp[0x8]
80006304:	10 49       	or	r9,r8
80006306:	2f f2       	sub	r2,-1
80006308:	40 46       	lddsp	r6,sp[0x10]
8000630a:	ec 09 18 00 	cp.b	r9,r6
8000630e:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80006312:	30 29       	mov	r9,2
80006314:	fa c8 f9 5c 	sub	r8,sp,-1700
80006318:	1a d8       	st.w	--sp,r8
8000631a:	fa c8 f9 54 	sub	r8,sp,-1708
8000631e:	1a d8       	st.w	--sp,r8
80006320:	fa c8 f9 4c 	sub	r8,sp,-1716
80006324:	08 9c       	mov	r12,r4
80006326:	1a d8       	st.w	--sp,r8
80006328:	04 98       	mov	r8,r2
8000632a:	40 9b       	lddsp	r11,sp[0x24]
8000632c:	40 aa       	lddsp	r10,sp[0x28]
8000632e:	f0 1f 00 23 	mcall	800063b8 <_vfprintf_r+0xa34>
80006332:	e0 40 00 47 	cp.w	r0,71
80006336:	5f 19       	srne	r9
80006338:	e0 40 00 67 	cp.w	r0,103
8000633c:	5f 18       	srne	r8
8000633e:	18 96       	mov	r6,r12
80006340:	2f dd       	sub	sp,-12
80006342:	f3 e8 00 08 	and	r8,r9,r8
80006346:	c0 41       	brne	8000634e <_vfprintf_r+0x9ca>
80006348:	ed b5 00 00 	bld	r5,0x0
8000634c:	c4 41       	brne	800063d4 <_vfprintf_r+0xa50>
8000634e:	ec 02 00 0e 	add	lr,r6,r2
80006352:	50 3e       	stdsp	sp[0xc],lr
80006354:	40 4c       	lddsp	r12,sp[0x10]
80006356:	58 0c       	cp.w	r12,0
80006358:	c1 50       	breq	80006382 <_vfprintf_r+0x9fe>
8000635a:	0d 89       	ld.ub	r9,r6[0x0]
8000635c:	33 08       	mov	r8,48
8000635e:	f0 09 18 00 	cp.b	r9,r8
80006362:	c0 b1       	brne	80006378 <_vfprintf_r+0x9f4>
80006364:	30 08       	mov	r8,0
80006366:	30 09       	mov	r9,0
80006368:	40 6b       	lddsp	r11,sp[0x18]
8000636a:	40 7a       	lddsp	r10,sp[0x1c]
8000636c:	f0 1f 00 14 	mcall	800063bc <_vfprintf_r+0xa38>
80006370:	fb b2 00 01 	rsubeq	r2,1
80006374:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80006378:	40 3b       	lddsp	r11,sp[0xc]
8000637a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000637e:	10 0b       	add	r11,r8
80006380:	50 3b       	stdsp	sp[0xc],r11
80006382:	40 6b       	lddsp	r11,sp[0x18]
80006384:	30 08       	mov	r8,0
80006386:	30 09       	mov	r9,0
80006388:	40 7a       	lddsp	r10,sp[0x1c]
8000638a:	f0 1f 00 0d 	mcall	800063bc <_vfprintf_r+0xa38>
8000638e:	c1 d0       	breq	800063c8 <_vfprintf_r+0xa44>
80006390:	40 3a       	lddsp	r10,sp[0xc]
80006392:	fb 4a 06 a4 	st.w	sp[1700],r10
80006396:	c1 98       	rjmp	800063c8 <_vfprintf_r+0xa44>
80006398:	80 00       	ld.sh	r0,r0[0x0]
8000639a:	56 40       	stdsp	sp[0x190],r0
8000639c:	80 00       	ld.sh	r0,r0[0x0]
8000639e:	98 a0       	ld.uh	r0,r12[0x4]
800063a0:	80 00       	ld.sh	r0,r0[0x0]
800063a2:	a1 d8       	cbr	r8,0x1
800063a4:	80 00       	ld.sh	r0,r0[0x0]
800063a6:	af b0       	sbr	r0,0xf
800063a8:	80 00       	ld.sh	r0,r0[0x0]
800063aa:	af b4       	sbr	r4,0xf
800063ac:	80 00       	ld.sh	r0,r0[0x0]
800063ae:	98 ca       	ld.uh	r10,r12[0x8]
800063b0:	80 00       	ld.sh	r0,r0[0x0]
800063b2:	af b8       	sbr	r8,0xf
800063b4:	80 00       	ld.sh	r0,r0[0x0]
800063b6:	af bc       	sbr	r12,0xf
800063b8:	80 00       	ld.sh	r0,r0[0x0]
800063ba:	7c ac       	ld.w	r12,lr[0x28]
800063bc:	80 00       	ld.sh	r0,r0[0x0]
800063be:	a1 4a       	asr	r10,0x0
800063c0:	10 c9       	st.b	r8++,r9
800063c2:	fb 48 06 a4 	st.w	sp[1700],r8
800063c6:	c0 28       	rjmp	800063ca <_vfprintf_r+0xa46>
800063c8:	33 09       	mov	r9,48
800063ca:	fa f8 06 a4 	ld.w	r8,sp[1700]
800063ce:	40 3e       	lddsp	lr,sp[0xc]
800063d0:	1c 38       	cp.w	r8,lr
800063d2:	cf 73       	brcs	800063c0 <_vfprintf_r+0xa3c>
800063d4:	e0 40 00 47 	cp.w	r0,71
800063d8:	5f 09       	sreq	r9
800063da:	e0 40 00 67 	cp.w	r0,103
800063de:	5f 08       	sreq	r8
800063e0:	f3 e8 10 08 	or	r8,r9,r8
800063e4:	fa f9 06 a4 	ld.w	r9,sp[1700]
800063e8:	0c 19       	sub	r9,r6
800063ea:	50 69       	stdsp	sp[0x18],r9
800063ec:	58 08       	cp.w	r8,0
800063ee:	c0 b0       	breq	80006404 <_vfprintf_r+0xa80>
800063f0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800063f4:	5b d8       	cp.w	r8,-3
800063f6:	c0 55       	brlt	80006400 <_vfprintf_r+0xa7c>
800063f8:	40 2c       	lddsp	r12,sp[0x8]
800063fa:	18 38       	cp.w	r8,r12
800063fc:	e0 8a 00 6a 	brle	800064d0 <_vfprintf_r+0xb4c>
80006400:	20 20       	sub	r0,2
80006402:	c0 58       	rjmp	8000640c <_vfprintf_r+0xa88>
80006404:	e0 40 00 65 	cp.w	r0,101
80006408:	e0 89 00 46 	brgt	80006494 <_vfprintf_r+0xb10>
8000640c:	fa fb 06 ac 	ld.w	r11,sp[1708]
80006410:	fb 60 06 9c 	st.b	sp[1692],r0
80006414:	20 1b       	sub	r11,1
80006416:	fb 4b 06 ac 	st.w	sp[1708],r11
8000641a:	c0 47       	brpl	80006422 <_vfprintf_r+0xa9e>
8000641c:	5c 3b       	neg	r11
8000641e:	32 d8       	mov	r8,45
80006420:	c0 28       	rjmp	80006424 <_vfprintf_r+0xaa0>
80006422:	32 b8       	mov	r8,43
80006424:	fb 68 06 9d 	st.b	sp[1693],r8
80006428:	58 9b       	cp.w	r11,9
8000642a:	e0 8a 00 1d 	brle	80006464 <_vfprintf_r+0xae0>
8000642e:	fa c9 fa 35 	sub	r9,sp,-1483
80006432:	30 aa       	mov	r10,10
80006434:	12 98       	mov	r8,r9
80006436:	0e 9c       	mov	r12,r7
80006438:	0c 92       	mov	r2,r6
8000643a:	f6 0a 0c 06 	divs	r6,r11,r10
8000643e:	0e 9b       	mov	r11,r7
80006440:	2d 0b       	sub	r11,-48
80006442:	10 fb       	st.b	--r8,r11
80006444:	0c 9b       	mov	r11,r6
80006446:	58 96       	cp.w	r6,9
80006448:	fe 99 ff f9 	brgt	8000643a <_vfprintf_r+0xab6>
8000644c:	2d 0b       	sub	r11,-48
8000644e:	18 97       	mov	r7,r12
80006450:	04 96       	mov	r6,r2
80006452:	10 fb       	st.b	--r8,r11
80006454:	fa ca f9 62 	sub	r10,sp,-1694
80006458:	c0 38       	rjmp	8000645e <_vfprintf_r+0xada>
8000645a:	11 3b       	ld.ub	r11,r8++
8000645c:	14 cb       	st.b	r10++,r11
8000645e:	12 38       	cp.w	r8,r9
80006460:	cf d3       	brcs	8000645a <_vfprintf_r+0xad6>
80006462:	c0 98       	rjmp	80006474 <_vfprintf_r+0xaf0>
80006464:	2d 0b       	sub	r11,-48
80006466:	33 08       	mov	r8,48
80006468:	fb 6b 06 9f 	st.b	sp[1695],r11
8000646c:	fb 68 06 9e 	st.b	sp[1694],r8
80006470:	fa ca f9 60 	sub	r10,sp,-1696
80006474:	fa c8 f9 64 	sub	r8,sp,-1692
80006478:	f4 08 01 08 	sub	r8,r10,r8
8000647c:	50 e8       	stdsp	sp[0x38],r8
8000647e:	10 92       	mov	r2,r8
80006480:	40 6b       	lddsp	r11,sp[0x18]
80006482:	16 02       	add	r2,r11
80006484:	58 1b       	cp.w	r11,1
80006486:	e0 89 00 05 	brgt	80006490 <_vfprintf_r+0xb0c>
8000648a:	ed b5 00 00 	bld	r5,0x0
8000648e:	c3 51       	brne	800064f8 <_vfprintf_r+0xb74>
80006490:	2f f2       	sub	r2,-1
80006492:	c3 38       	rjmp	800064f8 <_vfprintf_r+0xb74>
80006494:	e0 40 00 66 	cp.w	r0,102
80006498:	c1 c1       	brne	800064d0 <_vfprintf_r+0xb4c>
8000649a:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000649e:	58 02       	cp.w	r2,0
800064a0:	e0 8a 00 0c 	brle	800064b8 <_vfprintf_r+0xb34>
800064a4:	40 2a       	lddsp	r10,sp[0x8]
800064a6:	58 0a       	cp.w	r10,0
800064a8:	c0 41       	brne	800064b0 <_vfprintf_r+0xb2c>
800064aa:	ed b5 00 00 	bld	r5,0x0
800064ae:	c2 51       	brne	800064f8 <_vfprintf_r+0xb74>
800064b0:	2f f2       	sub	r2,-1
800064b2:	40 29       	lddsp	r9,sp[0x8]
800064b4:	12 02       	add	r2,r9
800064b6:	c0 b8       	rjmp	800064cc <_vfprintf_r+0xb48>
800064b8:	40 28       	lddsp	r8,sp[0x8]
800064ba:	58 08       	cp.w	r8,0
800064bc:	c0 61       	brne	800064c8 <_vfprintf_r+0xb44>
800064be:	ed b5 00 00 	bld	r5,0x0
800064c2:	c0 30       	breq	800064c8 <_vfprintf_r+0xb44>
800064c4:	30 12       	mov	r2,1
800064c6:	c1 98       	rjmp	800064f8 <_vfprintf_r+0xb74>
800064c8:	40 22       	lddsp	r2,sp[0x8]
800064ca:	2f e2       	sub	r2,-2
800064cc:	36 60       	mov	r0,102
800064ce:	c1 58       	rjmp	800064f8 <_vfprintf_r+0xb74>
800064d0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800064d4:	40 6e       	lddsp	lr,sp[0x18]
800064d6:	1c 32       	cp.w	r2,lr
800064d8:	c0 65       	brlt	800064e4 <_vfprintf_r+0xb60>
800064da:	ed b5 00 00 	bld	r5,0x0
800064de:	f7 b2 00 ff 	subeq	r2,-1
800064e2:	c0 a8       	rjmp	800064f6 <_vfprintf_r+0xb72>
800064e4:	e4 08 11 02 	rsub	r8,r2,2
800064e8:	40 6c       	lddsp	r12,sp[0x18]
800064ea:	58 02       	cp.w	r2,0
800064ec:	f0 02 17 a0 	movle	r2,r8
800064f0:	f9 b2 09 01 	movgt	r2,1
800064f4:	18 02       	add	r2,r12
800064f6:	36 70       	mov	r0,103
800064f8:	40 9b       	lddsp	r11,sp[0x24]
800064fa:	58 0b       	cp.w	r11,0
800064fc:	e0 80 05 9c 	breq	80007034 <_vfprintf_r+0x16b0>
80006500:	32 d8       	mov	r8,45
80006502:	fb 68 06 bb 	st.b	sp[1723],r8
80006506:	e0 8f 05 9b 	bral	8000703c <_vfprintf_r+0x16b8>
8000650a:	50 a7       	stdsp	sp[0x28],r7
8000650c:	04 94       	mov	r4,r2
8000650e:	0c 97       	mov	r7,r6
80006510:	02 92       	mov	r2,r1
80006512:	06 96       	mov	r6,r3
80006514:	40 41       	lddsp	r1,sp[0x10]
80006516:	40 93       	lddsp	r3,sp[0x24]
80006518:	0e 99       	mov	r9,r7
8000651a:	ed b5 00 05 	bld	r5,0x5
8000651e:	c4 81       	brne	800065ae <_vfprintf_r+0xc2a>
80006520:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006524:	40 3e       	lddsp	lr,sp[0xc]
80006526:	58 0e       	cp.w	lr,0
80006528:	c1 d0       	breq	80006562 <_vfprintf_r+0xbde>
8000652a:	10 36       	cp.w	r6,r8
8000652c:	c0 64       	brge	80006538 <_vfprintf_r+0xbb4>
8000652e:	fa cc f9 44 	sub	r12,sp,-1724
80006532:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006536:	c1 d8       	rjmp	80006570 <_vfprintf_r+0xbec>
80006538:	fa c8 f9 50 	sub	r8,sp,-1712
8000653c:	1a d8       	st.w	--sp,r8
8000653e:	fa c8 fa b8 	sub	r8,sp,-1352
80006542:	04 9a       	mov	r10,r2
80006544:	1a d8       	st.w	--sp,r8
80006546:	fa c8 fb b4 	sub	r8,sp,-1100
8000654a:	0c 9b       	mov	r11,r6
8000654c:	1a d8       	st.w	--sp,r8
8000654e:	08 9c       	mov	r12,r4
80006550:	fa c8 f9 40 	sub	r8,sp,-1728
80006554:	fa c9 ff b4 	sub	r9,sp,-76
80006558:	f0 1f 01 5f 	mcall	80006ad4 <_vfprintf_r+0x1150>
8000655c:	2f dd       	sub	sp,-12
8000655e:	78 0a       	ld.w	r10,r12[0x0]
80006560:	c2 08       	rjmp	800065a0 <_vfprintf_r+0xc1c>
80006562:	2f f7       	sub	r7,-1
80006564:	10 39       	cp.w	r9,r8
80006566:	c0 84       	brge	80006576 <_vfprintf_r+0xbf2>
80006568:	fa cb f9 44 	sub	r11,sp,-1724
8000656c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006570:	ec fa fd 88 	ld.w	r10,r6[-632]
80006574:	c1 68       	rjmp	800065a0 <_vfprintf_r+0xc1c>
80006576:	41 09       	lddsp	r9,sp[0x40]
80006578:	59 f8       	cp.w	r8,31
8000657a:	e0 89 00 10 	brgt	8000659a <_vfprintf_r+0xc16>
8000657e:	f2 ca ff fc 	sub	r10,r9,-4
80006582:	51 0a       	stdsp	sp[0x40],r10
80006584:	fa c6 f9 44 	sub	r6,sp,-1724
80006588:	72 0a       	ld.w	r10,r9[0x0]
8000658a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000658e:	f3 4a fd 88 	st.w	r9[-632],r10
80006592:	2f f8       	sub	r8,-1
80006594:	fb 48 06 b4 	st.w	sp[1716],r8
80006598:	c0 48       	rjmp	800065a0 <_vfprintf_r+0xc1c>
8000659a:	72 0a       	ld.w	r10,r9[0x0]
8000659c:	2f c9       	sub	r9,-4
8000659e:	51 09       	stdsp	sp[0x40],r9
800065a0:	40 be       	lddsp	lr,sp[0x2c]
800065a2:	1c 98       	mov	r8,lr
800065a4:	95 1e       	st.w	r10[0x4],lr
800065a6:	bf 58       	asr	r8,0x1f
800065a8:	95 08       	st.w	r10[0x0],r8
800065aa:	fe 9f fa 79 	bral	80005a9c <_vfprintf_r+0x118>
800065ae:	ed b5 00 04 	bld	r5,0x4
800065b2:	c4 80       	breq	80006642 <_vfprintf_r+0xcbe>
800065b4:	e2 15 00 40 	andl	r5,0x40,COH
800065b8:	c4 50       	breq	80006642 <_vfprintf_r+0xcbe>
800065ba:	fa f8 06 b4 	ld.w	r8,sp[1716]
800065be:	40 3c       	lddsp	r12,sp[0xc]
800065c0:	58 0c       	cp.w	r12,0
800065c2:	c1 d0       	breq	800065fc <_vfprintf_r+0xc78>
800065c4:	10 36       	cp.w	r6,r8
800065c6:	c0 64       	brge	800065d2 <_vfprintf_r+0xc4e>
800065c8:	fa cb f9 44 	sub	r11,sp,-1724
800065cc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800065d0:	c1 d8       	rjmp	8000660a <_vfprintf_r+0xc86>
800065d2:	fa c8 f9 50 	sub	r8,sp,-1712
800065d6:	1a d8       	st.w	--sp,r8
800065d8:	fa c8 fa b8 	sub	r8,sp,-1352
800065dc:	04 9a       	mov	r10,r2
800065de:	1a d8       	st.w	--sp,r8
800065e0:	fa c8 fb b4 	sub	r8,sp,-1100
800065e4:	0c 9b       	mov	r11,r6
800065e6:	1a d8       	st.w	--sp,r8
800065e8:	08 9c       	mov	r12,r4
800065ea:	fa c8 f9 40 	sub	r8,sp,-1728
800065ee:	fa c9 ff b4 	sub	r9,sp,-76
800065f2:	f0 1f 01 39 	mcall	80006ad4 <_vfprintf_r+0x1150>
800065f6:	2f dd       	sub	sp,-12
800065f8:	78 0a       	ld.w	r10,r12[0x0]
800065fa:	c2 08       	rjmp	8000663a <_vfprintf_r+0xcb6>
800065fc:	2f f7       	sub	r7,-1
800065fe:	10 39       	cp.w	r9,r8
80006600:	c0 84       	brge	80006610 <_vfprintf_r+0xc8c>
80006602:	fa ca f9 44 	sub	r10,sp,-1724
80006606:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000660a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000660e:	c1 68       	rjmp	8000663a <_vfprintf_r+0xcb6>
80006610:	41 09       	lddsp	r9,sp[0x40]
80006612:	59 f8       	cp.w	r8,31
80006614:	e0 89 00 10 	brgt	80006634 <_vfprintf_r+0xcb0>
80006618:	f2 ca ff fc 	sub	r10,r9,-4
8000661c:	51 0a       	stdsp	sp[0x40],r10
8000661e:	fa c6 f9 44 	sub	r6,sp,-1724
80006622:	72 0a       	ld.w	r10,r9[0x0]
80006624:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006628:	f3 4a fd 88 	st.w	r9[-632],r10
8000662c:	2f f8       	sub	r8,-1
8000662e:	fb 48 06 b4 	st.w	sp[1716],r8
80006632:	c0 48       	rjmp	8000663a <_vfprintf_r+0xcb6>
80006634:	72 0a       	ld.w	r10,r9[0x0]
80006636:	2f c9       	sub	r9,-4
80006638:	51 09       	stdsp	sp[0x40],r9
8000663a:	40 be       	lddsp	lr,sp[0x2c]
8000663c:	b4 0e       	st.h	r10[0x0],lr
8000663e:	fe 9f fa 2f 	bral	80005a9c <_vfprintf_r+0x118>
80006642:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006646:	40 3c       	lddsp	r12,sp[0xc]
80006648:	58 0c       	cp.w	r12,0
8000664a:	c1 d0       	breq	80006684 <_vfprintf_r+0xd00>
8000664c:	10 36       	cp.w	r6,r8
8000664e:	c0 64       	brge	8000665a <_vfprintf_r+0xcd6>
80006650:	fa cb f9 44 	sub	r11,sp,-1724
80006654:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006658:	c1 d8       	rjmp	80006692 <_vfprintf_r+0xd0e>
8000665a:	fa c8 f9 50 	sub	r8,sp,-1712
8000665e:	1a d8       	st.w	--sp,r8
80006660:	fa c8 fa b8 	sub	r8,sp,-1352
80006664:	04 9a       	mov	r10,r2
80006666:	1a d8       	st.w	--sp,r8
80006668:	fa c8 fb b4 	sub	r8,sp,-1100
8000666c:	0c 9b       	mov	r11,r6
8000666e:	1a d8       	st.w	--sp,r8
80006670:	08 9c       	mov	r12,r4
80006672:	fa c8 f9 40 	sub	r8,sp,-1728
80006676:	fa c9 ff b4 	sub	r9,sp,-76
8000667a:	f0 1f 01 17 	mcall	80006ad4 <_vfprintf_r+0x1150>
8000667e:	2f dd       	sub	sp,-12
80006680:	78 0a       	ld.w	r10,r12[0x0]
80006682:	c2 08       	rjmp	800066c2 <_vfprintf_r+0xd3e>
80006684:	2f f7       	sub	r7,-1
80006686:	10 39       	cp.w	r9,r8
80006688:	c0 84       	brge	80006698 <_vfprintf_r+0xd14>
8000668a:	fa ca f9 44 	sub	r10,sp,-1724
8000668e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006692:	ec fa fd 88 	ld.w	r10,r6[-632]
80006696:	c1 68       	rjmp	800066c2 <_vfprintf_r+0xd3e>
80006698:	41 09       	lddsp	r9,sp[0x40]
8000669a:	59 f8       	cp.w	r8,31
8000669c:	e0 89 00 10 	brgt	800066bc <_vfprintf_r+0xd38>
800066a0:	f2 ca ff fc 	sub	r10,r9,-4
800066a4:	51 0a       	stdsp	sp[0x40],r10
800066a6:	fa c6 f9 44 	sub	r6,sp,-1724
800066aa:	72 0a       	ld.w	r10,r9[0x0]
800066ac:	ec 08 00 39 	add	r9,r6,r8<<0x3
800066b0:	f3 4a fd 88 	st.w	r9[-632],r10
800066b4:	2f f8       	sub	r8,-1
800066b6:	fb 48 06 b4 	st.w	sp[1716],r8
800066ba:	c0 48       	rjmp	800066c2 <_vfprintf_r+0xd3e>
800066bc:	72 0a       	ld.w	r10,r9[0x0]
800066be:	2f c9       	sub	r9,-4
800066c0:	51 09       	stdsp	sp[0x40],r9
800066c2:	40 be       	lddsp	lr,sp[0x2c]
800066c4:	95 0e       	st.w	r10[0x0],lr
800066c6:	fe 9f f9 eb 	bral	80005a9c <_vfprintf_r+0x118>
800066ca:	50 a7       	stdsp	sp[0x28],r7
800066cc:	50 80       	stdsp	sp[0x20],r0
800066ce:	0c 97       	mov	r7,r6
800066d0:	04 94       	mov	r4,r2
800066d2:	06 96       	mov	r6,r3
800066d4:	02 92       	mov	r2,r1
800066d6:	40 93       	lddsp	r3,sp[0x24]
800066d8:	10 90       	mov	r0,r8
800066da:	40 41       	lddsp	r1,sp[0x10]
800066dc:	a5 a5       	sbr	r5,0x4
800066de:	c0 a8       	rjmp	800066f2 <_vfprintf_r+0xd6e>
800066e0:	50 a7       	stdsp	sp[0x28],r7
800066e2:	50 80       	stdsp	sp[0x20],r0
800066e4:	0c 97       	mov	r7,r6
800066e6:	04 94       	mov	r4,r2
800066e8:	06 96       	mov	r6,r3
800066ea:	02 92       	mov	r2,r1
800066ec:	40 93       	lddsp	r3,sp[0x24]
800066ee:	10 90       	mov	r0,r8
800066f0:	40 41       	lddsp	r1,sp[0x10]
800066f2:	ed b5 00 05 	bld	r5,0x5
800066f6:	c5 d1       	brne	800067b0 <_vfprintf_r+0xe2c>
800066f8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800066fc:	40 3c       	lddsp	r12,sp[0xc]
800066fe:	58 0c       	cp.w	r12,0
80006700:	c2 60       	breq	8000674c <_vfprintf_r+0xdc8>
80006702:	10 36       	cp.w	r6,r8
80006704:	c0 a4       	brge	80006718 <_vfprintf_r+0xd94>
80006706:	fa cb f9 44 	sub	r11,sp,-1724
8000670a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000670e:	ec e8 fd 88 	ld.d	r8,r6[-632]
80006712:	fa e9 00 00 	st.d	sp[0],r8
80006716:	c1 88       	rjmp	80006746 <_vfprintf_r+0xdc2>
80006718:	fa c8 f9 50 	sub	r8,sp,-1712
8000671c:	1a d8       	st.w	--sp,r8
8000671e:	fa c8 fa b8 	sub	r8,sp,-1352
80006722:	04 9a       	mov	r10,r2
80006724:	1a d8       	st.w	--sp,r8
80006726:	0c 9b       	mov	r11,r6
80006728:	fa c8 fb b4 	sub	r8,sp,-1100
8000672c:	08 9c       	mov	r12,r4
8000672e:	1a d8       	st.w	--sp,r8
80006730:	fa c8 f9 40 	sub	r8,sp,-1728
80006734:	fa c9 ff b4 	sub	r9,sp,-76
80006738:	f0 1f 00 e7 	mcall	80006ad4 <_vfprintf_r+0x1150>
8000673c:	2f dd       	sub	sp,-12
8000673e:	f8 ea 00 00 	ld.d	r10,r12[0]
80006742:	fa eb 00 00 	st.d	sp[0],r10
80006746:	30 08       	mov	r8,0
80006748:	e0 8f 03 e6 	bral	80006f14 <_vfprintf_r+0x1590>
8000674c:	ee ca ff ff 	sub	r10,r7,-1
80006750:	10 37       	cp.w	r7,r8
80006752:	c0 b4       	brge	80006768 <_vfprintf_r+0xde4>
80006754:	fa c9 f9 44 	sub	r9,sp,-1724
80006758:	14 97       	mov	r7,r10
8000675a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000675e:	ec ea fd 88 	ld.d	r10,r6[-632]
80006762:	fa eb 00 00 	st.d	sp[0],r10
80006766:	c1 88       	rjmp	80006796 <_vfprintf_r+0xe12>
80006768:	41 09       	lddsp	r9,sp[0x40]
8000676a:	59 f8       	cp.w	r8,31
8000676c:	e0 89 00 18 	brgt	8000679c <_vfprintf_r+0xe18>
80006770:	f2 e6 00 00 	ld.d	r6,r9[0]
80006774:	f2 cb ff f8 	sub	r11,r9,-8
80006778:	fa e7 00 00 	st.d	sp[0],r6
8000677c:	51 0b       	stdsp	sp[0x40],r11
8000677e:	fa c6 f9 44 	sub	r6,sp,-1724
80006782:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006786:	fa e6 00 00 	ld.d	r6,sp[0]
8000678a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000678e:	2f f8       	sub	r8,-1
80006790:	14 97       	mov	r7,r10
80006792:	fb 48 06 b4 	st.w	sp[1716],r8
80006796:	40 38       	lddsp	r8,sp[0xc]
80006798:	e0 8f 03 be 	bral	80006f14 <_vfprintf_r+0x1590>
8000679c:	f2 e6 00 00 	ld.d	r6,r9[0]
800067a0:	40 38       	lddsp	r8,sp[0xc]
800067a2:	fa e7 00 00 	st.d	sp[0],r6
800067a6:	2f 89       	sub	r9,-8
800067a8:	14 97       	mov	r7,r10
800067aa:	51 09       	stdsp	sp[0x40],r9
800067ac:	e0 8f 03 b4 	bral	80006f14 <_vfprintf_r+0x1590>
800067b0:	ed b5 00 04 	bld	r5,0x4
800067b4:	c1 61       	brne	800067e0 <_vfprintf_r+0xe5c>
800067b6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800067ba:	40 3e       	lddsp	lr,sp[0xc]
800067bc:	58 0e       	cp.w	lr,0
800067be:	c0 80       	breq	800067ce <_vfprintf_r+0xe4a>
800067c0:	10 36       	cp.w	r6,r8
800067c2:	c6 74       	brge	80006890 <_vfprintf_r+0xf0c>
800067c4:	fa cc f9 44 	sub	r12,sp,-1724
800067c8:	f8 06 00 36 	add	r6,r12,r6<<0x3
800067cc:	c8 08       	rjmp	800068cc <_vfprintf_r+0xf48>
800067ce:	ee ca ff ff 	sub	r10,r7,-1
800067d2:	10 37       	cp.w	r7,r8
800067d4:	c7 f4       	brge	800068d2 <_vfprintf_r+0xf4e>
800067d6:	fa cb f9 44 	sub	r11,sp,-1724
800067da:	f6 06 00 36 	add	r6,r11,r6<<0x3
800067de:	c7 68       	rjmp	800068ca <_vfprintf_r+0xf46>
800067e0:	ed b5 00 06 	bld	r5,0x6
800067e4:	c4 a1       	brne	80006878 <_vfprintf_r+0xef4>
800067e6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800067ea:	40 3c       	lddsp	r12,sp[0xc]
800067ec:	58 0c       	cp.w	r12,0
800067ee:	c1 d0       	breq	80006828 <_vfprintf_r+0xea4>
800067f0:	10 36       	cp.w	r6,r8
800067f2:	c0 64       	brge	800067fe <_vfprintf_r+0xe7a>
800067f4:	fa cb f9 44 	sub	r11,sp,-1724
800067f8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800067fc:	c1 f8       	rjmp	8000683a <_vfprintf_r+0xeb6>
800067fe:	fa c8 f9 50 	sub	r8,sp,-1712
80006802:	1a d8       	st.w	--sp,r8
80006804:	fa c8 fa b8 	sub	r8,sp,-1352
80006808:	1a d8       	st.w	--sp,r8
8000680a:	fa c8 fb b4 	sub	r8,sp,-1100
8000680e:	1a d8       	st.w	--sp,r8
80006810:	fa c8 f9 40 	sub	r8,sp,-1728
80006814:	fa c9 ff b4 	sub	r9,sp,-76
80006818:	04 9a       	mov	r10,r2
8000681a:	0c 9b       	mov	r11,r6
8000681c:	08 9c       	mov	r12,r4
8000681e:	f0 1f 00 ae 	mcall	80006ad4 <_vfprintf_r+0x1150>
80006822:	2f dd       	sub	sp,-12
80006824:	98 18       	ld.sh	r8,r12[0x2]
80006826:	c2 68       	rjmp	80006872 <_vfprintf_r+0xeee>
80006828:	ee ca ff ff 	sub	r10,r7,-1
8000682c:	10 37       	cp.w	r7,r8
8000682e:	c0 94       	brge	80006840 <_vfprintf_r+0xebc>
80006830:	fa c9 f9 44 	sub	r9,sp,-1724
80006834:	14 97       	mov	r7,r10
80006836:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000683a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000683e:	c1 a8       	rjmp	80006872 <_vfprintf_r+0xeee>
80006840:	41 09       	lddsp	r9,sp[0x40]
80006842:	59 f8       	cp.w	r8,31
80006844:	e0 89 00 13 	brgt	8000686a <_vfprintf_r+0xee6>
80006848:	f2 cb ff fc 	sub	r11,r9,-4
8000684c:	51 0b       	stdsp	sp[0x40],r11
8000684e:	72 09       	ld.w	r9,r9[0x0]
80006850:	fa c6 f9 44 	sub	r6,sp,-1724
80006854:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006858:	2f f8       	sub	r8,-1
8000685a:	f7 49 fd 88 	st.w	r11[-632],r9
8000685e:	fb 48 06 b4 	st.w	sp[1716],r8
80006862:	14 97       	mov	r7,r10
80006864:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006868:	c0 58       	rjmp	80006872 <_vfprintf_r+0xeee>
8000686a:	92 18       	ld.sh	r8,r9[0x2]
8000686c:	14 97       	mov	r7,r10
8000686e:	2f c9       	sub	r9,-4
80006870:	51 09       	stdsp	sp[0x40],r9
80006872:	5c 78       	castu.h	r8
80006874:	50 18       	stdsp	sp[0x4],r8
80006876:	c4 68       	rjmp	80006902 <_vfprintf_r+0xf7e>
80006878:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000687c:	40 3c       	lddsp	r12,sp[0xc]
8000687e:	58 0c       	cp.w	r12,0
80006880:	c1 d0       	breq	800068ba <_vfprintf_r+0xf36>
80006882:	10 36       	cp.w	r6,r8
80006884:	c0 64       	brge	80006890 <_vfprintf_r+0xf0c>
80006886:	fa cb f9 44 	sub	r11,sp,-1724
8000688a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000688e:	c1 f8       	rjmp	800068cc <_vfprintf_r+0xf48>
80006890:	fa c8 f9 50 	sub	r8,sp,-1712
80006894:	1a d8       	st.w	--sp,r8
80006896:	fa c8 fa b8 	sub	r8,sp,-1352
8000689a:	0c 9b       	mov	r11,r6
8000689c:	1a d8       	st.w	--sp,r8
8000689e:	fa c8 fb b4 	sub	r8,sp,-1100
800068a2:	04 9a       	mov	r10,r2
800068a4:	1a d8       	st.w	--sp,r8
800068a6:	08 9c       	mov	r12,r4
800068a8:	fa c8 f9 40 	sub	r8,sp,-1728
800068ac:	fa c9 ff b4 	sub	r9,sp,-76
800068b0:	f0 1f 00 89 	mcall	80006ad4 <_vfprintf_r+0x1150>
800068b4:	2f dd       	sub	sp,-12
800068b6:	78 0b       	ld.w	r11,r12[0x0]
800068b8:	c2 48       	rjmp	80006900 <_vfprintf_r+0xf7c>
800068ba:	ee ca ff ff 	sub	r10,r7,-1
800068be:	10 37       	cp.w	r7,r8
800068c0:	c0 94       	brge	800068d2 <_vfprintf_r+0xf4e>
800068c2:	fa c9 f9 44 	sub	r9,sp,-1724
800068c6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800068ca:	14 97       	mov	r7,r10
800068cc:	ec fb fd 88 	ld.w	r11,r6[-632]
800068d0:	c1 88       	rjmp	80006900 <_vfprintf_r+0xf7c>
800068d2:	41 09       	lddsp	r9,sp[0x40]
800068d4:	59 f8       	cp.w	r8,31
800068d6:	e0 89 00 11 	brgt	800068f8 <_vfprintf_r+0xf74>
800068da:	f2 cb ff fc 	sub	r11,r9,-4
800068de:	51 0b       	stdsp	sp[0x40],r11
800068e0:	fa c6 f9 44 	sub	r6,sp,-1724
800068e4:	72 0b       	ld.w	r11,r9[0x0]
800068e6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800068ea:	f3 4b fd 88 	st.w	r9[-632],r11
800068ee:	2f f8       	sub	r8,-1
800068f0:	14 97       	mov	r7,r10
800068f2:	fb 48 06 b4 	st.w	sp[1716],r8
800068f6:	c0 58       	rjmp	80006900 <_vfprintf_r+0xf7c>
800068f8:	72 0b       	ld.w	r11,r9[0x0]
800068fa:	14 97       	mov	r7,r10
800068fc:	2f c9       	sub	r9,-4
800068fe:	51 09       	stdsp	sp[0x40],r9
80006900:	50 1b       	stdsp	sp[0x4],r11
80006902:	30 0e       	mov	lr,0
80006904:	50 0e       	stdsp	sp[0x0],lr
80006906:	1c 98       	mov	r8,lr
80006908:	e0 8f 03 06 	bral	80006f14 <_vfprintf_r+0x1590>
8000690c:	50 a7       	stdsp	sp[0x28],r7
8000690e:	50 80       	stdsp	sp[0x20],r0
80006910:	0c 97       	mov	r7,r6
80006912:	04 94       	mov	r4,r2
80006914:	06 96       	mov	r6,r3
80006916:	02 92       	mov	r2,r1
80006918:	40 93       	lddsp	r3,sp[0x24]
8000691a:	40 41       	lddsp	r1,sp[0x10]
8000691c:	0e 99       	mov	r9,r7
8000691e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006922:	40 3c       	lddsp	r12,sp[0xc]
80006924:	58 0c       	cp.w	r12,0
80006926:	c1 d0       	breq	80006960 <_vfprintf_r+0xfdc>
80006928:	10 36       	cp.w	r6,r8
8000692a:	c0 64       	brge	80006936 <_vfprintf_r+0xfb2>
8000692c:	fa cb f9 44 	sub	r11,sp,-1724
80006930:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006934:	c1 d8       	rjmp	8000696e <_vfprintf_r+0xfea>
80006936:	fa c8 f9 50 	sub	r8,sp,-1712
8000693a:	1a d8       	st.w	--sp,r8
8000693c:	fa c8 fa b8 	sub	r8,sp,-1352
80006940:	1a d8       	st.w	--sp,r8
80006942:	fa c8 fb b4 	sub	r8,sp,-1100
80006946:	1a d8       	st.w	--sp,r8
80006948:	fa c9 ff b4 	sub	r9,sp,-76
8000694c:	fa c8 f9 40 	sub	r8,sp,-1728
80006950:	04 9a       	mov	r10,r2
80006952:	0c 9b       	mov	r11,r6
80006954:	08 9c       	mov	r12,r4
80006956:	f0 1f 00 60 	mcall	80006ad4 <_vfprintf_r+0x1150>
8000695a:	2f dd       	sub	sp,-12
8000695c:	78 09       	ld.w	r9,r12[0x0]
8000695e:	c2 18       	rjmp	800069a0 <_vfprintf_r+0x101c>
80006960:	2f f7       	sub	r7,-1
80006962:	10 39       	cp.w	r9,r8
80006964:	c0 84       	brge	80006974 <_vfprintf_r+0xff0>
80006966:	fa ca f9 44 	sub	r10,sp,-1724
8000696a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000696e:	ec f9 fd 88 	ld.w	r9,r6[-632]
80006972:	c1 78       	rjmp	800069a0 <_vfprintf_r+0x101c>
80006974:	41 09       	lddsp	r9,sp[0x40]
80006976:	59 f8       	cp.w	r8,31
80006978:	e0 89 00 10 	brgt	80006998 <_vfprintf_r+0x1014>
8000697c:	f2 ca ff fc 	sub	r10,r9,-4
80006980:	51 0a       	stdsp	sp[0x40],r10
80006982:	fa c6 f9 44 	sub	r6,sp,-1724
80006986:	72 09       	ld.w	r9,r9[0x0]
80006988:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000698c:	f5 49 fd 88 	st.w	r10[-632],r9
80006990:	2f f8       	sub	r8,-1
80006992:	fb 48 06 b4 	st.w	sp[1716],r8
80006996:	c0 58       	rjmp	800069a0 <_vfprintf_r+0x101c>
80006998:	f2 c8 ff fc 	sub	r8,r9,-4
8000699c:	51 08       	stdsp	sp[0x40],r8
8000699e:	72 09       	ld.w	r9,r9[0x0]
800069a0:	33 08       	mov	r8,48
800069a2:	fb 68 06 b8 	st.b	sp[1720],r8
800069a6:	37 88       	mov	r8,120
800069a8:	30 0e       	mov	lr,0
800069aa:	fb 68 06 b9 	st.b	sp[1721],r8
800069ae:	4c bc       	lddpc	r12,80006ad8 <_vfprintf_r+0x1154>
800069b0:	50 19       	stdsp	sp[0x4],r9
800069b2:	a1 b5       	sbr	r5,0x1
800069b4:	50 0e       	stdsp	sp[0x0],lr
800069b6:	50 dc       	stdsp	sp[0x34],r12
800069b8:	30 28       	mov	r8,2
800069ba:	37 80       	mov	r0,120
800069bc:	e0 8f 02 ac 	bral	80006f14 <_vfprintf_r+0x1590>
800069c0:	50 a7       	stdsp	sp[0x28],r7
800069c2:	50 80       	stdsp	sp[0x20],r0
800069c4:	10 90       	mov	r0,r8
800069c6:	30 08       	mov	r8,0
800069c8:	fb 68 06 bb 	st.b	sp[1723],r8
800069cc:	0c 97       	mov	r7,r6
800069ce:	04 94       	mov	r4,r2
800069d0:	06 96       	mov	r6,r3
800069d2:	02 92       	mov	r2,r1
800069d4:	40 93       	lddsp	r3,sp[0x24]
800069d6:	40 41       	lddsp	r1,sp[0x10]
800069d8:	0e 99       	mov	r9,r7
800069da:	fa f8 06 b4 	ld.w	r8,sp[1716]
800069de:	40 3b       	lddsp	r11,sp[0xc]
800069e0:	58 0b       	cp.w	r11,0
800069e2:	c1 d0       	breq	80006a1c <_vfprintf_r+0x1098>
800069e4:	10 36       	cp.w	r6,r8
800069e6:	c0 64       	brge	800069f2 <_vfprintf_r+0x106e>
800069e8:	fa ca f9 44 	sub	r10,sp,-1724
800069ec:	f4 06 00 36 	add	r6,r10,r6<<0x3
800069f0:	c1 d8       	rjmp	80006a2a <_vfprintf_r+0x10a6>
800069f2:	fa c8 f9 50 	sub	r8,sp,-1712
800069f6:	1a d8       	st.w	--sp,r8
800069f8:	fa c8 fa b8 	sub	r8,sp,-1352
800069fc:	1a d8       	st.w	--sp,r8
800069fe:	fa c8 fb b4 	sub	r8,sp,-1100
80006a02:	0c 9b       	mov	r11,r6
80006a04:	1a d8       	st.w	--sp,r8
80006a06:	04 9a       	mov	r10,r2
80006a08:	fa c8 f9 40 	sub	r8,sp,-1728
80006a0c:	fa c9 ff b4 	sub	r9,sp,-76
80006a10:	08 9c       	mov	r12,r4
80006a12:	f0 1f 00 31 	mcall	80006ad4 <_vfprintf_r+0x1150>
80006a16:	2f dd       	sub	sp,-12
80006a18:	78 06       	ld.w	r6,r12[0x0]
80006a1a:	c2 08       	rjmp	80006a5a <_vfprintf_r+0x10d6>
80006a1c:	2f f7       	sub	r7,-1
80006a1e:	10 39       	cp.w	r9,r8
80006a20:	c0 84       	brge	80006a30 <_vfprintf_r+0x10ac>
80006a22:	fa c9 f9 44 	sub	r9,sp,-1724
80006a26:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006a2a:	ec f6 fd 88 	ld.w	r6,r6[-632]
80006a2e:	c1 68       	rjmp	80006a5a <_vfprintf_r+0x10d6>
80006a30:	41 09       	lddsp	r9,sp[0x40]
80006a32:	59 f8       	cp.w	r8,31
80006a34:	e0 89 00 10 	brgt	80006a54 <_vfprintf_r+0x10d0>
80006a38:	f2 ca ff fc 	sub	r10,r9,-4
80006a3c:	51 0a       	stdsp	sp[0x40],r10
80006a3e:	72 06       	ld.w	r6,r9[0x0]
80006a40:	fa ce f9 44 	sub	lr,sp,-1724
80006a44:	fc 08 00 39 	add	r9,lr,r8<<0x3
80006a48:	f3 46 fd 88 	st.w	r9[-632],r6
80006a4c:	2f f8       	sub	r8,-1
80006a4e:	fb 48 06 b4 	st.w	sp[1716],r8
80006a52:	c0 48       	rjmp	80006a5a <_vfprintf_r+0x10d6>
80006a54:	72 06       	ld.w	r6,r9[0x0]
80006a56:	2f c9       	sub	r9,-4
80006a58:	51 09       	stdsp	sp[0x40],r9
80006a5a:	40 2c       	lddsp	r12,sp[0x8]
80006a5c:	58 0c       	cp.w	r12,0
80006a5e:	c1 05       	brlt	80006a7e <_vfprintf_r+0x10fa>
80006a60:	18 9a       	mov	r10,r12
80006a62:	30 0b       	mov	r11,0
80006a64:	0c 9c       	mov	r12,r6
80006a66:	f0 1f 00 1e 	mcall	80006adc <_vfprintf_r+0x1158>
80006a6a:	e0 80 02 e8 	breq	8000703a <_vfprintf_r+0x16b6>
80006a6e:	f8 06 01 02 	sub	r2,r12,r6
80006a72:	40 2b       	lddsp	r11,sp[0x8]
80006a74:	16 32       	cp.w	r2,r11
80006a76:	e0 89 02 e2 	brgt	8000703a <_vfprintf_r+0x16b6>
80006a7a:	e0 8f 02 dd 	bral	80007034 <_vfprintf_r+0x16b0>
80006a7e:	30 0a       	mov	r10,0
80006a80:	0c 9c       	mov	r12,r6
80006a82:	50 2a       	stdsp	sp[0x8],r10
80006a84:	f0 1f 00 17 	mcall	80006ae0 <_vfprintf_r+0x115c>
80006a88:	18 92       	mov	r2,r12
80006a8a:	e0 8f 02 db 	bral	80007040 <_vfprintf_r+0x16bc>
80006a8e:	50 a7       	stdsp	sp[0x28],r7
80006a90:	50 80       	stdsp	sp[0x20],r0
80006a92:	0c 97       	mov	r7,r6
80006a94:	04 94       	mov	r4,r2
80006a96:	06 96       	mov	r6,r3
80006a98:	02 92       	mov	r2,r1
80006a9a:	40 93       	lddsp	r3,sp[0x24]
80006a9c:	10 90       	mov	r0,r8
80006a9e:	40 41       	lddsp	r1,sp[0x10]
80006aa0:	a5 a5       	sbr	r5,0x4
80006aa2:	c0 a8       	rjmp	80006ab6 <_vfprintf_r+0x1132>
80006aa4:	50 a7       	stdsp	sp[0x28],r7
80006aa6:	50 80       	stdsp	sp[0x20],r0
80006aa8:	0c 97       	mov	r7,r6
80006aaa:	04 94       	mov	r4,r2
80006aac:	06 96       	mov	r6,r3
80006aae:	02 92       	mov	r2,r1
80006ab0:	40 93       	lddsp	r3,sp[0x24]
80006ab2:	10 90       	mov	r0,r8
80006ab4:	40 41       	lddsp	r1,sp[0x10]
80006ab6:	ed b5 00 05 	bld	r5,0x5
80006aba:	c5 d1       	brne	80006b74 <_vfprintf_r+0x11f0>
80006abc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006ac0:	40 39       	lddsp	r9,sp[0xc]
80006ac2:	58 09       	cp.w	r9,0
80006ac4:	c2 80       	breq	80006b14 <_vfprintf_r+0x1190>
80006ac6:	10 36       	cp.w	r6,r8
80006ac8:	c0 e4       	brge	80006ae4 <_vfprintf_r+0x1160>
80006aca:	fa c8 f9 44 	sub	r8,sp,-1724
80006ace:	f0 06 00 36 	add	r6,r8,r6<<0x3
80006ad2:	c2 a8       	rjmp	80006b26 <_vfprintf_r+0x11a2>
80006ad4:	80 00       	ld.sh	r0,r0[0x0]
80006ad6:	56 40       	stdsp	sp[0x190],r0
80006ad8:	80 00       	ld.sh	r0,r0[0x0]
80006ada:	af c0       	cbr	r0,0xe
80006adc:	80 00       	ld.sh	r0,r0[0x0]
80006ade:	92 08       	ld.sh	r8,r9[0x0]
80006ae0:	80 00       	ld.sh	r0,r0[0x0]
80006ae2:	99 7c       	st.w	r12[0x1c],r12
80006ae4:	fa c8 f9 50 	sub	r8,sp,-1712
80006ae8:	1a d8       	st.w	--sp,r8
80006aea:	fa c8 fa b8 	sub	r8,sp,-1352
80006aee:	1a d8       	st.w	--sp,r8
80006af0:	fa c8 fb b4 	sub	r8,sp,-1100
80006af4:	1a d8       	st.w	--sp,r8
80006af6:	fa c8 f9 40 	sub	r8,sp,-1728
80006afa:	fa c9 ff b4 	sub	r9,sp,-76
80006afe:	04 9a       	mov	r10,r2
80006b00:	0c 9b       	mov	r11,r6
80006b02:	08 9c       	mov	r12,r4
80006b04:	f0 1f 00 c8 	mcall	80006e24 <_vfprintf_r+0x14a0>
80006b08:	2f dd       	sub	sp,-12
80006b0a:	f8 e8 00 00 	ld.d	r8,r12[0]
80006b0e:	fa e9 00 00 	st.d	sp[0],r8
80006b12:	c2 e8       	rjmp	80006b6e <_vfprintf_r+0x11ea>
80006b14:	ee ca ff ff 	sub	r10,r7,-1
80006b18:	10 37       	cp.w	r7,r8
80006b1a:	c0 b4       	brge	80006b30 <_vfprintf_r+0x11ac>
80006b1c:	fa c8 f9 44 	sub	r8,sp,-1724
80006b20:	14 97       	mov	r7,r10
80006b22:	f0 06 00 36 	add	r6,r8,r6<<0x3
80006b26:	ec ea fd 88 	ld.d	r10,r6[-632]
80006b2a:	fa eb 00 00 	st.d	sp[0],r10
80006b2e:	c2 08       	rjmp	80006b6e <_vfprintf_r+0x11ea>
80006b30:	41 09       	lddsp	r9,sp[0x40]
80006b32:	59 f8       	cp.w	r8,31
80006b34:	e0 89 00 16 	brgt	80006b60 <_vfprintf_r+0x11dc>
80006b38:	f2 e6 00 00 	ld.d	r6,r9[0]
80006b3c:	f2 cb ff f8 	sub	r11,r9,-8
80006b40:	fa e7 00 00 	st.d	sp[0],r6
80006b44:	51 0b       	stdsp	sp[0x40],r11
80006b46:	fa c6 f9 44 	sub	r6,sp,-1724
80006b4a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006b4e:	fa e6 00 00 	ld.d	r6,sp[0]
80006b52:	f2 e7 fd 88 	st.d	r9[-632],r6
80006b56:	2f f8       	sub	r8,-1
80006b58:	14 97       	mov	r7,r10
80006b5a:	fb 48 06 b4 	st.w	sp[1716],r8
80006b5e:	c0 88       	rjmp	80006b6e <_vfprintf_r+0x11ea>
80006b60:	f2 e6 00 00 	ld.d	r6,r9[0]
80006b64:	2f 89       	sub	r9,-8
80006b66:	fa e7 00 00 	st.d	sp[0],r6
80006b6a:	51 09       	stdsp	sp[0x40],r9
80006b6c:	14 97       	mov	r7,r10
80006b6e:	30 18       	mov	r8,1
80006b70:	e0 8f 01 d2 	bral	80006f14 <_vfprintf_r+0x1590>
80006b74:	ed b5 00 04 	bld	r5,0x4
80006b78:	c1 61       	brne	80006ba4 <_vfprintf_r+0x1220>
80006b7a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006b7e:	40 3e       	lddsp	lr,sp[0xc]
80006b80:	58 0e       	cp.w	lr,0
80006b82:	c0 80       	breq	80006b92 <_vfprintf_r+0x120e>
80006b84:	10 36       	cp.w	r6,r8
80006b86:	c6 74       	brge	80006c54 <_vfprintf_r+0x12d0>
80006b88:	fa cc f9 44 	sub	r12,sp,-1724
80006b8c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006b90:	c8 08       	rjmp	80006c90 <_vfprintf_r+0x130c>
80006b92:	ee ca ff ff 	sub	r10,r7,-1
80006b96:	10 37       	cp.w	r7,r8
80006b98:	c7 f4       	brge	80006c96 <_vfprintf_r+0x1312>
80006b9a:	fa cb f9 44 	sub	r11,sp,-1724
80006b9e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006ba2:	c7 68       	rjmp	80006c8e <_vfprintf_r+0x130a>
80006ba4:	ed b5 00 06 	bld	r5,0x6
80006ba8:	c4 a1       	brne	80006c3c <_vfprintf_r+0x12b8>
80006baa:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006bae:	40 3c       	lddsp	r12,sp[0xc]
80006bb0:	58 0c       	cp.w	r12,0
80006bb2:	c1 d0       	breq	80006bec <_vfprintf_r+0x1268>
80006bb4:	10 36       	cp.w	r6,r8
80006bb6:	c0 64       	brge	80006bc2 <_vfprintf_r+0x123e>
80006bb8:	fa cb f9 44 	sub	r11,sp,-1724
80006bbc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006bc0:	c1 f8       	rjmp	80006bfe <_vfprintf_r+0x127a>
80006bc2:	fa c8 f9 50 	sub	r8,sp,-1712
80006bc6:	1a d8       	st.w	--sp,r8
80006bc8:	fa c8 fa b8 	sub	r8,sp,-1352
80006bcc:	1a d8       	st.w	--sp,r8
80006bce:	fa c8 fb b4 	sub	r8,sp,-1100
80006bd2:	1a d8       	st.w	--sp,r8
80006bd4:	fa c8 f9 40 	sub	r8,sp,-1728
80006bd8:	fa c9 ff b4 	sub	r9,sp,-76
80006bdc:	04 9a       	mov	r10,r2
80006bde:	0c 9b       	mov	r11,r6
80006be0:	08 9c       	mov	r12,r4
80006be2:	f0 1f 00 91 	mcall	80006e24 <_vfprintf_r+0x14a0>
80006be6:	2f dd       	sub	sp,-12
80006be8:	98 18       	ld.sh	r8,r12[0x2]
80006bea:	c2 68       	rjmp	80006c36 <_vfprintf_r+0x12b2>
80006bec:	ee ca ff ff 	sub	r10,r7,-1
80006bf0:	10 37       	cp.w	r7,r8
80006bf2:	c0 94       	brge	80006c04 <_vfprintf_r+0x1280>
80006bf4:	fa c9 f9 44 	sub	r9,sp,-1724
80006bf8:	14 97       	mov	r7,r10
80006bfa:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006bfe:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006c02:	c1 a8       	rjmp	80006c36 <_vfprintf_r+0x12b2>
80006c04:	41 09       	lddsp	r9,sp[0x40]
80006c06:	59 f8       	cp.w	r8,31
80006c08:	e0 89 00 13 	brgt	80006c2e <_vfprintf_r+0x12aa>
80006c0c:	f2 cb ff fc 	sub	r11,r9,-4
80006c10:	51 0b       	stdsp	sp[0x40],r11
80006c12:	72 09       	ld.w	r9,r9[0x0]
80006c14:	fa c6 f9 44 	sub	r6,sp,-1724
80006c18:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006c1c:	2f f8       	sub	r8,-1
80006c1e:	f7 49 fd 88 	st.w	r11[-632],r9
80006c22:	fb 48 06 b4 	st.w	sp[1716],r8
80006c26:	14 97       	mov	r7,r10
80006c28:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006c2c:	c0 58       	rjmp	80006c36 <_vfprintf_r+0x12b2>
80006c2e:	92 18       	ld.sh	r8,r9[0x2]
80006c30:	14 97       	mov	r7,r10
80006c32:	2f c9       	sub	r9,-4
80006c34:	51 09       	stdsp	sp[0x40],r9
80006c36:	5c 78       	castu.h	r8
80006c38:	50 18       	stdsp	sp[0x4],r8
80006c3a:	c4 68       	rjmp	80006cc6 <_vfprintf_r+0x1342>
80006c3c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006c40:	40 3c       	lddsp	r12,sp[0xc]
80006c42:	58 0c       	cp.w	r12,0
80006c44:	c1 d0       	breq	80006c7e <_vfprintf_r+0x12fa>
80006c46:	10 36       	cp.w	r6,r8
80006c48:	c0 64       	brge	80006c54 <_vfprintf_r+0x12d0>
80006c4a:	fa cb f9 44 	sub	r11,sp,-1724
80006c4e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006c52:	c1 f8       	rjmp	80006c90 <_vfprintf_r+0x130c>
80006c54:	fa c8 f9 50 	sub	r8,sp,-1712
80006c58:	1a d8       	st.w	--sp,r8
80006c5a:	fa c8 fa b8 	sub	r8,sp,-1352
80006c5e:	0c 9b       	mov	r11,r6
80006c60:	1a d8       	st.w	--sp,r8
80006c62:	fa c8 fb b4 	sub	r8,sp,-1100
80006c66:	04 9a       	mov	r10,r2
80006c68:	1a d8       	st.w	--sp,r8
80006c6a:	08 9c       	mov	r12,r4
80006c6c:	fa c8 f9 40 	sub	r8,sp,-1728
80006c70:	fa c9 ff b4 	sub	r9,sp,-76
80006c74:	f0 1f 00 6c 	mcall	80006e24 <_vfprintf_r+0x14a0>
80006c78:	2f dd       	sub	sp,-12
80006c7a:	78 0b       	ld.w	r11,r12[0x0]
80006c7c:	c2 48       	rjmp	80006cc4 <_vfprintf_r+0x1340>
80006c7e:	ee ca ff ff 	sub	r10,r7,-1
80006c82:	10 37       	cp.w	r7,r8
80006c84:	c0 94       	brge	80006c96 <_vfprintf_r+0x1312>
80006c86:	fa c9 f9 44 	sub	r9,sp,-1724
80006c8a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006c8e:	14 97       	mov	r7,r10
80006c90:	ec fb fd 88 	ld.w	r11,r6[-632]
80006c94:	c1 88       	rjmp	80006cc4 <_vfprintf_r+0x1340>
80006c96:	41 09       	lddsp	r9,sp[0x40]
80006c98:	59 f8       	cp.w	r8,31
80006c9a:	e0 89 00 11 	brgt	80006cbc <_vfprintf_r+0x1338>
80006c9e:	f2 cb ff fc 	sub	r11,r9,-4
80006ca2:	51 0b       	stdsp	sp[0x40],r11
80006ca4:	fa c6 f9 44 	sub	r6,sp,-1724
80006ca8:	72 0b       	ld.w	r11,r9[0x0]
80006caa:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006cae:	f3 4b fd 88 	st.w	r9[-632],r11
80006cb2:	2f f8       	sub	r8,-1
80006cb4:	14 97       	mov	r7,r10
80006cb6:	fb 48 06 b4 	st.w	sp[1716],r8
80006cba:	c0 58       	rjmp	80006cc4 <_vfprintf_r+0x1340>
80006cbc:	72 0b       	ld.w	r11,r9[0x0]
80006cbe:	14 97       	mov	r7,r10
80006cc0:	2f c9       	sub	r9,-4
80006cc2:	51 09       	stdsp	sp[0x40],r9
80006cc4:	50 1b       	stdsp	sp[0x4],r11
80006cc6:	30 0e       	mov	lr,0
80006cc8:	30 18       	mov	r8,1
80006cca:	50 0e       	stdsp	sp[0x0],lr
80006ccc:	c2 49       	rjmp	80006f14 <_vfprintf_r+0x1590>
80006cce:	50 a7       	stdsp	sp[0x28],r7
80006cd0:	50 80       	stdsp	sp[0x20],r0
80006cd2:	0c 97       	mov	r7,r6
80006cd4:	04 94       	mov	r4,r2
80006cd6:	06 96       	mov	r6,r3
80006cd8:	02 92       	mov	r2,r1
80006cda:	4d 4c       	lddpc	r12,80006e28 <_vfprintf_r+0x14a4>
80006cdc:	40 93       	lddsp	r3,sp[0x24]
80006cde:	10 90       	mov	r0,r8
80006ce0:	40 41       	lddsp	r1,sp[0x10]
80006ce2:	50 dc       	stdsp	sp[0x34],r12
80006ce4:	ed b5 00 05 	bld	r5,0x5
80006ce8:	c5 51       	brne	80006d92 <_vfprintf_r+0x140e>
80006cea:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006cee:	40 3b       	lddsp	r11,sp[0xc]
80006cf0:	58 0b       	cp.w	r11,0
80006cf2:	c2 20       	breq	80006d36 <_vfprintf_r+0x13b2>
80006cf4:	10 36       	cp.w	r6,r8
80006cf6:	c0 a4       	brge	80006d0a <_vfprintf_r+0x1386>
80006cf8:	fa ca f9 44 	sub	r10,sp,-1724
80006cfc:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006d00:	ec e8 fd 88 	ld.d	r8,r6[-632]
80006d04:	fa e9 00 00 	st.d	sp[0],r8
80006d08:	cf 58       	rjmp	80006ef2 <_vfprintf_r+0x156e>
80006d0a:	fa c8 f9 50 	sub	r8,sp,-1712
80006d0e:	1a d8       	st.w	--sp,r8
80006d10:	fa c8 fa b8 	sub	r8,sp,-1352
80006d14:	04 9a       	mov	r10,r2
80006d16:	1a d8       	st.w	--sp,r8
80006d18:	0c 9b       	mov	r11,r6
80006d1a:	fa c8 fb b4 	sub	r8,sp,-1100
80006d1e:	08 9c       	mov	r12,r4
80006d20:	1a d8       	st.w	--sp,r8
80006d22:	fa c8 f9 40 	sub	r8,sp,-1728
80006d26:	fa c9 ff b4 	sub	r9,sp,-76
80006d2a:	f0 1f 00 3f 	mcall	80006e24 <_vfprintf_r+0x14a0>
80006d2e:	2f dd       	sub	sp,-12
80006d30:	f8 ea 00 00 	ld.d	r10,r12[0]
80006d34:	c0 c8       	rjmp	80006d4c <_vfprintf_r+0x13c8>
80006d36:	ee ca ff ff 	sub	r10,r7,-1
80006d3a:	10 37       	cp.w	r7,r8
80006d3c:	c0 b4       	brge	80006d52 <_vfprintf_r+0x13ce>
80006d3e:	fa c9 f9 44 	sub	r9,sp,-1724
80006d42:	14 97       	mov	r7,r10
80006d44:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006d48:	ec ea fd 88 	ld.d	r10,r6[-632]
80006d4c:	fa eb 00 00 	st.d	sp[0],r10
80006d50:	cd 18       	rjmp	80006ef2 <_vfprintf_r+0x156e>
80006d52:	41 09       	lddsp	r9,sp[0x40]
80006d54:	59 f8       	cp.w	r8,31
80006d56:	e0 89 00 16 	brgt	80006d82 <_vfprintf_r+0x13fe>
80006d5a:	f2 e6 00 00 	ld.d	r6,r9[0]
80006d5e:	f2 cb ff f8 	sub	r11,r9,-8
80006d62:	fa e7 00 00 	st.d	sp[0],r6
80006d66:	51 0b       	stdsp	sp[0x40],r11
80006d68:	fa c6 f9 44 	sub	r6,sp,-1724
80006d6c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006d70:	fa e6 00 00 	ld.d	r6,sp[0]
80006d74:	f2 e7 fd 88 	st.d	r9[-632],r6
80006d78:	2f f8       	sub	r8,-1
80006d7a:	14 97       	mov	r7,r10
80006d7c:	fb 48 06 b4 	st.w	sp[1716],r8
80006d80:	cb 98       	rjmp	80006ef2 <_vfprintf_r+0x156e>
80006d82:	f2 e6 00 00 	ld.d	r6,r9[0]
80006d86:	2f 89       	sub	r9,-8
80006d88:	fa e7 00 00 	st.d	sp[0],r6
80006d8c:	51 09       	stdsp	sp[0x40],r9
80006d8e:	14 97       	mov	r7,r10
80006d90:	cb 18       	rjmp	80006ef2 <_vfprintf_r+0x156e>
80006d92:	ed b5 00 04 	bld	r5,0x4
80006d96:	c1 71       	brne	80006dc4 <_vfprintf_r+0x1440>
80006d98:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006d9c:	40 3e       	lddsp	lr,sp[0xc]
80006d9e:	58 0e       	cp.w	lr,0
80006da0:	c0 80       	breq	80006db0 <_vfprintf_r+0x142c>
80006da2:	10 36       	cp.w	r6,r8
80006da4:	c6 c4       	brge	80006e7c <_vfprintf_r+0x14f8>
80006da6:	fa cc f9 44 	sub	r12,sp,-1724
80006daa:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006dae:	c8 58       	rjmp	80006eb8 <_vfprintf_r+0x1534>
80006db0:	ee ca ff ff 	sub	r10,r7,-1
80006db4:	10 37       	cp.w	r7,r8
80006db6:	e0 84 00 84 	brge	80006ebe <_vfprintf_r+0x153a>
80006dba:	fa cb f9 44 	sub	r11,sp,-1724
80006dbe:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006dc2:	c7 a8       	rjmp	80006eb6 <_vfprintf_r+0x1532>
80006dc4:	ed b5 00 06 	bld	r5,0x6
80006dc8:	c4 e1       	brne	80006e64 <_vfprintf_r+0x14e0>
80006dca:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006dce:	40 3c       	lddsp	r12,sp[0xc]
80006dd0:	58 0c       	cp.w	r12,0
80006dd2:	c1 d0       	breq	80006e0c <_vfprintf_r+0x1488>
80006dd4:	10 36       	cp.w	r6,r8
80006dd6:	c0 64       	brge	80006de2 <_vfprintf_r+0x145e>
80006dd8:	fa cb f9 44 	sub	r11,sp,-1724
80006ddc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006de0:	c1 f8       	rjmp	80006e1e <_vfprintf_r+0x149a>
80006de2:	fa c8 f9 50 	sub	r8,sp,-1712
80006de6:	1a d8       	st.w	--sp,r8
80006de8:	fa c8 fa b8 	sub	r8,sp,-1352
80006dec:	1a d8       	st.w	--sp,r8
80006dee:	fa c8 fb b4 	sub	r8,sp,-1100
80006df2:	1a d8       	st.w	--sp,r8
80006df4:	fa c8 f9 40 	sub	r8,sp,-1728
80006df8:	fa c9 ff b4 	sub	r9,sp,-76
80006dfc:	04 9a       	mov	r10,r2
80006dfe:	0c 9b       	mov	r11,r6
80006e00:	08 9c       	mov	r12,r4
80006e02:	f0 1f 00 09 	mcall	80006e24 <_vfprintf_r+0x14a0>
80006e06:	2f dd       	sub	sp,-12
80006e08:	98 18       	ld.sh	r8,r12[0x2]
80006e0a:	c2 a8       	rjmp	80006e5e <_vfprintf_r+0x14da>
80006e0c:	ee ca ff ff 	sub	r10,r7,-1
80006e10:	10 37       	cp.w	r7,r8
80006e12:	c0 d4       	brge	80006e2c <_vfprintf_r+0x14a8>
80006e14:	fa c9 f9 44 	sub	r9,sp,-1724
80006e18:	14 97       	mov	r7,r10
80006e1a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006e1e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006e22:	c1 e8       	rjmp	80006e5e <_vfprintf_r+0x14da>
80006e24:	80 00       	ld.sh	r0,r0[0x0]
80006e26:	56 40       	stdsp	sp[0x190],r0
80006e28:	80 00       	ld.sh	r0,r0[0x0]
80006e2a:	af c0       	cbr	r0,0xe
80006e2c:	41 09       	lddsp	r9,sp[0x40]
80006e2e:	59 f8       	cp.w	r8,31
80006e30:	e0 89 00 13 	brgt	80006e56 <_vfprintf_r+0x14d2>
80006e34:	f2 cb ff fc 	sub	r11,r9,-4
80006e38:	51 0b       	stdsp	sp[0x40],r11
80006e3a:	72 09       	ld.w	r9,r9[0x0]
80006e3c:	fa c6 f9 44 	sub	r6,sp,-1724
80006e40:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006e44:	2f f8       	sub	r8,-1
80006e46:	f7 49 fd 88 	st.w	r11[-632],r9
80006e4a:	fb 48 06 b4 	st.w	sp[1716],r8
80006e4e:	14 97       	mov	r7,r10
80006e50:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006e54:	c0 58       	rjmp	80006e5e <_vfprintf_r+0x14da>
80006e56:	92 18       	ld.sh	r8,r9[0x2]
80006e58:	14 97       	mov	r7,r10
80006e5a:	2f c9       	sub	r9,-4
80006e5c:	51 09       	stdsp	sp[0x40],r9
80006e5e:	5c 78       	castu.h	r8
80006e60:	50 18       	stdsp	sp[0x4],r8
80006e62:	c4 68       	rjmp	80006eee <_vfprintf_r+0x156a>
80006e64:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006e68:	40 3c       	lddsp	r12,sp[0xc]
80006e6a:	58 0c       	cp.w	r12,0
80006e6c:	c1 d0       	breq	80006ea6 <_vfprintf_r+0x1522>
80006e6e:	10 36       	cp.w	r6,r8
80006e70:	c0 64       	brge	80006e7c <_vfprintf_r+0x14f8>
80006e72:	fa cb f9 44 	sub	r11,sp,-1724
80006e76:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006e7a:	c1 f8       	rjmp	80006eb8 <_vfprintf_r+0x1534>
80006e7c:	fa c8 f9 50 	sub	r8,sp,-1712
80006e80:	1a d8       	st.w	--sp,r8
80006e82:	fa c8 fa b8 	sub	r8,sp,-1352
80006e86:	0c 9b       	mov	r11,r6
80006e88:	1a d8       	st.w	--sp,r8
80006e8a:	fa c8 fb b4 	sub	r8,sp,-1100
80006e8e:	04 9a       	mov	r10,r2
80006e90:	1a d8       	st.w	--sp,r8
80006e92:	08 9c       	mov	r12,r4
80006e94:	fa c8 f9 40 	sub	r8,sp,-1728
80006e98:	fa c9 ff b4 	sub	r9,sp,-76
80006e9c:	f0 1f 00 cb 	mcall	800071c8 <_vfprintf_r+0x1844>
80006ea0:	2f dd       	sub	sp,-12
80006ea2:	78 0b       	ld.w	r11,r12[0x0]
80006ea4:	c2 48       	rjmp	80006eec <_vfprintf_r+0x1568>
80006ea6:	ee ca ff ff 	sub	r10,r7,-1
80006eaa:	10 37       	cp.w	r7,r8
80006eac:	c0 94       	brge	80006ebe <_vfprintf_r+0x153a>
80006eae:	fa c9 f9 44 	sub	r9,sp,-1724
80006eb2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006eb6:	14 97       	mov	r7,r10
80006eb8:	ec fb fd 88 	ld.w	r11,r6[-632]
80006ebc:	c1 88       	rjmp	80006eec <_vfprintf_r+0x1568>
80006ebe:	41 09       	lddsp	r9,sp[0x40]
80006ec0:	59 f8       	cp.w	r8,31
80006ec2:	e0 89 00 11 	brgt	80006ee4 <_vfprintf_r+0x1560>
80006ec6:	f2 cb ff fc 	sub	r11,r9,-4
80006eca:	51 0b       	stdsp	sp[0x40],r11
80006ecc:	fa c6 f9 44 	sub	r6,sp,-1724
80006ed0:	72 0b       	ld.w	r11,r9[0x0]
80006ed2:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006ed6:	f3 4b fd 88 	st.w	r9[-632],r11
80006eda:	2f f8       	sub	r8,-1
80006edc:	14 97       	mov	r7,r10
80006ede:	fb 48 06 b4 	st.w	sp[1716],r8
80006ee2:	c0 58       	rjmp	80006eec <_vfprintf_r+0x1568>
80006ee4:	72 0b       	ld.w	r11,r9[0x0]
80006ee6:	14 97       	mov	r7,r10
80006ee8:	2f c9       	sub	r9,-4
80006eea:	51 09       	stdsp	sp[0x40],r9
80006eec:	50 1b       	stdsp	sp[0x4],r11
80006eee:	30 0e       	mov	lr,0
80006ef0:	50 0e       	stdsp	sp[0x0],lr
80006ef2:	40 08       	lddsp	r8,sp[0x0]
80006ef4:	40 1c       	lddsp	r12,sp[0x4]
80006ef6:	18 48       	or	r8,r12
80006ef8:	5f 19       	srne	r9
80006efa:	0a 98       	mov	r8,r5
80006efc:	eb e9 00 09 	and	r9,r5,r9
80006f00:	a1 b8       	sbr	r8,0x1
80006f02:	58 09       	cp.w	r9,0
80006f04:	c0 70       	breq	80006f12 <_vfprintf_r+0x158e>
80006f06:	10 95       	mov	r5,r8
80006f08:	fb 60 06 b9 	st.b	sp[1721],r0
80006f0c:	33 08       	mov	r8,48
80006f0e:	fb 68 06 b8 	st.b	sp[1720],r8
80006f12:	30 28       	mov	r8,2
80006f14:	30 09       	mov	r9,0
80006f16:	fb 69 06 bb 	st.b	sp[1723],r9
80006f1a:	0a 99       	mov	r9,r5
80006f1c:	a7 d9       	cbr	r9,0x7
80006f1e:	40 2b       	lddsp	r11,sp[0x8]
80006f20:	40 16       	lddsp	r6,sp[0x4]
80006f22:	58 0b       	cp.w	r11,0
80006f24:	5f 1a       	srne	r10
80006f26:	f2 05 17 40 	movge	r5,r9
80006f2a:	fa c2 f9 78 	sub	r2,sp,-1672
80006f2e:	40 09       	lddsp	r9,sp[0x0]
80006f30:	0c 49       	or	r9,r6
80006f32:	5f 19       	srne	r9
80006f34:	f5 e9 10 09 	or	r9,r10,r9
80006f38:	c5 c0       	breq	80006ff0 <_vfprintf_r+0x166c>
80006f3a:	30 19       	mov	r9,1
80006f3c:	f2 08 18 00 	cp.b	r8,r9
80006f40:	c0 60       	breq	80006f4c <_vfprintf_r+0x15c8>
80006f42:	30 29       	mov	r9,2
80006f44:	f2 08 18 00 	cp.b	r8,r9
80006f48:	c0 41       	brne	80006f50 <_vfprintf_r+0x15cc>
80006f4a:	c3 c8       	rjmp	80006fc2 <_vfprintf_r+0x163e>
80006f4c:	04 96       	mov	r6,r2
80006f4e:	c3 08       	rjmp	80006fae <_vfprintf_r+0x162a>
80006f50:	04 96       	mov	r6,r2
80006f52:	fa e8 00 00 	ld.d	r8,sp[0]
80006f56:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80006f5a:	2d 0a       	sub	r10,-48
80006f5c:	0c fa       	st.b	--r6,r10
80006f5e:	f0 0b 16 03 	lsr	r11,r8,0x3
80006f62:	f2 0c 16 03 	lsr	r12,r9,0x3
80006f66:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80006f6a:	18 99       	mov	r9,r12
80006f6c:	16 98       	mov	r8,r11
80006f6e:	58 08       	cp.w	r8,0
80006f70:	5c 29       	cpc	r9
80006f72:	cf 21       	brne	80006f56 <_vfprintf_r+0x15d2>
80006f74:	fa e9 00 00 	st.d	sp[0],r8
80006f78:	ed b5 00 00 	bld	r5,0x0
80006f7c:	c4 51       	brne	80007006 <_vfprintf_r+0x1682>
80006f7e:	33 09       	mov	r9,48
80006f80:	f2 0a 18 00 	cp.b	r10,r9
80006f84:	c4 10       	breq	80007006 <_vfprintf_r+0x1682>
80006f86:	0c f9       	st.b	--r6,r9
80006f88:	c3 f8       	rjmp	80007006 <_vfprintf_r+0x1682>
80006f8a:	fa ea 00 00 	ld.d	r10,sp[0]
80006f8e:	30 a8       	mov	r8,10
80006f90:	30 09       	mov	r9,0
80006f92:	f0 1f 00 8f 	mcall	800071cc <_vfprintf_r+0x1848>
80006f96:	30 a8       	mov	r8,10
80006f98:	2d 0a       	sub	r10,-48
80006f9a:	30 09       	mov	r9,0
80006f9c:	ac 8a       	st.b	r6[0x0],r10
80006f9e:	fa ea 00 00 	ld.d	r10,sp[0]
80006fa2:	f0 1f 00 8c 	mcall	800071d0 <_vfprintf_r+0x184c>
80006fa6:	16 99       	mov	r9,r11
80006fa8:	14 98       	mov	r8,r10
80006faa:	fa e9 00 00 	st.d	sp[0],r8
80006fae:	20 16       	sub	r6,1
80006fb0:	fa ea 00 00 	ld.d	r10,sp[0]
80006fb4:	58 9a       	cp.w	r10,9
80006fb6:	5c 2b       	cpc	r11
80006fb8:	fe 9b ff e9 	brhi	80006f8a <_vfprintf_r+0x1606>
80006fbc:	1b f8       	ld.ub	r8,sp[0x7]
80006fbe:	2d 08       	sub	r8,-48
80006fc0:	c2 08       	rjmp	80007000 <_vfprintf_r+0x167c>
80006fc2:	04 96       	mov	r6,r2
80006fc4:	fa e8 00 00 	ld.d	r8,sp[0]
80006fc8:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80006fcc:	40 de       	lddsp	lr,sp[0x34]
80006fce:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80006fd2:	0c fa       	st.b	--r6,r10
80006fd4:	f2 0b 16 04 	lsr	r11,r9,0x4
80006fd8:	f0 0a 16 04 	lsr	r10,r8,0x4
80006fdc:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80006fe0:	16 99       	mov	r9,r11
80006fe2:	14 98       	mov	r8,r10
80006fe4:	58 08       	cp.w	r8,0
80006fe6:	5c 29       	cpc	r9
80006fe8:	cf 01       	brne	80006fc8 <_vfprintf_r+0x1644>
80006fea:	fa e9 00 00 	st.d	sp[0],r8
80006fee:	c0 c8       	rjmp	80007006 <_vfprintf_r+0x1682>
80006ff0:	58 08       	cp.w	r8,0
80006ff2:	c0 91       	brne	80007004 <_vfprintf_r+0x1680>
80006ff4:	ed b5 00 00 	bld	r5,0x0
80006ff8:	c0 61       	brne	80007004 <_vfprintf_r+0x1680>
80006ffa:	fa c6 f9 79 	sub	r6,sp,-1671
80006ffe:	33 08       	mov	r8,48
80007000:	ac 88       	st.b	r6[0x0],r8
80007002:	c0 28       	rjmp	80007006 <_vfprintf_r+0x1682>
80007004:	04 96       	mov	r6,r2
80007006:	0c 12       	sub	r2,r6
80007008:	c1 c8       	rjmp	80007040 <_vfprintf_r+0x16bc>
8000700a:	50 a7       	stdsp	sp[0x28],r7
8000700c:	50 80       	stdsp	sp[0x20],r0
8000700e:	40 93       	lddsp	r3,sp[0x24]
80007010:	0c 97       	mov	r7,r6
80007012:	10 90       	mov	r0,r8
80007014:	04 94       	mov	r4,r2
80007016:	40 41       	lddsp	r1,sp[0x10]
80007018:	58 08       	cp.w	r8,0
8000701a:	e0 80 04 65 	breq	800078e4 <_vfprintf_r+0x1f60>
8000701e:	fb 68 06 60 	st.b	sp[1632],r8
80007022:	30 0c       	mov	r12,0
80007024:	30 08       	mov	r8,0
80007026:	30 12       	mov	r2,1
80007028:	fb 68 06 bb 	st.b	sp[1723],r8
8000702c:	50 2c       	stdsp	sp[0x8],r12
8000702e:	fa c6 f9 a0 	sub	r6,sp,-1632
80007032:	c0 78       	rjmp	80007040 <_vfprintf_r+0x16bc>
80007034:	30 0b       	mov	r11,0
80007036:	50 2b       	stdsp	sp[0x8],r11
80007038:	c0 48       	rjmp	80007040 <_vfprintf_r+0x16bc>
8000703a:	40 22       	lddsp	r2,sp[0x8]
8000703c:	30 0a       	mov	r10,0
8000703e:	50 2a       	stdsp	sp[0x8],r10
80007040:	40 29       	lddsp	r9,sp[0x8]
80007042:	e4 09 0c 49 	max	r9,r2,r9
80007046:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000704a:	50 39       	stdsp	sp[0xc],r9
8000704c:	0a 9e       	mov	lr,r5
8000704e:	30 09       	mov	r9,0
80007050:	e2 1e 00 02 	andl	lr,0x2,COH
80007054:	f2 08 18 00 	cp.b	r8,r9
80007058:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000705c:	f7 b8 01 ff 	subne	r8,-1
80007060:	fb f8 1a 03 	st.wne	sp[0xc],r8
80007064:	0a 9b       	mov	r11,r5
80007066:	58 0e       	cp.w	lr,0
80007068:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000706c:	f7 bc 01 fe 	subne	r12,-2
80007070:	fb fc 1a 03 	st.wne	sp[0xc],r12
80007074:	e2 1b 00 84 	andl	r11,0x84,COH
80007078:	50 fe       	stdsp	sp[0x3c],lr
8000707a:	50 9b       	stdsp	sp[0x24],r11
8000707c:	c4 51       	brne	80007106 <_vfprintf_r+0x1782>
8000707e:	40 8a       	lddsp	r10,sp[0x20]
80007080:	40 39       	lddsp	r9,sp[0xc]
80007082:	12 1a       	sub	r10,r9
80007084:	50 4a       	stdsp	sp[0x10],r10
80007086:	58 0a       	cp.w	r10,0
80007088:	e0 89 00 1f 	brgt	800070c6 <_vfprintf_r+0x1742>
8000708c:	c3 d8       	rjmp	80007106 <_vfprintf_r+0x1782>
8000708e:	2f 09       	sub	r9,-16
80007090:	2f f8       	sub	r8,-1
80007092:	4d 1e       	lddpc	lr,800071d4 <_vfprintf_r+0x1850>
80007094:	31 0c       	mov	r12,16
80007096:	fb 49 06 90 	st.w	sp[1680],r9
8000709a:	87 0e       	st.w	r3[0x0],lr
8000709c:	87 1c       	st.w	r3[0x4],r12
8000709e:	fb 48 06 8c 	st.w	sp[1676],r8
800070a2:	58 78       	cp.w	r8,7
800070a4:	e0 89 00 04 	brgt	800070ac <_vfprintf_r+0x1728>
800070a8:	2f 83       	sub	r3,-8
800070aa:	c0 b8       	rjmp	800070c0 <_vfprintf_r+0x173c>
800070ac:	fa ca f9 78 	sub	r10,sp,-1672
800070b0:	02 9b       	mov	r11,r1
800070b2:	08 9c       	mov	r12,r4
800070b4:	f0 1f 00 49 	mcall	800071d8 <_vfprintf_r+0x1854>
800070b8:	e0 81 04 27 	brne	80007906 <_vfprintf_r+0x1f82>
800070bc:	fa c3 f9 e0 	sub	r3,sp,-1568
800070c0:	40 4b       	lddsp	r11,sp[0x10]
800070c2:	21 0b       	sub	r11,16
800070c4:	50 4b       	stdsp	sp[0x10],r11
800070c6:	fa f9 06 90 	ld.w	r9,sp[1680]
800070ca:	fa f8 06 8c 	ld.w	r8,sp[1676]
800070ce:	4c 2a       	lddpc	r10,800071d4 <_vfprintf_r+0x1850>
800070d0:	40 4e       	lddsp	lr,sp[0x10]
800070d2:	59 0e       	cp.w	lr,16
800070d4:	fe 99 ff dd 	brgt	8000708e <_vfprintf_r+0x170a>
800070d8:	1c 09       	add	r9,lr
800070da:	2f f8       	sub	r8,-1
800070dc:	87 0a       	st.w	r3[0x0],r10
800070de:	fb 49 06 90 	st.w	sp[1680],r9
800070e2:	87 1e       	st.w	r3[0x4],lr
800070e4:	fb 48 06 8c 	st.w	sp[1676],r8
800070e8:	58 78       	cp.w	r8,7
800070ea:	e0 89 00 04 	brgt	800070f2 <_vfprintf_r+0x176e>
800070ee:	2f 83       	sub	r3,-8
800070f0:	c0 b8       	rjmp	80007106 <_vfprintf_r+0x1782>
800070f2:	fa ca f9 78 	sub	r10,sp,-1672
800070f6:	02 9b       	mov	r11,r1
800070f8:	08 9c       	mov	r12,r4
800070fa:	f0 1f 00 38 	mcall	800071d8 <_vfprintf_r+0x1854>
800070fe:	e0 81 04 04 	brne	80007906 <_vfprintf_r+0x1f82>
80007102:	fa c3 f9 e0 	sub	r3,sp,-1568
80007106:	30 09       	mov	r9,0
80007108:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000710c:	f2 08 18 00 	cp.b	r8,r9
80007110:	c1 f0       	breq	8000714e <_vfprintf_r+0x17ca>
80007112:	fa f8 06 90 	ld.w	r8,sp[1680]
80007116:	fa c9 f9 45 	sub	r9,sp,-1723
8000711a:	2f f8       	sub	r8,-1
8000711c:	87 09       	st.w	r3[0x0],r9
8000711e:	fb 48 06 90 	st.w	sp[1680],r8
80007122:	30 19       	mov	r9,1
80007124:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007128:	87 19       	st.w	r3[0x4],r9
8000712a:	2f f8       	sub	r8,-1
8000712c:	fb 48 06 8c 	st.w	sp[1676],r8
80007130:	58 78       	cp.w	r8,7
80007132:	e0 89 00 04 	brgt	8000713a <_vfprintf_r+0x17b6>
80007136:	2f 83       	sub	r3,-8
80007138:	c0 b8       	rjmp	8000714e <_vfprintf_r+0x17ca>
8000713a:	fa ca f9 78 	sub	r10,sp,-1672
8000713e:	02 9b       	mov	r11,r1
80007140:	08 9c       	mov	r12,r4
80007142:	f0 1f 00 26 	mcall	800071d8 <_vfprintf_r+0x1854>
80007146:	e0 81 03 e0 	brne	80007906 <_vfprintf_r+0x1f82>
8000714a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000714e:	40 fc       	lddsp	r12,sp[0x3c]
80007150:	58 0c       	cp.w	r12,0
80007152:	c1 f0       	breq	80007190 <_vfprintf_r+0x180c>
80007154:	fa f8 06 90 	ld.w	r8,sp[1680]
80007158:	fa c9 f9 48 	sub	r9,sp,-1720
8000715c:	2f e8       	sub	r8,-2
8000715e:	87 09       	st.w	r3[0x0],r9
80007160:	fb 48 06 90 	st.w	sp[1680],r8
80007164:	30 29       	mov	r9,2
80007166:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000716a:	87 19       	st.w	r3[0x4],r9
8000716c:	2f f8       	sub	r8,-1
8000716e:	fb 48 06 8c 	st.w	sp[1676],r8
80007172:	58 78       	cp.w	r8,7
80007174:	e0 89 00 04 	brgt	8000717c <_vfprintf_r+0x17f8>
80007178:	2f 83       	sub	r3,-8
8000717a:	c0 b8       	rjmp	80007190 <_vfprintf_r+0x180c>
8000717c:	fa ca f9 78 	sub	r10,sp,-1672
80007180:	02 9b       	mov	r11,r1
80007182:	08 9c       	mov	r12,r4
80007184:	f0 1f 00 15 	mcall	800071d8 <_vfprintf_r+0x1854>
80007188:	e0 81 03 bf 	brne	80007906 <_vfprintf_r+0x1f82>
8000718c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007190:	40 9b       	lddsp	r11,sp[0x24]
80007192:	e0 4b 00 80 	cp.w	r11,128
80007196:	c5 21       	brne	8000723a <_vfprintf_r+0x18b6>
80007198:	40 8a       	lddsp	r10,sp[0x20]
8000719a:	40 39       	lddsp	r9,sp[0xc]
8000719c:	12 1a       	sub	r10,r9
8000719e:	50 4a       	stdsp	sp[0x10],r10
800071a0:	58 0a       	cp.w	r10,0
800071a2:	e0 89 00 2c 	brgt	800071fa <_vfprintf_r+0x1876>
800071a6:	c4 a8       	rjmp	8000723a <_vfprintf_r+0x18b6>
800071a8:	2f 09       	sub	r9,-16
800071aa:	2f f8       	sub	r8,-1
800071ac:	48 ce       	lddpc	lr,800071dc <_vfprintf_r+0x1858>
800071ae:	31 0c       	mov	r12,16
800071b0:	fb 49 06 90 	st.w	sp[1680],r9
800071b4:	87 0e       	st.w	r3[0x0],lr
800071b6:	87 1c       	st.w	r3[0x4],r12
800071b8:	fb 48 06 8c 	st.w	sp[1676],r8
800071bc:	58 78       	cp.w	r8,7
800071be:	e0 89 00 11 	brgt	800071e0 <_vfprintf_r+0x185c>
800071c2:	2f 83       	sub	r3,-8
800071c4:	c1 88       	rjmp	800071f4 <_vfprintf_r+0x1870>
800071c6:	00 00       	add	r0,r0
800071c8:	80 00       	ld.sh	r0,r0[0x0]
800071ca:	56 40       	stdsp	sp[0x190],r0
800071cc:	80 00       	ld.sh	r0,r0[0x0]
800071ce:	a7 bc       	sbr	r12,0x7
800071d0:	80 00       	ld.sh	r0,r0[0x0]
800071d2:	a5 58       	asr	r8,0x5
800071d4:	80 00       	ld.sh	r0,r0[0x0]
800071d6:	af d8       	cbr	r8,0xf
800071d8:	80 00       	ld.sh	r0,r0[0x0]
800071da:	59 64       	cp.w	r4,22
800071dc:	80 00       	ld.sh	r0,r0[0x0]
800071de:	af e8       	*unknown*
800071e0:	fa ca f9 78 	sub	r10,sp,-1672
800071e4:	02 9b       	mov	r11,r1
800071e6:	08 9c       	mov	r12,r4
800071e8:	f0 1f 00 4c 	mcall	80007318 <_vfprintf_r+0x1994>
800071ec:	e0 81 03 8d 	brne	80007906 <_vfprintf_r+0x1f82>
800071f0:	fa c3 f9 e0 	sub	r3,sp,-1568
800071f4:	40 4b       	lddsp	r11,sp[0x10]
800071f6:	21 0b       	sub	r11,16
800071f8:	50 4b       	stdsp	sp[0x10],r11
800071fa:	fa f9 06 90 	ld.w	r9,sp[1680]
800071fe:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007202:	4c 7a       	lddpc	r10,8000731c <_vfprintf_r+0x1998>
80007204:	40 4e       	lddsp	lr,sp[0x10]
80007206:	59 0e       	cp.w	lr,16
80007208:	fe 99 ff d0 	brgt	800071a8 <_vfprintf_r+0x1824>
8000720c:	1c 09       	add	r9,lr
8000720e:	2f f8       	sub	r8,-1
80007210:	87 0a       	st.w	r3[0x0],r10
80007212:	fb 49 06 90 	st.w	sp[1680],r9
80007216:	87 1e       	st.w	r3[0x4],lr
80007218:	fb 48 06 8c 	st.w	sp[1676],r8
8000721c:	58 78       	cp.w	r8,7
8000721e:	e0 89 00 04 	brgt	80007226 <_vfprintf_r+0x18a2>
80007222:	2f 83       	sub	r3,-8
80007224:	c0 b8       	rjmp	8000723a <_vfprintf_r+0x18b6>
80007226:	fa ca f9 78 	sub	r10,sp,-1672
8000722a:	02 9b       	mov	r11,r1
8000722c:	08 9c       	mov	r12,r4
8000722e:	f0 1f 00 3b 	mcall	80007318 <_vfprintf_r+0x1994>
80007232:	e0 81 03 6a 	brne	80007906 <_vfprintf_r+0x1f82>
80007236:	fa c3 f9 e0 	sub	r3,sp,-1568
8000723a:	40 2c       	lddsp	r12,sp[0x8]
8000723c:	04 1c       	sub	r12,r2
8000723e:	50 2c       	stdsp	sp[0x8],r12
80007240:	58 0c       	cp.w	r12,0
80007242:	e0 89 00 1f 	brgt	80007280 <_vfprintf_r+0x18fc>
80007246:	c3 d8       	rjmp	800072c0 <_vfprintf_r+0x193c>
80007248:	2f 09       	sub	r9,-16
8000724a:	2f f8       	sub	r8,-1
8000724c:	4b 4b       	lddpc	r11,8000731c <_vfprintf_r+0x1998>
8000724e:	31 0a       	mov	r10,16
80007250:	fb 49 06 90 	st.w	sp[1680],r9
80007254:	87 0b       	st.w	r3[0x0],r11
80007256:	87 1a       	st.w	r3[0x4],r10
80007258:	fb 48 06 8c 	st.w	sp[1676],r8
8000725c:	58 78       	cp.w	r8,7
8000725e:	e0 89 00 04 	brgt	80007266 <_vfprintf_r+0x18e2>
80007262:	2f 83       	sub	r3,-8
80007264:	c0 b8       	rjmp	8000727a <_vfprintf_r+0x18f6>
80007266:	fa ca f9 78 	sub	r10,sp,-1672
8000726a:	02 9b       	mov	r11,r1
8000726c:	08 9c       	mov	r12,r4
8000726e:	f0 1f 00 2b 	mcall	80007318 <_vfprintf_r+0x1994>
80007272:	e0 81 03 4a 	brne	80007906 <_vfprintf_r+0x1f82>
80007276:	fa c3 f9 e0 	sub	r3,sp,-1568
8000727a:	40 29       	lddsp	r9,sp[0x8]
8000727c:	21 09       	sub	r9,16
8000727e:	50 29       	stdsp	sp[0x8],r9
80007280:	fa f9 06 90 	ld.w	r9,sp[1680]
80007284:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007288:	4a 5a       	lddpc	r10,8000731c <_vfprintf_r+0x1998>
8000728a:	40 2e       	lddsp	lr,sp[0x8]
8000728c:	59 0e       	cp.w	lr,16
8000728e:	fe 99 ff dd 	brgt	80007248 <_vfprintf_r+0x18c4>
80007292:	1c 09       	add	r9,lr
80007294:	2f f8       	sub	r8,-1
80007296:	87 0a       	st.w	r3[0x0],r10
80007298:	fb 49 06 90 	st.w	sp[1680],r9
8000729c:	87 1e       	st.w	r3[0x4],lr
8000729e:	fb 48 06 8c 	st.w	sp[1676],r8
800072a2:	58 78       	cp.w	r8,7
800072a4:	e0 89 00 04 	brgt	800072ac <_vfprintf_r+0x1928>
800072a8:	2f 83       	sub	r3,-8
800072aa:	c0 b8       	rjmp	800072c0 <_vfprintf_r+0x193c>
800072ac:	fa ca f9 78 	sub	r10,sp,-1672
800072b0:	02 9b       	mov	r11,r1
800072b2:	08 9c       	mov	r12,r4
800072b4:	f0 1f 00 19 	mcall	80007318 <_vfprintf_r+0x1994>
800072b8:	e0 81 03 27 	brne	80007906 <_vfprintf_r+0x1f82>
800072bc:	fa c3 f9 e0 	sub	r3,sp,-1568
800072c0:	ed b5 00 08 	bld	r5,0x8
800072c4:	c0 b0       	breq	800072da <_vfprintf_r+0x1956>
800072c6:	fa f8 06 90 	ld.w	r8,sp[1680]
800072ca:	87 12       	st.w	r3[0x4],r2
800072cc:	87 06       	st.w	r3[0x0],r6
800072ce:	f0 02 00 02 	add	r2,r8,r2
800072d2:	fb 42 06 90 	st.w	sp[1680],r2
800072d6:	e0 8f 01 db 	bral	8000768c <_vfprintf_r+0x1d08>
800072da:	e0 40 00 65 	cp.w	r0,101
800072de:	e0 8a 01 dd 	brle	80007698 <_vfprintf_r+0x1d14>
800072e2:	30 08       	mov	r8,0
800072e4:	30 09       	mov	r9,0
800072e6:	40 5b       	lddsp	r11,sp[0x14]
800072e8:	40 7a       	lddsp	r10,sp[0x1c]
800072ea:	f0 1f 00 0e 	mcall	80007320 <_vfprintf_r+0x199c>
800072ee:	c7 e0       	breq	800073ea <_vfprintf_r+0x1a66>
800072f0:	fa f8 06 90 	ld.w	r8,sp[1680]
800072f4:	48 c9       	lddpc	r9,80007324 <_vfprintf_r+0x19a0>
800072f6:	2f f8       	sub	r8,-1
800072f8:	87 09       	st.w	r3[0x0],r9
800072fa:	fb 48 06 90 	st.w	sp[1680],r8
800072fe:	30 19       	mov	r9,1
80007300:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007304:	87 19       	st.w	r3[0x4],r9
80007306:	2f f8       	sub	r8,-1
80007308:	fb 48 06 8c 	st.w	sp[1676],r8
8000730c:	58 78       	cp.w	r8,7
8000730e:	e0 89 00 0d 	brgt	80007328 <_vfprintf_r+0x19a4>
80007312:	2f 83       	sub	r3,-8
80007314:	c1 48       	rjmp	8000733c <_vfprintf_r+0x19b8>
80007316:	00 00       	add	r0,r0
80007318:	80 00       	ld.sh	r0,r0[0x0]
8000731a:	59 64       	cp.w	r4,22
8000731c:	80 00       	ld.sh	r0,r0[0x0]
8000731e:	af e8       	*unknown*
80007320:	80 00       	ld.sh	r0,r0[0x0]
80007322:	a1 4a       	asr	r10,0x0
80007324:	80 00       	ld.sh	r0,r0[0x0]
80007326:	af d4       	cbr	r4,0xf
80007328:	fa ca f9 78 	sub	r10,sp,-1672
8000732c:	02 9b       	mov	r11,r1
8000732e:	08 9c       	mov	r12,r4
80007330:	f0 1f 00 78 	mcall	80007510 <_vfprintf_r+0x1b8c>
80007334:	e0 81 02 e9 	brne	80007906 <_vfprintf_r+0x1f82>
80007338:	fa c3 f9 e0 	sub	r3,sp,-1568
8000733c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007340:	40 6c       	lddsp	r12,sp[0x18]
80007342:	18 38       	cp.w	r8,r12
80007344:	c0 55       	brlt	8000734e <_vfprintf_r+0x19ca>
80007346:	ed b5 00 00 	bld	r5,0x0
8000734a:	e0 81 02 6d 	brne	80007824 <_vfprintf_r+0x1ea0>
8000734e:	fa f8 06 90 	ld.w	r8,sp[1680]
80007352:	2f f8       	sub	r8,-1
80007354:	40 cb       	lddsp	r11,sp[0x30]
80007356:	fb 48 06 90 	st.w	sp[1680],r8
8000735a:	30 19       	mov	r9,1
8000735c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007360:	87 0b       	st.w	r3[0x0],r11
80007362:	2f f8       	sub	r8,-1
80007364:	87 19       	st.w	r3[0x4],r9
80007366:	fb 48 06 8c 	st.w	sp[1676],r8
8000736a:	58 78       	cp.w	r8,7
8000736c:	e0 89 00 04 	brgt	80007374 <_vfprintf_r+0x19f0>
80007370:	2f 83       	sub	r3,-8
80007372:	c0 b8       	rjmp	80007388 <_vfprintf_r+0x1a04>
80007374:	fa ca f9 78 	sub	r10,sp,-1672
80007378:	02 9b       	mov	r11,r1
8000737a:	08 9c       	mov	r12,r4
8000737c:	f0 1f 00 65 	mcall	80007510 <_vfprintf_r+0x1b8c>
80007380:	e0 81 02 c3 	brne	80007906 <_vfprintf_r+0x1f82>
80007384:	fa c3 f9 e0 	sub	r3,sp,-1568
80007388:	40 66       	lddsp	r6,sp[0x18]
8000738a:	20 16       	sub	r6,1
8000738c:	58 06       	cp.w	r6,0
8000738e:	e0 89 00 1d 	brgt	800073c8 <_vfprintf_r+0x1a44>
80007392:	e0 8f 02 49 	bral	80007824 <_vfprintf_r+0x1ea0>
80007396:	2f 09       	sub	r9,-16
80007398:	2f f8       	sub	r8,-1
8000739a:	fb 49 06 90 	st.w	sp[1680],r9
8000739e:	87 02       	st.w	r3[0x0],r2
800073a0:	87 10       	st.w	r3[0x4],r0
800073a2:	fb 48 06 8c 	st.w	sp[1676],r8
800073a6:	58 78       	cp.w	r8,7
800073a8:	e0 89 00 04 	brgt	800073b0 <_vfprintf_r+0x1a2c>
800073ac:	2f 83       	sub	r3,-8
800073ae:	c0 b8       	rjmp	800073c4 <_vfprintf_r+0x1a40>
800073b0:	fa ca f9 78 	sub	r10,sp,-1672
800073b4:	02 9b       	mov	r11,r1
800073b6:	08 9c       	mov	r12,r4
800073b8:	f0 1f 00 56 	mcall	80007510 <_vfprintf_r+0x1b8c>
800073bc:	e0 81 02 a5 	brne	80007906 <_vfprintf_r+0x1f82>
800073c0:	fa c3 f9 e0 	sub	r3,sp,-1568
800073c4:	21 06       	sub	r6,16
800073c6:	c0 38       	rjmp	800073cc <_vfprintf_r+0x1a48>
800073c8:	4d 32       	lddpc	r2,80007514 <_vfprintf_r+0x1b90>
800073ca:	31 00       	mov	r0,16
800073cc:	fa f9 06 90 	ld.w	r9,sp[1680]
800073d0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800073d4:	4d 0a       	lddpc	r10,80007514 <_vfprintf_r+0x1b90>
800073d6:	59 06       	cp.w	r6,16
800073d8:	fe 99 ff df 	brgt	80007396 <_vfprintf_r+0x1a12>
800073dc:	0c 09       	add	r9,r6
800073de:	87 0a       	st.w	r3[0x0],r10
800073e0:	fb 49 06 90 	st.w	sp[1680],r9
800073e4:	2f f8       	sub	r8,-1
800073e6:	87 16       	st.w	r3[0x4],r6
800073e8:	c5 59       	rjmp	80007692 <_vfprintf_r+0x1d0e>
800073ea:	fa fa 06 ac 	ld.w	r10,sp[1708]
800073ee:	58 0a       	cp.w	r10,0
800073f0:	e0 89 00 96 	brgt	8000751c <_vfprintf_r+0x1b98>
800073f4:	fa f8 06 90 	ld.w	r8,sp[1680]
800073f8:	4c 89       	lddpc	r9,80007518 <_vfprintf_r+0x1b94>
800073fa:	2f f8       	sub	r8,-1
800073fc:	87 09       	st.w	r3[0x0],r9
800073fe:	fb 48 06 90 	st.w	sp[1680],r8
80007402:	30 19       	mov	r9,1
80007404:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007408:	87 19       	st.w	r3[0x4],r9
8000740a:	2f f8       	sub	r8,-1
8000740c:	fb 48 06 8c 	st.w	sp[1676],r8
80007410:	58 78       	cp.w	r8,7
80007412:	e0 89 00 04 	brgt	8000741a <_vfprintf_r+0x1a96>
80007416:	2f 83       	sub	r3,-8
80007418:	c0 b8       	rjmp	8000742e <_vfprintf_r+0x1aaa>
8000741a:	fa ca f9 78 	sub	r10,sp,-1672
8000741e:	02 9b       	mov	r11,r1
80007420:	08 9c       	mov	r12,r4
80007422:	f0 1f 00 3c 	mcall	80007510 <_vfprintf_r+0x1b8c>
80007426:	e0 81 02 70 	brne	80007906 <_vfprintf_r+0x1f82>
8000742a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000742e:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007432:	58 08       	cp.w	r8,0
80007434:	c0 81       	brne	80007444 <_vfprintf_r+0x1ac0>
80007436:	40 6a       	lddsp	r10,sp[0x18]
80007438:	58 0a       	cp.w	r10,0
8000743a:	c0 51       	brne	80007444 <_vfprintf_r+0x1ac0>
8000743c:	ed b5 00 00 	bld	r5,0x0
80007440:	e0 81 01 f2 	brne	80007824 <_vfprintf_r+0x1ea0>
80007444:	40 c9       	lddsp	r9,sp[0x30]
80007446:	fa f8 06 90 	ld.w	r8,sp[1680]
8000744a:	2f f8       	sub	r8,-1
8000744c:	87 09       	st.w	r3[0x0],r9
8000744e:	fb 48 06 90 	st.w	sp[1680],r8
80007452:	30 19       	mov	r9,1
80007454:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007458:	87 19       	st.w	r3[0x4],r9
8000745a:	2f f8       	sub	r8,-1
8000745c:	fb 48 06 8c 	st.w	sp[1676],r8
80007460:	58 78       	cp.w	r8,7
80007462:	e0 89 00 04 	brgt	8000746a <_vfprintf_r+0x1ae6>
80007466:	2f 83       	sub	r3,-8
80007468:	c0 b8       	rjmp	8000747e <_vfprintf_r+0x1afa>
8000746a:	fa ca f9 78 	sub	r10,sp,-1672
8000746e:	02 9b       	mov	r11,r1
80007470:	08 9c       	mov	r12,r4
80007472:	f0 1f 00 28 	mcall	80007510 <_vfprintf_r+0x1b8c>
80007476:	e0 81 02 48 	brne	80007906 <_vfprintf_r+0x1f82>
8000747a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000747e:	fa f2 06 ac 	ld.w	r2,sp[1708]
80007482:	5c 32       	neg	r2
80007484:	58 02       	cp.w	r2,0
80007486:	e0 89 00 1d 	brgt	800074c0 <_vfprintf_r+0x1b3c>
8000748a:	c3 b8       	rjmp	80007500 <_vfprintf_r+0x1b7c>
8000748c:	2f 09       	sub	r9,-16
8000748e:	2f f8       	sub	r8,-1
80007490:	31 0e       	mov	lr,16
80007492:	fb 49 06 90 	st.w	sp[1680],r9
80007496:	87 00       	st.w	r3[0x0],r0
80007498:	87 1e       	st.w	r3[0x4],lr
8000749a:	fb 48 06 8c 	st.w	sp[1676],r8
8000749e:	58 78       	cp.w	r8,7
800074a0:	e0 89 00 04 	brgt	800074a8 <_vfprintf_r+0x1b24>
800074a4:	2f 83       	sub	r3,-8
800074a6:	c0 b8       	rjmp	800074bc <_vfprintf_r+0x1b38>
800074a8:	fa ca f9 78 	sub	r10,sp,-1672
800074ac:	02 9b       	mov	r11,r1
800074ae:	08 9c       	mov	r12,r4
800074b0:	f0 1f 00 18 	mcall	80007510 <_vfprintf_r+0x1b8c>
800074b4:	e0 81 02 29 	brne	80007906 <_vfprintf_r+0x1f82>
800074b8:	fa c3 f9 e0 	sub	r3,sp,-1568
800074bc:	21 02       	sub	r2,16
800074be:	c0 28       	rjmp	800074c2 <_vfprintf_r+0x1b3e>
800074c0:	49 50       	lddpc	r0,80007514 <_vfprintf_r+0x1b90>
800074c2:	fa f9 06 90 	ld.w	r9,sp[1680]
800074c6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800074ca:	49 3a       	lddpc	r10,80007514 <_vfprintf_r+0x1b90>
800074cc:	59 02       	cp.w	r2,16
800074ce:	fe 99 ff df 	brgt	8000748c <_vfprintf_r+0x1b08>
800074d2:	04 09       	add	r9,r2
800074d4:	2f f8       	sub	r8,-1
800074d6:	87 0a       	st.w	r3[0x0],r10
800074d8:	fb 49 06 90 	st.w	sp[1680],r9
800074dc:	87 12       	st.w	r3[0x4],r2
800074de:	fb 48 06 8c 	st.w	sp[1676],r8
800074e2:	58 78       	cp.w	r8,7
800074e4:	e0 89 00 04 	brgt	800074ec <_vfprintf_r+0x1b68>
800074e8:	2f 83       	sub	r3,-8
800074ea:	c0 b8       	rjmp	80007500 <_vfprintf_r+0x1b7c>
800074ec:	fa ca f9 78 	sub	r10,sp,-1672
800074f0:	02 9b       	mov	r11,r1
800074f2:	08 9c       	mov	r12,r4
800074f4:	f0 1f 00 07 	mcall	80007510 <_vfprintf_r+0x1b8c>
800074f8:	e0 81 02 07 	brne	80007906 <_vfprintf_r+0x1f82>
800074fc:	fa c3 f9 e0 	sub	r3,sp,-1568
80007500:	40 6c       	lddsp	r12,sp[0x18]
80007502:	fa f8 06 90 	ld.w	r8,sp[1680]
80007506:	87 06       	st.w	r3[0x0],r6
80007508:	87 1c       	st.w	r3[0x4],r12
8000750a:	18 08       	add	r8,r12
8000750c:	cb e8       	rjmp	80007688 <_vfprintf_r+0x1d04>
8000750e:	00 00       	add	r0,r0
80007510:	80 00       	ld.sh	r0,r0[0x0]
80007512:	59 64       	cp.w	r4,22
80007514:	80 00       	ld.sh	r0,r0[0x0]
80007516:	af e8       	*unknown*
80007518:	80 00       	ld.sh	r0,r0[0x0]
8000751a:	af d4       	cbr	r4,0xf
8000751c:	fa f9 06 90 	ld.w	r9,sp[1680]
80007520:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007524:	40 6b       	lddsp	r11,sp[0x18]
80007526:	16 3a       	cp.w	r10,r11
80007528:	c6 d5       	brlt	80007602 <_vfprintf_r+0x1c7e>
8000752a:	16 09       	add	r9,r11
8000752c:	2f f8       	sub	r8,-1
8000752e:	87 06       	st.w	r3[0x0],r6
80007530:	fb 49 06 90 	st.w	sp[1680],r9
80007534:	87 1b       	st.w	r3[0x4],r11
80007536:	fb 48 06 8c 	st.w	sp[1676],r8
8000753a:	58 78       	cp.w	r8,7
8000753c:	e0 89 00 04 	brgt	80007544 <_vfprintf_r+0x1bc0>
80007540:	2f 83       	sub	r3,-8
80007542:	c0 b8       	rjmp	80007558 <_vfprintf_r+0x1bd4>
80007544:	fa ca f9 78 	sub	r10,sp,-1672
80007548:	02 9b       	mov	r11,r1
8000754a:	08 9c       	mov	r12,r4
8000754c:	f0 1f 00 6f 	mcall	80007708 <_vfprintf_r+0x1d84>
80007550:	e0 81 01 db 	brne	80007906 <_vfprintf_r+0x1f82>
80007554:	fa c3 f9 e0 	sub	r3,sp,-1568
80007558:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000755c:	40 6a       	lddsp	r10,sp[0x18]
8000755e:	14 16       	sub	r6,r10
80007560:	58 06       	cp.w	r6,0
80007562:	e0 89 00 1c 	brgt	8000759a <_vfprintf_r+0x1c16>
80007566:	c3 b8       	rjmp	800075dc <_vfprintf_r+0x1c58>
80007568:	2f 09       	sub	r9,-16
8000756a:	2f f8       	sub	r8,-1
8000756c:	fb 49 06 90 	st.w	sp[1680],r9
80007570:	87 02       	st.w	r3[0x0],r2
80007572:	87 10       	st.w	r3[0x4],r0
80007574:	fb 48 06 8c 	st.w	sp[1676],r8
80007578:	58 78       	cp.w	r8,7
8000757a:	e0 89 00 04 	brgt	80007582 <_vfprintf_r+0x1bfe>
8000757e:	2f 83       	sub	r3,-8
80007580:	c0 b8       	rjmp	80007596 <_vfprintf_r+0x1c12>
80007582:	fa ca f9 78 	sub	r10,sp,-1672
80007586:	02 9b       	mov	r11,r1
80007588:	08 9c       	mov	r12,r4
8000758a:	f0 1f 00 60 	mcall	80007708 <_vfprintf_r+0x1d84>
8000758e:	e0 81 01 bc 	brne	80007906 <_vfprintf_r+0x1f82>
80007592:	fa c3 f9 e0 	sub	r3,sp,-1568
80007596:	21 06       	sub	r6,16
80007598:	c0 38       	rjmp	8000759e <_vfprintf_r+0x1c1a>
8000759a:	4d d2       	lddpc	r2,8000770c <_vfprintf_r+0x1d88>
8000759c:	31 00       	mov	r0,16
8000759e:	fa f9 06 90 	ld.w	r9,sp[1680]
800075a2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800075a6:	4d aa       	lddpc	r10,8000770c <_vfprintf_r+0x1d88>
800075a8:	59 06       	cp.w	r6,16
800075aa:	fe 99 ff df 	brgt	80007568 <_vfprintf_r+0x1be4>
800075ae:	0c 09       	add	r9,r6
800075b0:	2f f8       	sub	r8,-1
800075b2:	87 0a       	st.w	r3[0x0],r10
800075b4:	fb 49 06 90 	st.w	sp[1680],r9
800075b8:	87 16       	st.w	r3[0x4],r6
800075ba:	fb 48 06 8c 	st.w	sp[1676],r8
800075be:	58 78       	cp.w	r8,7
800075c0:	e0 89 00 04 	brgt	800075c8 <_vfprintf_r+0x1c44>
800075c4:	2f 83       	sub	r3,-8
800075c6:	c0 b8       	rjmp	800075dc <_vfprintf_r+0x1c58>
800075c8:	fa ca f9 78 	sub	r10,sp,-1672
800075cc:	02 9b       	mov	r11,r1
800075ce:	08 9c       	mov	r12,r4
800075d0:	f0 1f 00 4e 	mcall	80007708 <_vfprintf_r+0x1d84>
800075d4:	e0 81 01 99 	brne	80007906 <_vfprintf_r+0x1f82>
800075d8:	fa c3 f9 e0 	sub	r3,sp,-1568
800075dc:	ed b5 00 00 	bld	r5,0x0
800075e0:	e0 81 01 22 	brne	80007824 <_vfprintf_r+0x1ea0>
800075e4:	40 c9       	lddsp	r9,sp[0x30]
800075e6:	fa f8 06 90 	ld.w	r8,sp[1680]
800075ea:	2f f8       	sub	r8,-1
800075ec:	87 09       	st.w	r3[0x0],r9
800075ee:	fb 48 06 90 	st.w	sp[1680],r8
800075f2:	30 19       	mov	r9,1
800075f4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800075f8:	87 19       	st.w	r3[0x4],r9
800075fa:	2f f8       	sub	r8,-1
800075fc:	fb 48 06 8c 	st.w	sp[1676],r8
80007600:	c0 49       	rjmp	80007808 <_vfprintf_r+0x1e84>
80007602:	14 09       	add	r9,r10
80007604:	2f f8       	sub	r8,-1
80007606:	fb 49 06 90 	st.w	sp[1680],r9
8000760a:	87 06       	st.w	r3[0x0],r6
8000760c:	87 1a       	st.w	r3[0x4],r10
8000760e:	fb 48 06 8c 	st.w	sp[1676],r8
80007612:	58 78       	cp.w	r8,7
80007614:	e0 89 00 04 	brgt	8000761c <_vfprintf_r+0x1c98>
80007618:	2f 83       	sub	r3,-8
8000761a:	c0 b8       	rjmp	80007630 <_vfprintf_r+0x1cac>
8000761c:	fa ca f9 78 	sub	r10,sp,-1672
80007620:	02 9b       	mov	r11,r1
80007622:	08 9c       	mov	r12,r4
80007624:	f0 1f 00 39 	mcall	80007708 <_vfprintf_r+0x1d84>
80007628:	e0 81 01 6f 	brne	80007906 <_vfprintf_r+0x1f82>
8000762c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007630:	40 c8       	lddsp	r8,sp[0x30]
80007632:	87 08       	st.w	r3[0x0],r8
80007634:	fa f8 06 90 	ld.w	r8,sp[1680]
80007638:	2f f8       	sub	r8,-1
8000763a:	30 19       	mov	r9,1
8000763c:	fb 48 06 90 	st.w	sp[1680],r8
80007640:	87 19       	st.w	r3[0x4],r9
80007642:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007646:	2f f8       	sub	r8,-1
80007648:	fb 48 06 8c 	st.w	sp[1676],r8
8000764c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80007650:	58 78       	cp.w	r8,7
80007652:	e0 89 00 04 	brgt	8000765a <_vfprintf_r+0x1cd6>
80007656:	2f 83       	sub	r3,-8
80007658:	c0 b8       	rjmp	8000766e <_vfprintf_r+0x1cea>
8000765a:	fa ca f9 78 	sub	r10,sp,-1672
8000765e:	02 9b       	mov	r11,r1
80007660:	08 9c       	mov	r12,r4
80007662:	f0 1f 00 2a 	mcall	80007708 <_vfprintf_r+0x1d84>
80007666:	e0 81 01 50 	brne	80007906 <_vfprintf_r+0x1f82>
8000766a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000766e:	04 06       	add	r6,r2
80007670:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007674:	87 06       	st.w	r3[0x0],r6
80007676:	fa f9 06 90 	ld.w	r9,sp[1680]
8000767a:	40 66       	lddsp	r6,sp[0x18]
8000767c:	40 6e       	lddsp	lr,sp[0x18]
8000767e:	10 16       	sub	r6,r8
80007680:	f2 08 01 08 	sub	r8,r9,r8
80007684:	87 16       	st.w	r3[0x4],r6
80007686:	1c 08       	add	r8,lr
80007688:	fb 48 06 90 	st.w	sp[1680],r8
8000768c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007690:	2f f8       	sub	r8,-1
80007692:	fb 48 06 8c 	st.w	sp[1676],r8
80007696:	cb 98       	rjmp	80007808 <_vfprintf_r+0x1e84>
80007698:	40 6c       	lddsp	r12,sp[0x18]
8000769a:	58 1c       	cp.w	r12,1
8000769c:	e0 89 00 06 	brgt	800076a8 <_vfprintf_r+0x1d24>
800076a0:	ed b5 00 00 	bld	r5,0x0
800076a4:	e0 81 00 87 	brne	800077b2 <_vfprintf_r+0x1e2e>
800076a8:	fa f8 06 90 	ld.w	r8,sp[1680]
800076ac:	2f f8       	sub	r8,-1
800076ae:	30 19       	mov	r9,1
800076b0:	fb 48 06 90 	st.w	sp[1680],r8
800076b4:	87 06       	st.w	r3[0x0],r6
800076b6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800076ba:	87 19       	st.w	r3[0x4],r9
800076bc:	2f f8       	sub	r8,-1
800076be:	fb 48 06 8c 	st.w	sp[1676],r8
800076c2:	58 78       	cp.w	r8,7
800076c4:	e0 89 00 04 	brgt	800076cc <_vfprintf_r+0x1d48>
800076c8:	2f 83       	sub	r3,-8
800076ca:	c0 b8       	rjmp	800076e0 <_vfprintf_r+0x1d5c>
800076cc:	fa ca f9 78 	sub	r10,sp,-1672
800076d0:	02 9b       	mov	r11,r1
800076d2:	08 9c       	mov	r12,r4
800076d4:	f0 1f 00 0d 	mcall	80007708 <_vfprintf_r+0x1d84>
800076d8:	e0 81 01 17 	brne	80007906 <_vfprintf_r+0x1f82>
800076dc:	fa c3 f9 e0 	sub	r3,sp,-1568
800076e0:	fa f8 06 90 	ld.w	r8,sp[1680]
800076e4:	2f f8       	sub	r8,-1
800076e6:	40 cb       	lddsp	r11,sp[0x30]
800076e8:	fb 48 06 90 	st.w	sp[1680],r8
800076ec:	30 19       	mov	r9,1
800076ee:	fa f8 06 8c 	ld.w	r8,sp[1676]
800076f2:	87 0b       	st.w	r3[0x0],r11
800076f4:	2f f8       	sub	r8,-1
800076f6:	87 19       	st.w	r3[0x4],r9
800076f8:	fb 48 06 8c 	st.w	sp[1676],r8
800076fc:	58 78       	cp.w	r8,7
800076fe:	e0 89 00 09 	brgt	80007710 <_vfprintf_r+0x1d8c>
80007702:	2f 83       	sub	r3,-8
80007704:	c1 08       	rjmp	80007724 <_vfprintf_r+0x1da0>
80007706:	00 00       	add	r0,r0
80007708:	80 00       	ld.sh	r0,r0[0x0]
8000770a:	59 64       	cp.w	r4,22
8000770c:	80 00       	ld.sh	r0,r0[0x0]
8000770e:	af e8       	*unknown*
80007710:	fa ca f9 78 	sub	r10,sp,-1672
80007714:	02 9b       	mov	r11,r1
80007716:	08 9c       	mov	r12,r4
80007718:	f0 1f 00 6f 	mcall	800078d4 <_vfprintf_r+0x1f50>
8000771c:	e0 81 00 f5 	brne	80007906 <_vfprintf_r+0x1f82>
80007720:	fa c3 f9 e0 	sub	r3,sp,-1568
80007724:	30 08       	mov	r8,0
80007726:	30 09       	mov	r9,0
80007728:	40 5b       	lddsp	r11,sp[0x14]
8000772a:	40 7a       	lddsp	r10,sp[0x1c]
8000772c:	f0 1f 00 6b 	mcall	800078d8 <_vfprintf_r+0x1f54>
80007730:	40 68       	lddsp	r8,sp[0x18]
80007732:	20 18       	sub	r8,1
80007734:	58 0c       	cp.w	r12,0
80007736:	c0 d1       	brne	80007750 <_vfprintf_r+0x1dcc>
80007738:	2f f6       	sub	r6,-1
8000773a:	87 18       	st.w	r3[0x4],r8
8000773c:	87 06       	st.w	r3[0x0],r6
8000773e:	fa f6 06 90 	ld.w	r6,sp[1680]
80007742:	10 06       	add	r6,r8
80007744:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007748:	fb 46 06 90 	st.w	sp[1680],r6
8000774c:	2f f8       	sub	r8,-1
8000774e:	c2 f8       	rjmp	800077ac <_vfprintf_r+0x1e28>
80007750:	10 96       	mov	r6,r8
80007752:	58 08       	cp.w	r8,0
80007754:	e0 89 00 1c 	brgt	8000778c <_vfprintf_r+0x1e08>
80007758:	c4 98       	rjmp	800077ea <_vfprintf_r+0x1e66>
8000775a:	2f 09       	sub	r9,-16
8000775c:	2f f8       	sub	r8,-1
8000775e:	fb 49 06 90 	st.w	sp[1680],r9
80007762:	87 02       	st.w	r3[0x0],r2
80007764:	87 10       	st.w	r3[0x4],r0
80007766:	fb 48 06 8c 	st.w	sp[1676],r8
8000776a:	58 78       	cp.w	r8,7
8000776c:	e0 89 00 04 	brgt	80007774 <_vfprintf_r+0x1df0>
80007770:	2f 83       	sub	r3,-8
80007772:	c0 b8       	rjmp	80007788 <_vfprintf_r+0x1e04>
80007774:	fa ca f9 78 	sub	r10,sp,-1672
80007778:	02 9b       	mov	r11,r1
8000777a:	08 9c       	mov	r12,r4
8000777c:	f0 1f 00 56 	mcall	800078d4 <_vfprintf_r+0x1f50>
80007780:	e0 81 00 c3 	brne	80007906 <_vfprintf_r+0x1f82>
80007784:	fa c3 f9 e0 	sub	r3,sp,-1568
80007788:	21 06       	sub	r6,16
8000778a:	c0 38       	rjmp	80007790 <_vfprintf_r+0x1e0c>
8000778c:	4d 42       	lddpc	r2,800078dc <_vfprintf_r+0x1f58>
8000778e:	31 00       	mov	r0,16
80007790:	fa f9 06 90 	ld.w	r9,sp[1680]
80007794:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007798:	4d 1a       	lddpc	r10,800078dc <_vfprintf_r+0x1f58>
8000779a:	59 06       	cp.w	r6,16
8000779c:	fe 99 ff df 	brgt	8000775a <_vfprintf_r+0x1dd6>
800077a0:	0c 09       	add	r9,r6
800077a2:	87 0a       	st.w	r3[0x0],r10
800077a4:	fb 49 06 90 	st.w	sp[1680],r9
800077a8:	2f f8       	sub	r8,-1
800077aa:	87 16       	st.w	r3[0x4],r6
800077ac:	fb 48 06 8c 	st.w	sp[1676],r8
800077b0:	c0 e8       	rjmp	800077cc <_vfprintf_r+0x1e48>
800077b2:	fa f8 06 90 	ld.w	r8,sp[1680]
800077b6:	2f f8       	sub	r8,-1
800077b8:	30 19       	mov	r9,1
800077ba:	fb 48 06 90 	st.w	sp[1680],r8
800077be:	87 06       	st.w	r3[0x0],r6
800077c0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800077c4:	87 19       	st.w	r3[0x4],r9
800077c6:	2f f8       	sub	r8,-1
800077c8:	fb 48 06 8c 	st.w	sp[1676],r8
800077cc:	58 78       	cp.w	r8,7
800077ce:	e0 89 00 04 	brgt	800077d6 <_vfprintf_r+0x1e52>
800077d2:	2f 83       	sub	r3,-8
800077d4:	c0 b8       	rjmp	800077ea <_vfprintf_r+0x1e66>
800077d6:	fa ca f9 78 	sub	r10,sp,-1672
800077da:	02 9b       	mov	r11,r1
800077dc:	08 9c       	mov	r12,r4
800077de:	f0 1f 00 3e 	mcall	800078d4 <_vfprintf_r+0x1f50>
800077e2:	e0 81 00 92 	brne	80007906 <_vfprintf_r+0x1f82>
800077e6:	fa c3 f9 e0 	sub	r3,sp,-1568
800077ea:	40 ea       	lddsp	r10,sp[0x38]
800077ec:	fa f8 06 90 	ld.w	r8,sp[1680]
800077f0:	14 08       	add	r8,r10
800077f2:	fa c9 f9 64 	sub	r9,sp,-1692
800077f6:	fb 48 06 90 	st.w	sp[1680],r8
800077fa:	87 1a       	st.w	r3[0x4],r10
800077fc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007800:	87 09       	st.w	r3[0x0],r9
80007802:	2f f8       	sub	r8,-1
80007804:	fb 48 06 8c 	st.w	sp[1676],r8
80007808:	58 78       	cp.w	r8,7
8000780a:	e0 89 00 04 	brgt	80007812 <_vfprintf_r+0x1e8e>
8000780e:	2f 83       	sub	r3,-8
80007810:	c0 a8       	rjmp	80007824 <_vfprintf_r+0x1ea0>
80007812:	fa ca f9 78 	sub	r10,sp,-1672
80007816:	02 9b       	mov	r11,r1
80007818:	08 9c       	mov	r12,r4
8000781a:	f0 1f 00 2f 	mcall	800078d4 <_vfprintf_r+0x1f50>
8000781e:	c7 41       	brne	80007906 <_vfprintf_r+0x1f82>
80007820:	fa c3 f9 e0 	sub	r3,sp,-1568
80007824:	e2 15 00 04 	andl	r5,0x4,COH
80007828:	c3 d0       	breq	800078a2 <_vfprintf_r+0x1f1e>
8000782a:	40 86       	lddsp	r6,sp[0x20]
8000782c:	40 39       	lddsp	r9,sp[0xc]
8000782e:	12 16       	sub	r6,r9
80007830:	58 06       	cp.w	r6,0
80007832:	e0 89 00 1a 	brgt	80007866 <_vfprintf_r+0x1ee2>
80007836:	c3 68       	rjmp	800078a2 <_vfprintf_r+0x1f1e>
80007838:	2f 09       	sub	r9,-16
8000783a:	2f f8       	sub	r8,-1
8000783c:	fb 49 06 90 	st.w	sp[1680],r9
80007840:	87 05       	st.w	r3[0x0],r5
80007842:	87 12       	st.w	r3[0x4],r2
80007844:	fb 48 06 8c 	st.w	sp[1676],r8
80007848:	58 78       	cp.w	r8,7
8000784a:	e0 89 00 04 	brgt	80007852 <_vfprintf_r+0x1ece>
8000784e:	2f 83       	sub	r3,-8
80007850:	c0 98       	rjmp	80007862 <_vfprintf_r+0x1ede>
80007852:	00 9a       	mov	r10,r0
80007854:	02 9b       	mov	r11,r1
80007856:	08 9c       	mov	r12,r4
80007858:	f0 1f 00 1f 	mcall	800078d4 <_vfprintf_r+0x1f50>
8000785c:	c5 51       	brne	80007906 <_vfprintf_r+0x1f82>
8000785e:	fa c3 f9 e0 	sub	r3,sp,-1568
80007862:	21 06       	sub	r6,16
80007864:	c0 58       	rjmp	8000786e <_vfprintf_r+0x1eea>
80007866:	49 f5       	lddpc	r5,800078e0 <_vfprintf_r+0x1f5c>
80007868:	31 02       	mov	r2,16
8000786a:	fa c0 f9 78 	sub	r0,sp,-1672
8000786e:	fa f9 06 90 	ld.w	r9,sp[1680]
80007872:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007876:	49 ba       	lddpc	r10,800078e0 <_vfprintf_r+0x1f5c>
80007878:	59 06       	cp.w	r6,16
8000787a:	fe 99 ff df 	brgt	80007838 <_vfprintf_r+0x1eb4>
8000787e:	0c 09       	add	r9,r6
80007880:	2f f8       	sub	r8,-1
80007882:	87 0a       	st.w	r3[0x0],r10
80007884:	87 16       	st.w	r3[0x4],r6
80007886:	fb 49 06 90 	st.w	sp[1680],r9
8000788a:	fb 48 06 8c 	st.w	sp[1676],r8
8000788e:	58 78       	cp.w	r8,7
80007890:	e0 8a 00 09 	brle	800078a2 <_vfprintf_r+0x1f1e>
80007894:	fa ca f9 78 	sub	r10,sp,-1672
80007898:	02 9b       	mov	r11,r1
8000789a:	08 9c       	mov	r12,r4
8000789c:	f0 1f 00 0e 	mcall	800078d4 <_vfprintf_r+0x1f50>
800078a0:	c3 31       	brne	80007906 <_vfprintf_r+0x1f82>
800078a2:	40 bc       	lddsp	r12,sp[0x2c]
800078a4:	40 36       	lddsp	r6,sp[0xc]
800078a6:	40 8e       	lddsp	lr,sp[0x20]
800078a8:	ec 0e 0c 48 	max	r8,r6,lr
800078ac:	10 0c       	add	r12,r8
800078ae:	50 bc       	stdsp	sp[0x2c],r12
800078b0:	fa f8 06 90 	ld.w	r8,sp[1680]
800078b4:	58 08       	cp.w	r8,0
800078b6:	c0 80       	breq	800078c6 <_vfprintf_r+0x1f42>
800078b8:	fa ca f9 78 	sub	r10,sp,-1672
800078bc:	02 9b       	mov	r11,r1
800078be:	08 9c       	mov	r12,r4
800078c0:	f0 1f 00 05 	mcall	800078d4 <_vfprintf_r+0x1f50>
800078c4:	c2 11       	brne	80007906 <_vfprintf_r+0x1f82>
800078c6:	30 0b       	mov	r11,0
800078c8:	fa c3 f9 e0 	sub	r3,sp,-1568
800078cc:	fb 4b 06 8c 	st.w	sp[1676],r11
800078d0:	fe 9f f0 e6 	bral	80005a9c <_vfprintf_r+0x118>
800078d4:	80 00       	ld.sh	r0,r0[0x0]
800078d6:	59 64       	cp.w	r4,22
800078d8:	80 00       	ld.sh	r0,r0[0x0]
800078da:	a1 4a       	asr	r10,0x0
800078dc:	80 00       	ld.sh	r0,r0[0x0]
800078de:	af e8       	*unknown*
800078e0:	80 00       	ld.sh	r0,r0[0x0]
800078e2:	af d8       	cbr	r8,0xf
800078e4:	08 95       	mov	r5,r4
800078e6:	fa f8 06 90 	ld.w	r8,sp[1680]
800078ea:	58 08       	cp.w	r8,0
800078ec:	c0 80       	breq	800078fc <_vfprintf_r+0x1f78>
800078ee:	08 9c       	mov	r12,r4
800078f0:	fa ca f9 78 	sub	r10,sp,-1672
800078f4:	02 9b       	mov	r11,r1
800078f6:	f0 1f 00 0a 	mcall	8000791c <_vfprintf_r+0x1f98>
800078fa:	c0 61       	brne	80007906 <_vfprintf_r+0x1f82>
800078fc:	30 08       	mov	r8,0
800078fe:	fb 48 06 8c 	st.w	sp[1676],r8
80007902:	c0 28       	rjmp	80007906 <_vfprintf_r+0x1f82>
80007904:	40 41       	lddsp	r1,sp[0x10]
80007906:	82 68       	ld.sh	r8,r1[0xc]
80007908:	ed b8 00 06 	bld	r8,0x6
8000790c:	c0 31       	brne	80007912 <_vfprintf_r+0x1f8e>
8000790e:	3f fa       	mov	r10,-1
80007910:	50 ba       	stdsp	sp[0x2c],r10
80007912:	40 bc       	lddsp	r12,sp[0x2c]
80007914:	fe 3d f9 44 	sub	sp,-1724
80007918:	d8 32       	popm	r0-r7,pc
8000791a:	00 00       	add	r0,r0
8000791c:	80 00       	ld.sh	r0,r0[0x0]
8000791e:	59 64       	cp.w	r4,22

80007920 <__swsetup_r>:
80007920:	d4 21       	pushm	r4-r7,lr
80007922:	4b 38       	lddpc	r8,800079ec <__swsetup_r+0xcc>
80007924:	18 96       	mov	r6,r12
80007926:	16 97       	mov	r7,r11
80007928:	70 0c       	ld.w	r12,r8[0x0]
8000792a:	58 0c       	cp.w	r12,0
8000792c:	c0 60       	breq	80007938 <__swsetup_r+0x18>
8000792e:	78 68       	ld.w	r8,r12[0x18]
80007930:	58 08       	cp.w	r8,0
80007932:	c0 31       	brne	80007938 <__swsetup_r+0x18>
80007934:	f0 1f 00 2f 	mcall	800079f0 <__swsetup_r+0xd0>
80007938:	4a f8       	lddpc	r8,800079f4 <__swsetup_r+0xd4>
8000793a:	10 37       	cp.w	r7,r8
8000793c:	c0 51       	brne	80007946 <__swsetup_r+0x26>
8000793e:	4a c8       	lddpc	r8,800079ec <__swsetup_r+0xcc>
80007940:	70 08       	ld.w	r8,r8[0x0]
80007942:	70 07       	ld.w	r7,r8[0x0]
80007944:	c0 e8       	rjmp	80007960 <__swsetup_r+0x40>
80007946:	4a d8       	lddpc	r8,800079f8 <__swsetup_r+0xd8>
80007948:	10 37       	cp.w	r7,r8
8000794a:	c0 51       	brne	80007954 <__swsetup_r+0x34>
8000794c:	4a 88       	lddpc	r8,800079ec <__swsetup_r+0xcc>
8000794e:	70 08       	ld.w	r8,r8[0x0]
80007950:	70 17       	ld.w	r7,r8[0x4]
80007952:	c0 78       	rjmp	80007960 <__swsetup_r+0x40>
80007954:	4a a8       	lddpc	r8,800079fc <__swsetup_r+0xdc>
80007956:	10 37       	cp.w	r7,r8
80007958:	c0 41       	brne	80007960 <__swsetup_r+0x40>
8000795a:	4a 58       	lddpc	r8,800079ec <__swsetup_r+0xcc>
8000795c:	70 08       	ld.w	r8,r8[0x0]
8000795e:	70 27       	ld.w	r7,r8[0x8]
80007960:	8e 68       	ld.sh	r8,r7[0xc]
80007962:	ed b8 00 03 	bld	r8,0x3
80007966:	c1 e0       	breq	800079a2 <__swsetup_r+0x82>
80007968:	ed b8 00 04 	bld	r8,0x4
8000796c:	c3 e1       	brne	800079e8 <__swsetup_r+0xc8>
8000796e:	ed b8 00 02 	bld	r8,0x2
80007972:	c1 51       	brne	8000799c <__swsetup_r+0x7c>
80007974:	6e db       	ld.w	r11,r7[0x34]
80007976:	58 0b       	cp.w	r11,0
80007978:	c0 a0       	breq	8000798c <__swsetup_r+0x6c>
8000797a:	ee c8 ff bc 	sub	r8,r7,-68
8000797e:	10 3b       	cp.w	r11,r8
80007980:	c0 40       	breq	80007988 <__swsetup_r+0x68>
80007982:	0c 9c       	mov	r12,r6
80007984:	f0 1f 00 1f 	mcall	80007a00 <__swsetup_r+0xe0>
80007988:	30 08       	mov	r8,0
8000798a:	8f d8       	st.w	r7[0x34],r8
8000798c:	8e 68       	ld.sh	r8,r7[0xc]
8000798e:	e0 18 ff db 	andl	r8,0xffdb
80007992:	ae 68       	st.h	r7[0xc],r8
80007994:	30 08       	mov	r8,0
80007996:	8f 18       	st.w	r7[0x4],r8
80007998:	6e 48       	ld.w	r8,r7[0x10]
8000799a:	8f 08       	st.w	r7[0x0],r8
8000799c:	8e 68       	ld.sh	r8,r7[0xc]
8000799e:	a3 b8       	sbr	r8,0x3
800079a0:	ae 68       	st.h	r7[0xc],r8
800079a2:	6e 48       	ld.w	r8,r7[0x10]
800079a4:	58 08       	cp.w	r8,0
800079a6:	c0 b1       	brne	800079bc <__swsetup_r+0x9c>
800079a8:	8e 68       	ld.sh	r8,r7[0xc]
800079aa:	e2 18 02 80 	andl	r8,0x280,COH
800079ae:	e0 48 02 00 	cp.w	r8,512
800079b2:	c0 50       	breq	800079bc <__swsetup_r+0x9c>
800079b4:	0c 9c       	mov	r12,r6
800079b6:	0e 9b       	mov	r11,r7
800079b8:	f0 1f 00 13 	mcall	80007a04 <__swsetup_r+0xe4>
800079bc:	8e 69       	ld.sh	r9,r7[0xc]
800079be:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
800079c2:	c0 70       	breq	800079d0 <__swsetup_r+0xb0>
800079c4:	30 08       	mov	r8,0
800079c6:	8f 28       	st.w	r7[0x8],r8
800079c8:	6e 58       	ld.w	r8,r7[0x14]
800079ca:	5c 38       	neg	r8
800079cc:	8f 68       	st.w	r7[0x18],r8
800079ce:	c0 68       	rjmp	800079da <__swsetup_r+0xba>
800079d0:	ed b9 00 01 	bld	r9,0x1
800079d4:	ef f8 10 05 	ld.wne	r8,r7[0x14]
800079d8:	8f 28       	st.w	r7[0x8],r8
800079da:	6e 48       	ld.w	r8,r7[0x10]
800079dc:	58 08       	cp.w	r8,0
800079de:	c0 61       	brne	800079ea <__swsetup_r+0xca>
800079e0:	8e 68       	ld.sh	r8,r7[0xc]
800079e2:	ed b8 00 07 	bld	r8,0x7
800079e6:	c0 21       	brne	800079ea <__swsetup_r+0xca>
800079e8:	dc 2a       	popm	r4-r7,pc,r12=-1
800079ea:	d8 2a       	popm	r4-r7,pc,r12=0
800079ec:	00 00       	add	r0,r0
800079ee:	01 ec       	ld.ub	r12,r0[0x6]
800079f0:	80 00       	ld.sh	r0,r0[0x0]
800079f2:	8b 24       	st.w	r5[0x8],r4
800079f4:	80 00       	ld.sh	r0,r0[0x0]
800079f6:	b1 08       	ld.d	r8,r8
800079f8:	80 00       	ld.sh	r0,r0[0x0]
800079fa:	b1 28       	st.d	r8++,r8
800079fc:	80 00       	ld.sh	r0,r0[0x0]
800079fe:	b1 48       	asr	r8,0x10
80007a00:	80 00       	ld.sh	r0,r0[0x0]
80007a02:	8c 7c       	ld.sh	r12,r6[0xe]
80007a04:	80 00       	ld.sh	r0,r0[0x0]
80007a06:	91 3c       	st.w	r8[0xc],r12

80007a08 <__register_exitproc>:
80007a08:	d4 31       	pushm	r0-r7,lr
80007a0a:	4a 98       	lddpc	r8,80007aac <__register_exitproc+0xa4>
80007a0c:	70 03       	ld.w	r3,r8[0x0]
80007a0e:	67 24       	ld.w	r4,r3[0x48]
80007a10:	e6 c8 ff b4 	sub	r8,r3,-76
80007a14:	58 04       	cp.w	r4,0
80007a16:	f0 04 17 00 	moveq	r4,r8
80007a1a:	e7 f4 0a 12 	st.weq	r3[0x48],r4
80007a1e:	18 97       	mov	r7,r12
80007a20:	16 96       	mov	r6,r11
80007a22:	14 95       	mov	r5,r10
80007a24:	12 92       	mov	r2,r9
80007a26:	68 18       	ld.w	r8,r4[0x4]
80007a28:	59 f8       	cp.w	r8,31
80007a2a:	e0 8a 00 0e 	brle	80007a46 <__register_exitproc+0x3e>
80007a2e:	e0 6c 00 8c 	mov	r12,140
80007a32:	f0 1f 00 20 	mcall	80007ab0 <__register_exitproc+0xa8>
80007a36:	18 94       	mov	r4,r12
80007a38:	c3 80       	breq	80007aa8 <__register_exitproc+0xa0>
80007a3a:	67 28       	ld.w	r8,r3[0x48]
80007a3c:	99 08       	st.w	r12[0x0],r8
80007a3e:	e7 4c 00 48 	st.w	r3[72],r12
80007a42:	30 08       	mov	r8,0
80007a44:	99 18       	st.w	r12[0x4],r8
80007a46:	58 07       	cp.w	r7,0
80007a48:	c2 70       	breq	80007a96 <__register_exitproc+0x8e>
80007a4a:	e8 fc 00 88 	ld.w	r12,r4[136]
80007a4e:	58 0c       	cp.w	r12,0
80007a50:	c0 d1       	brne	80007a6a <__register_exitproc+0x62>
80007a52:	e0 6c 01 08 	mov	r12,264
80007a56:	f0 1f 00 17 	mcall	80007ab0 <__register_exitproc+0xa8>
80007a5a:	c2 70       	breq	80007aa8 <__register_exitproc+0xa0>
80007a5c:	30 08       	mov	r8,0
80007a5e:	e9 4c 00 88 	st.w	r4[136],r12
80007a62:	f9 48 01 04 	st.w	r12[260],r8
80007a66:	f9 48 01 00 	st.w	r12[256],r8
80007a6a:	68 18       	ld.w	r8,r4[0x4]
80007a6c:	f0 c9 ff e0 	sub	r9,r8,-32
80007a70:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
80007a74:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
80007a78:	30 1a       	mov	r10,1
80007a7a:	f8 f9 01 00 	ld.w	r9,r12[256]
80007a7e:	f4 08 09 48 	lsl	r8,r10,r8
80007a82:	10 49       	or	r9,r8
80007a84:	f9 49 01 00 	st.w	r12[256],r9
80007a88:	58 27       	cp.w	r7,2
80007a8a:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
80007a8e:	f3 d8 e0 38 	oreq	r8,r9,r8
80007a92:	f9 f8 0a 41 	st.weq	r12[0x104],r8
80007a96:	68 18       	ld.w	r8,r4[0x4]
80007a98:	30 0c       	mov	r12,0
80007a9a:	f0 c9 ff ff 	sub	r9,r8,-1
80007a9e:	2f e8       	sub	r8,-2
80007aa0:	89 19       	st.w	r4[0x4],r9
80007aa2:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
80007aa6:	d8 32       	popm	r0-r7,pc
80007aa8:	dc 3a       	popm	r0-r7,pc,r12=-1
80007aaa:	00 00       	add	r0,r0
80007aac:	80 00       	ld.sh	r0,r0[0x0]
80007aae:	ad 20       	st.d	r6++,r0
80007ab0:	80 00       	ld.sh	r0,r0[0x0]
80007ab2:	4a e0       	lddpc	r0,80007b68 <__call_exitprocs+0xb4>

80007ab4 <__call_exitprocs>:
80007ab4:	d4 31       	pushm	r0-r7,lr
80007ab6:	20 3d       	sub	sp,12
80007ab8:	4b 28       	lddpc	r8,80007b80 <__call_exitprocs+0xcc>
80007aba:	50 2c       	stdsp	sp[0x8],r12
80007abc:	70 08       	ld.w	r8,r8[0x0]
80007abe:	16 91       	mov	r1,r11
80007ac0:	50 08       	stdsp	sp[0x0],r8
80007ac2:	2b 88       	sub	r8,-72
80007ac4:	50 18       	stdsp	sp[0x4],r8
80007ac6:	40 0a       	lddsp	r10,sp[0x0]
80007ac8:	40 14       	lddsp	r4,sp[0x4]
80007aca:	75 27       	ld.w	r7,r10[0x48]
80007acc:	c5 58       	rjmp	80007b76 <__call_exitprocs+0xc2>
80007ace:	6e 15       	ld.w	r5,r7[0x4]
80007ad0:	ee f6 00 88 	ld.w	r6,r7[136]
80007ad4:	ea c2 ff ff 	sub	r2,r5,-1
80007ad8:	20 15       	sub	r5,1
80007ada:	ee 02 00 22 	add	r2,r7,r2<<0x2
80007ade:	ec 05 00 23 	add	r3,r6,r5<<0x2
80007ae2:	c3 58       	rjmp	80007b4c <__call_exitprocs+0x98>
80007ae4:	58 01       	cp.w	r1,0
80007ae6:	c0 70       	breq	80007af4 <__call_exitprocs+0x40>
80007ae8:	58 06       	cp.w	r6,0
80007aea:	c2 e0       	breq	80007b46 <__call_exitprocs+0x92>
80007aec:	e6 f8 00 80 	ld.w	r8,r3[128]
80007af0:	02 38       	cp.w	r8,r1
80007af2:	c2 a1       	brne	80007b46 <__call_exitprocs+0x92>
80007af4:	6e 19       	ld.w	r9,r7[0x4]
80007af6:	64 08       	ld.w	r8,r2[0x0]
80007af8:	20 19       	sub	r9,1
80007afa:	12 35       	cp.w	r5,r9
80007afc:	ef f5 0a 01 	st.weq	r7[0x4],r5
80007b00:	f9 b9 01 00 	movne	r9,0
80007b04:	e5 f9 1a 00 	st.wne	r2[0x0],r9
80007b08:	58 08       	cp.w	r8,0
80007b0a:	c1 e0       	breq	80007b46 <__call_exitprocs+0x92>
80007b0c:	6e 10       	ld.w	r0,r7[0x4]
80007b0e:	58 06       	cp.w	r6,0
80007b10:	c0 90       	breq	80007b22 <__call_exitprocs+0x6e>
80007b12:	30 1a       	mov	r10,1
80007b14:	f4 05 09 49 	lsl	r9,r10,r5
80007b18:	ec fa 01 00 	ld.w	r10,r6[256]
80007b1c:	f3 ea 00 0a 	and	r10,r9,r10
80007b20:	c0 31       	brne	80007b26 <__call_exitprocs+0x72>
80007b22:	5d 18       	icall	r8
80007b24:	c0 b8       	rjmp	80007b3a <__call_exitprocs+0x86>
80007b26:	ec fa 01 04 	ld.w	r10,r6[260]
80007b2a:	66 0b       	ld.w	r11,r3[0x0]
80007b2c:	14 69       	and	r9,r10
80007b2e:	c0 41       	brne	80007b36 <__call_exitprocs+0x82>
80007b30:	40 2c       	lddsp	r12,sp[0x8]
80007b32:	5d 18       	icall	r8
80007b34:	c0 38       	rjmp	80007b3a <__call_exitprocs+0x86>
80007b36:	16 9c       	mov	r12,r11
80007b38:	5d 18       	icall	r8
80007b3a:	6e 18       	ld.w	r8,r7[0x4]
80007b3c:	10 30       	cp.w	r0,r8
80007b3e:	cc 41       	brne	80007ac6 <__call_exitprocs+0x12>
80007b40:	68 08       	ld.w	r8,r4[0x0]
80007b42:	0e 38       	cp.w	r8,r7
80007b44:	cc 11       	brne	80007ac6 <__call_exitprocs+0x12>
80007b46:	20 15       	sub	r5,1
80007b48:	20 43       	sub	r3,4
80007b4a:	20 42       	sub	r2,4
80007b4c:	58 05       	cp.w	r5,0
80007b4e:	cc b4       	brge	80007ae4 <__call_exitprocs+0x30>
80007b50:	6e 18       	ld.w	r8,r7[0x4]
80007b52:	58 08       	cp.w	r8,0
80007b54:	c0 f1       	brne	80007b72 <__call_exitprocs+0xbe>
80007b56:	6e 08       	ld.w	r8,r7[0x0]
80007b58:	58 08       	cp.w	r8,0
80007b5a:	c0 c0       	breq	80007b72 <__call_exitprocs+0xbe>
80007b5c:	89 08       	st.w	r4[0x0],r8
80007b5e:	58 06       	cp.w	r6,0
80007b60:	c0 40       	breq	80007b68 <__call_exitprocs+0xb4>
80007b62:	0c 9c       	mov	r12,r6
80007b64:	f0 1f 00 08 	mcall	80007b84 <__call_exitprocs+0xd0>
80007b68:	0e 9c       	mov	r12,r7
80007b6a:	f0 1f 00 07 	mcall	80007b84 <__call_exitprocs+0xd0>
80007b6e:	68 07       	ld.w	r7,r4[0x0]
80007b70:	c0 38       	rjmp	80007b76 <__call_exitprocs+0xc2>
80007b72:	0e 94       	mov	r4,r7
80007b74:	6e 07       	ld.w	r7,r7[0x0]
80007b76:	58 07       	cp.w	r7,0
80007b78:	ca b1       	brne	80007ace <__call_exitprocs+0x1a>
80007b7a:	2f dd       	sub	sp,-12
80007b7c:	d8 32       	popm	r0-r7,pc
80007b7e:	00 00       	add	r0,r0
80007b80:	80 00       	ld.sh	r0,r0[0x0]
80007b82:	ad 20       	st.d	r6++,r0
80007b84:	80 00       	ld.sh	r0,r0[0x0]
80007b86:	4a c8       	lddpc	r8,80007c34 <quorem+0xac>

80007b88 <quorem>:
80007b88:	d4 31       	pushm	r0-r7,lr
80007b8a:	20 2d       	sub	sp,8
80007b8c:	18 97       	mov	r7,r12
80007b8e:	78 48       	ld.w	r8,r12[0x10]
80007b90:	76 46       	ld.w	r6,r11[0x10]
80007b92:	0c 38       	cp.w	r8,r6
80007b94:	c0 34       	brge	80007b9a <quorem+0x12>
80007b96:	30 0c       	mov	r12,0
80007b98:	c8 58       	rjmp	80007ca2 <quorem+0x11a>
80007b9a:	ec c2 ff fc 	sub	r2,r6,-4
80007b9e:	f6 c3 ff ec 	sub	r3,r11,-20
80007ba2:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80007ba6:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80007baa:	2f f9       	sub	r9,-1
80007bac:	20 16       	sub	r6,1
80007bae:	f8 09 0d 08 	divu	r8,r12,r9
80007bb2:	f6 02 00 22 	add	r2,r11,r2<<0x2
80007bb6:	ee c4 ff ec 	sub	r4,r7,-20
80007bba:	10 95       	mov	r5,r8
80007bbc:	58 08       	cp.w	r8,0
80007bbe:	c4 10       	breq	80007c40 <quorem+0xb8>
80007bc0:	30 09       	mov	r9,0
80007bc2:	06 9a       	mov	r10,r3
80007bc4:	08 98       	mov	r8,r4
80007bc6:	12 91       	mov	r1,r9
80007bc8:	50 0b       	stdsp	sp[0x0],r11
80007bca:	70 0e       	ld.w	lr,r8[0x0]
80007bcc:	b1 8e       	lsr	lr,0x10
80007bce:	50 1e       	stdsp	sp[0x4],lr
80007bd0:	15 0e       	ld.w	lr,r10++
80007bd2:	fc 00 16 10 	lsr	r0,lr,0x10
80007bd6:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007bda:	ea 0e 03 41 	mac	r1,r5,lr
80007bde:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80007be2:	b1 81       	lsr	r1,0x10
80007be4:	40 1b       	lddsp	r11,sp[0x4]
80007be6:	ea 00 02 40 	mul	r0,r5,r0
80007bea:	e2 00 00 00 	add	r0,r1,r0
80007bee:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80007bf2:	02 1b       	sub	r11,r1
80007bf4:	50 1b       	stdsp	sp[0x4],r11
80007bf6:	70 0b       	ld.w	r11,r8[0x0]
80007bf8:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80007bfc:	02 09       	add	r9,r1
80007bfe:	f2 0e 01 0e 	sub	lr,r9,lr
80007c02:	b0 1e       	st.h	r8[0x2],lr
80007c04:	fc 09 14 10 	asr	r9,lr,0x10
80007c08:	40 1e       	lddsp	lr,sp[0x4]
80007c0a:	fc 09 00 09 	add	r9,lr,r9
80007c0e:	b0 09       	st.h	r8[0x0],r9
80007c10:	e0 01 16 10 	lsr	r1,r0,0x10
80007c14:	2f c8       	sub	r8,-4
80007c16:	b1 49       	asr	r9,0x10
80007c18:	04 3a       	cp.w	r10,r2
80007c1a:	fe 98 ff d8 	brls	80007bca <quorem+0x42>
80007c1e:	40 0b       	lddsp	r11,sp[0x0]
80007c20:	58 0c       	cp.w	r12,0
80007c22:	c0 f1       	brne	80007c40 <quorem+0xb8>
80007c24:	ec c8 ff fb 	sub	r8,r6,-5
80007c28:	ee 08 00 28 	add	r8,r7,r8<<0x2
80007c2c:	c0 28       	rjmp	80007c30 <quorem+0xa8>
80007c2e:	20 16       	sub	r6,1
80007c30:	20 48       	sub	r8,4
80007c32:	08 38       	cp.w	r8,r4
80007c34:	e0 88 00 05 	brls	80007c3e <quorem+0xb6>
80007c38:	70 09       	ld.w	r9,r8[0x0]
80007c3a:	58 09       	cp.w	r9,0
80007c3c:	cf 90       	breq	80007c2e <quorem+0xa6>
80007c3e:	8f 46       	st.w	r7[0x10],r6
80007c40:	0e 9c       	mov	r12,r7
80007c42:	f0 1f 00 1a 	mcall	80007ca8 <quorem+0x120>
80007c46:	c2 d5       	brlt	80007ca0 <quorem+0x118>
80007c48:	2f f5       	sub	r5,-1
80007c4a:	08 98       	mov	r8,r4
80007c4c:	30 09       	mov	r9,0
80007c4e:	07 0b       	ld.w	r11,r3++
80007c50:	f6 0a 16 10 	lsr	r10,r11,0x10
80007c54:	70 0c       	ld.w	r12,r8[0x0]
80007c56:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007c5a:	f8 0e 16 10 	lsr	lr,r12,0x10
80007c5e:	14 1e       	sub	lr,r10
80007c60:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80007c64:	16 1a       	sub	r10,r11
80007c66:	12 0a       	add	r10,r9
80007c68:	b0 1a       	st.h	r8[0x2],r10
80007c6a:	b1 4a       	asr	r10,0x10
80007c6c:	fc 0a 00 09 	add	r9,lr,r10
80007c70:	b0 09       	st.h	r8[0x0],r9
80007c72:	2f c8       	sub	r8,-4
80007c74:	b1 49       	asr	r9,0x10
80007c76:	04 33       	cp.w	r3,r2
80007c78:	fe 98 ff eb 	brls	80007c4e <quorem+0xc6>
80007c7c:	ec c8 ff fb 	sub	r8,r6,-5
80007c80:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80007c84:	58 09       	cp.w	r9,0
80007c86:	c0 d1       	brne	80007ca0 <quorem+0x118>
80007c88:	ee 08 00 28 	add	r8,r7,r8<<0x2
80007c8c:	c0 28       	rjmp	80007c90 <quorem+0x108>
80007c8e:	20 16       	sub	r6,1
80007c90:	20 48       	sub	r8,4
80007c92:	08 38       	cp.w	r8,r4
80007c94:	e0 88 00 05 	brls	80007c9e <quorem+0x116>
80007c98:	70 09       	ld.w	r9,r8[0x0]
80007c9a:	58 09       	cp.w	r9,0
80007c9c:	cf 90       	breq	80007c8e <quorem+0x106>
80007c9e:	8f 46       	st.w	r7[0x10],r6
80007ca0:	0a 9c       	mov	r12,r5
80007ca2:	2f ed       	sub	sp,-8
80007ca4:	d8 32       	popm	r0-r7,pc
80007ca6:	00 00       	add	r0,r0
80007ca8:	80 00       	ld.sh	r0,r0[0x0]
80007caa:	93 4a       	st.w	r9[0x10],r10

80007cac <_dtoa_r>:
80007cac:	d4 31       	pushm	r0-r7,lr
80007cae:	21 ad       	sub	sp,104
80007cb0:	fa c4 ff 74 	sub	r4,sp,-140
80007cb4:	18 97       	mov	r7,r12
80007cb6:	16 95       	mov	r5,r11
80007cb8:	68 2c       	ld.w	r12,r4[0x8]
80007cba:	50 c9       	stdsp	sp[0x30],r9
80007cbc:	68 16       	ld.w	r6,r4[0x4]
80007cbe:	68 09       	ld.w	r9,r4[0x0]
80007cc0:	50 e8       	stdsp	sp[0x38],r8
80007cc2:	14 94       	mov	r4,r10
80007cc4:	51 2c       	stdsp	sp[0x48],r12
80007cc6:	fa e5 00 08 	st.d	sp[8],r4
80007cca:	51 59       	stdsp	sp[0x54],r9
80007ccc:	6e 95       	ld.w	r5,r7[0x24]
80007cce:	58 05       	cp.w	r5,0
80007cd0:	c0 91       	brne	80007ce2 <_dtoa_r+0x36>
80007cd2:	31 0c       	mov	r12,16
80007cd4:	f0 1f 00 47 	mcall	80007df0 <_dtoa_r+0x144>
80007cd8:	99 35       	st.w	r12[0xc],r5
80007cda:	8f 9c       	st.w	r7[0x24],r12
80007cdc:	99 15       	st.w	r12[0x4],r5
80007cde:	99 25       	st.w	r12[0x8],r5
80007ce0:	99 05       	st.w	r12[0x0],r5
80007ce2:	6e 99       	ld.w	r9,r7[0x24]
80007ce4:	72 08       	ld.w	r8,r9[0x0]
80007ce6:	58 08       	cp.w	r8,0
80007ce8:	c0 f0       	breq	80007d06 <_dtoa_r+0x5a>
80007cea:	72 1a       	ld.w	r10,r9[0x4]
80007cec:	91 1a       	st.w	r8[0x4],r10
80007cee:	30 1a       	mov	r10,1
80007cf0:	72 19       	ld.w	r9,r9[0x4]
80007cf2:	f4 09 09 49 	lsl	r9,r10,r9
80007cf6:	10 9b       	mov	r11,r8
80007cf8:	91 29       	st.w	r8[0x8],r9
80007cfa:	0e 9c       	mov	r12,r7
80007cfc:	f0 1f 00 3e 	mcall	80007df4 <_dtoa_r+0x148>
80007d00:	6e 98       	ld.w	r8,r7[0x24]
80007d02:	30 09       	mov	r9,0
80007d04:	91 09       	st.w	r8[0x0],r9
80007d06:	40 28       	lddsp	r8,sp[0x8]
80007d08:	10 94       	mov	r4,r8
80007d0a:	58 08       	cp.w	r8,0
80007d0c:	c0 64       	brge	80007d18 <_dtoa_r+0x6c>
80007d0e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80007d12:	50 28       	stdsp	sp[0x8],r8
80007d14:	30 18       	mov	r8,1
80007d16:	c0 28       	rjmp	80007d1a <_dtoa_r+0x6e>
80007d18:	30 08       	mov	r8,0
80007d1a:	8d 08       	st.w	r6[0x0],r8
80007d1c:	fc 1c 7f f0 	movh	r12,0x7ff0
80007d20:	40 26       	lddsp	r6,sp[0x8]
80007d22:	0c 98       	mov	r8,r6
80007d24:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80007d28:	18 38       	cp.w	r8,r12
80007d2a:	c1 e1       	brne	80007d66 <_dtoa_r+0xba>
80007d2c:	e0 68 27 0f 	mov	r8,9999
80007d30:	41 5b       	lddsp	r11,sp[0x54]
80007d32:	97 08       	st.w	r11[0x0],r8
80007d34:	40 3a       	lddsp	r10,sp[0xc]
80007d36:	58 0a       	cp.w	r10,0
80007d38:	c0 61       	brne	80007d44 <_dtoa_r+0x98>
80007d3a:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80007d3e:	c0 31       	brne	80007d44 <_dtoa_r+0x98>
80007d40:	4a ec       	lddpc	r12,80007df8 <_dtoa_r+0x14c>
80007d42:	c0 28       	rjmp	80007d46 <_dtoa_r+0x9a>
80007d44:	4a ec       	lddpc	r12,80007dfc <_dtoa_r+0x150>
80007d46:	41 29       	lddsp	r9,sp[0x48]
80007d48:	58 09       	cp.w	r9,0
80007d4a:	e0 80 05 de 	breq	80008906 <_dtoa_r+0xc5a>
80007d4e:	f8 c8 ff fd 	sub	r8,r12,-3
80007d52:	f8 c9 ff f8 	sub	r9,r12,-8
80007d56:	11 8b       	ld.ub	r11,r8[0x0]
80007d58:	30 0a       	mov	r10,0
80007d5a:	41 25       	lddsp	r5,sp[0x48]
80007d5c:	f4 0b 18 00 	cp.b	r11,r10
80007d60:	f2 08 17 10 	movne	r8,r9
80007d64:	c1 58       	rjmp	80007d8e <_dtoa_r+0xe2>
80007d66:	fa ea 00 08 	ld.d	r10,sp[8]
80007d6a:	30 08       	mov	r8,0
80007d6c:	fa eb 00 3c 	st.d	sp[60],r10
80007d70:	30 09       	mov	r9,0
80007d72:	f0 1f 00 24 	mcall	80007e00 <_dtoa_r+0x154>
80007d76:	c0 f0       	breq	80007d94 <_dtoa_r+0xe8>
80007d78:	30 18       	mov	r8,1
80007d7a:	41 5a       	lddsp	r10,sp[0x54]
80007d7c:	95 08       	st.w	r10[0x0],r8
80007d7e:	4a 2c       	lddpc	r12,80007e04 <_dtoa_r+0x158>
80007d80:	41 29       	lddsp	r9,sp[0x48]
80007d82:	f8 08 00 08 	add	r8,r12,r8
80007d86:	58 09       	cp.w	r9,0
80007d88:	e0 80 05 bf 	breq	80008906 <_dtoa_r+0xc5a>
80007d8c:	12 95       	mov	r5,r9
80007d8e:	8b 08       	st.w	r5[0x0],r8
80007d90:	e0 8f 05 bb 	bral	80008906 <_dtoa_r+0xc5a>
80007d94:	fa c8 ff 9c 	sub	r8,sp,-100
80007d98:	fa c9 ff a0 	sub	r9,sp,-96
80007d9c:	fa ea 00 3c 	ld.d	r10,sp[60]
80007da0:	0e 9c       	mov	r12,r7
80007da2:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80007da6:	f0 1f 00 19 	mcall	80007e08 <_dtoa_r+0x15c>
80007daa:	18 93       	mov	r3,r12
80007dac:	58 05       	cp.w	r5,0
80007dae:	c0 d0       	breq	80007dc8 <_dtoa_r+0x11c>
80007db0:	fa ea 00 3c 	ld.d	r10,sp[60]
80007db4:	30 04       	mov	r4,0
80007db6:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80007dba:	ea c5 03 ff 	sub	r5,r5,1023
80007dbe:	10 9b       	mov	r11,r8
80007dc0:	51 74       	stdsp	sp[0x5c],r4
80007dc2:	ea 1b 3f f0 	orh	r11,0x3ff0
80007dc6:	c3 28       	rjmp	80007e2a <_dtoa_r+0x17e>
80007dc8:	41 88       	lddsp	r8,sp[0x60]
80007dca:	41 9c       	lddsp	r12,sp[0x64]
80007dcc:	10 0c       	add	r12,r8
80007dce:	f8 c5 fb ce 	sub	r5,r12,-1074
80007dd2:	e0 45 00 20 	cp.w	r5,32
80007dd6:	e0 8a 00 1b 	brle	80007e0c <_dtoa_r+0x160>
80007dda:	f8 cc fb ee 	sub	r12,r12,-1042
80007dde:	40 3b       	lddsp	r11,sp[0xc]
80007de0:	ea 08 11 40 	rsub	r8,r5,64
80007de4:	f6 0c 0a 4c 	lsr	r12,r11,r12
80007de8:	ec 08 09 46 	lsl	r6,r6,r8
80007dec:	0c 4c       	or	r12,r6
80007dee:	c1 48       	rjmp	80007e16 <_dtoa_r+0x16a>
80007df0:	80 00       	ld.sh	r0,r0[0x0]
80007df2:	4a e0       	lddpc	r0,80007ea8 <_dtoa_r+0x1fc>
80007df4:	80 00       	ld.sh	r0,r0[0x0]
80007df6:	93 7c       	st.w	r9[0x1c],r12
80007df8:	80 00       	ld.sh	r0,r0[0x0]
80007dfa:	b0 f8       	st.b	r8[0x7],r8
80007dfc:	80 00       	ld.sh	r0,r0[0x0]
80007dfe:	b1 04       	ld.d	r4,r8
80007e00:	80 00       	ld.sh	r0,r0[0x0]
80007e02:	a1 4a       	asr	r10,0x0
80007e04:	80 00       	ld.sh	r0,r0[0x0]
80007e06:	af d4       	cbr	r4,0xf
80007e08:	80 00       	ld.sh	r0,r0[0x0]
80007e0a:	94 2c       	ld.sh	r12,r10[0x4]
80007e0c:	ea 0c 11 20 	rsub	r12,r5,32
80007e10:	40 3a       	lddsp	r10,sp[0xc]
80007e12:	f4 0c 09 4c 	lsl	r12,r10,r12
80007e16:	f0 1f 00 6b 	mcall	80007fc0 <_dtoa_r+0x314>
80007e1a:	fc 18 fe 10 	movh	r8,0xfe10
80007e1e:	30 19       	mov	r9,1
80007e20:	ea c5 04 33 	sub	r5,r5,1075
80007e24:	f0 0b 00 0b 	add	r11,r8,r11
80007e28:	51 79       	stdsp	sp[0x5c],r9
80007e2a:	30 08       	mov	r8,0
80007e2c:	fc 19 3f f8 	movh	r9,0x3ff8
80007e30:	f0 1f 00 65 	mcall	80007fc4 <_dtoa_r+0x318>
80007e34:	e0 68 43 61 	mov	r8,17249
80007e38:	ea 18 63 6f 	orh	r8,0x636f
80007e3c:	e0 69 87 a7 	mov	r9,34727
80007e40:	ea 19 3f d2 	orh	r9,0x3fd2
80007e44:	f0 1f 00 61 	mcall	80007fc8 <_dtoa_r+0x31c>
80007e48:	e0 68 c8 b3 	mov	r8,51379
80007e4c:	ea 18 8b 60 	orh	r8,0x8b60
80007e50:	e0 69 8a 28 	mov	r9,35368
80007e54:	ea 19 3f c6 	orh	r9,0x3fc6
80007e58:	f0 1f 00 5d 	mcall	80007fcc <_dtoa_r+0x320>
80007e5c:	0a 9c       	mov	r12,r5
80007e5e:	14 90       	mov	r0,r10
80007e60:	16 91       	mov	r1,r11
80007e62:	f0 1f 00 5c 	mcall	80007fd0 <_dtoa_r+0x324>
80007e66:	e0 68 79 fb 	mov	r8,31227
80007e6a:	ea 18 50 9f 	orh	r8,0x509f
80007e6e:	e0 69 44 13 	mov	r9,17427
80007e72:	ea 19 3f d3 	orh	r9,0x3fd3
80007e76:	f0 1f 00 55 	mcall	80007fc8 <_dtoa_r+0x31c>
80007e7a:	14 98       	mov	r8,r10
80007e7c:	16 99       	mov	r9,r11
80007e7e:	00 9a       	mov	r10,r0
80007e80:	02 9b       	mov	r11,r1
80007e82:	f0 1f 00 53 	mcall	80007fcc <_dtoa_r+0x320>
80007e86:	14 90       	mov	r0,r10
80007e88:	16 91       	mov	r1,r11
80007e8a:	f0 1f 00 53 	mcall	80007fd4 <_dtoa_r+0x328>
80007e8e:	30 08       	mov	r8,0
80007e90:	18 96       	mov	r6,r12
80007e92:	30 09       	mov	r9,0
80007e94:	00 9a       	mov	r10,r0
80007e96:	02 9b       	mov	r11,r1
80007e98:	f0 1f 00 50 	mcall	80007fd8 <_dtoa_r+0x32c>
80007e9c:	c0 c0       	breq	80007eb4 <_dtoa_r+0x208>
80007e9e:	0c 9c       	mov	r12,r6
80007ea0:	f0 1f 00 4c 	mcall	80007fd0 <_dtoa_r+0x324>
80007ea4:	14 98       	mov	r8,r10
80007ea6:	16 99       	mov	r9,r11
80007ea8:	00 9a       	mov	r10,r0
80007eaa:	02 9b       	mov	r11,r1
80007eac:	f0 1f 00 4c 	mcall	80007fdc <_dtoa_r+0x330>
80007eb0:	f7 b6 00 01 	subeq	r6,1
80007eb4:	59 66       	cp.w	r6,22
80007eb6:	e0 88 00 05 	brls	80007ec0 <_dtoa_r+0x214>
80007eba:	30 18       	mov	r8,1
80007ebc:	51 48       	stdsp	sp[0x50],r8
80007ebe:	c1 28       	rjmp	80007ee2 <_dtoa_r+0x236>
80007ec0:	4c 88       	lddpc	r8,80007fe0 <_dtoa_r+0x334>
80007ec2:	fa ea 00 3c 	ld.d	r10,sp[60]
80007ec6:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80007eca:	f0 1f 00 44 	mcall	80007fd8 <_dtoa_r+0x32c>
80007ece:	f9 b4 00 00 	moveq	r4,0
80007ed2:	fb f4 0a 14 	st.weq	sp[0x50],r4
80007ed6:	f7 b6 01 01 	subne	r6,1
80007eda:	f9 bc 01 00 	movne	r12,0
80007ede:	fb fc 1a 14 	st.wne	sp[0x50],r12
80007ee2:	41 90       	lddsp	r0,sp[0x64]
80007ee4:	20 10       	sub	r0,1
80007ee6:	0a 10       	sub	r0,r5
80007ee8:	c0 46       	brmi	80007ef0 <_dtoa_r+0x244>
80007eea:	50 40       	stdsp	sp[0x10],r0
80007eec:	30 00       	mov	r0,0
80007eee:	c0 48       	rjmp	80007ef6 <_dtoa_r+0x24a>
80007ef0:	30 0b       	mov	r11,0
80007ef2:	5c 30       	neg	r0
80007ef4:	50 4b       	stdsp	sp[0x10],r11
80007ef6:	ec 02 11 00 	rsub	r2,r6,0
80007efa:	58 06       	cp.w	r6,0
80007efc:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80007f00:	f5 d6 e4 0a 	addge	r10,r10,r6
80007f04:	fb fa 4a 04 	st.wge	sp[0x10],r10
80007f08:	fb f6 4a 11 	st.wge	sp[0x44],r6
80007f0c:	f9 b2 04 00 	movge	r2,0
80007f10:	e1 d6 e5 10 	sublt	r0,r0,r6
80007f14:	f9 b9 05 00 	movlt	r9,0
80007f18:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80007f1c:	40 c8       	lddsp	r8,sp[0x30]
80007f1e:	58 98       	cp.w	r8,9
80007f20:	e0 8b 00 20 	brhi	80007f60 <_dtoa_r+0x2b4>
80007f24:	58 58       	cp.w	r8,5
80007f26:	f9 b4 0a 01 	movle	r4,1
80007f2a:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80007f2e:	f7 b5 09 04 	subgt	r5,4
80007f32:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80007f36:	f9 b4 09 00 	movgt	r4,0
80007f3a:	40 cc       	lddsp	r12,sp[0x30]
80007f3c:	58 3c       	cp.w	r12,3
80007f3e:	c2 d0       	breq	80007f98 <_dtoa_r+0x2ec>
80007f40:	e0 89 00 05 	brgt	80007f4a <_dtoa_r+0x29e>
80007f44:	58 2c       	cp.w	r12,2
80007f46:	c1 01       	brne	80007f66 <_dtoa_r+0x2ba>
80007f48:	c1 88       	rjmp	80007f78 <_dtoa_r+0x2cc>
80007f4a:	40 cb       	lddsp	r11,sp[0x30]
80007f4c:	58 4b       	cp.w	r11,4
80007f4e:	c0 60       	breq	80007f5a <_dtoa_r+0x2ae>
80007f50:	58 5b       	cp.w	r11,5
80007f52:	c0 a1       	brne	80007f66 <_dtoa_r+0x2ba>
80007f54:	30 1a       	mov	r10,1
80007f56:	50 da       	stdsp	sp[0x34],r10
80007f58:	c2 28       	rjmp	80007f9c <_dtoa_r+0x2f0>
80007f5a:	30 19       	mov	r9,1
80007f5c:	50 d9       	stdsp	sp[0x34],r9
80007f5e:	c0 f8       	rjmp	80007f7c <_dtoa_r+0x2d0>
80007f60:	30 08       	mov	r8,0
80007f62:	30 14       	mov	r4,1
80007f64:	50 c8       	stdsp	sp[0x30],r8
80007f66:	3f f5       	mov	r5,-1
80007f68:	30 1c       	mov	r12,1
80007f6a:	30 0b       	mov	r11,0
80007f6c:	50 95       	stdsp	sp[0x24],r5
80007f6e:	50 dc       	stdsp	sp[0x34],r12
80007f70:	0a 91       	mov	r1,r5
80007f72:	31 28       	mov	r8,18
80007f74:	50 eb       	stdsp	sp[0x38],r11
80007f76:	c2 08       	rjmp	80007fb6 <_dtoa_r+0x30a>
80007f78:	30 0a       	mov	r10,0
80007f7a:	50 da       	stdsp	sp[0x34],r10
80007f7c:	40 e9       	lddsp	r9,sp[0x38]
80007f7e:	58 09       	cp.w	r9,0
80007f80:	e0 89 00 07 	brgt	80007f8e <_dtoa_r+0x2e2>
80007f84:	30 18       	mov	r8,1
80007f86:	50 98       	stdsp	sp[0x24],r8
80007f88:	10 91       	mov	r1,r8
80007f8a:	50 e8       	stdsp	sp[0x38],r8
80007f8c:	c1 58       	rjmp	80007fb6 <_dtoa_r+0x30a>
80007f8e:	40 e5       	lddsp	r5,sp[0x38]
80007f90:	50 95       	stdsp	sp[0x24],r5
80007f92:	0a 91       	mov	r1,r5
80007f94:	0a 98       	mov	r8,r5
80007f96:	c1 08       	rjmp	80007fb6 <_dtoa_r+0x30a>
80007f98:	30 0c       	mov	r12,0
80007f9a:	50 dc       	stdsp	sp[0x34],r12
80007f9c:	40 eb       	lddsp	r11,sp[0x38]
80007f9e:	ec 0b 00 0b 	add	r11,r6,r11
80007fa2:	50 9b       	stdsp	sp[0x24],r11
80007fa4:	16 98       	mov	r8,r11
80007fa6:	2f f8       	sub	r8,-1
80007fa8:	58 08       	cp.w	r8,0
80007faa:	e0 89 00 05 	brgt	80007fb4 <_dtoa_r+0x308>
80007fae:	10 91       	mov	r1,r8
80007fb0:	30 18       	mov	r8,1
80007fb2:	c0 28       	rjmp	80007fb6 <_dtoa_r+0x30a>
80007fb4:	10 91       	mov	r1,r8
80007fb6:	30 09       	mov	r9,0
80007fb8:	6e 9a       	ld.w	r10,r7[0x24]
80007fba:	95 19       	st.w	r10[0x4],r9
80007fbc:	30 49       	mov	r9,4
80007fbe:	c1 78       	rjmp	80007fec <_dtoa_r+0x340>
80007fc0:	80 00       	ld.sh	r0,r0[0x0]
80007fc2:	a0 62       	st.h	r0[0xc],r2
80007fc4:	80 00       	ld.sh	r0,r0[0x0]
80007fc6:	9d 8c       	st.w	lr[0x20],r12
80007fc8:	80 00       	ld.sh	r0,r0[0x0]
80007fca:	9b b4       	st.w	sp[0x2c],r4
80007fcc:	80 00       	ld.sh	r0,r0[0x0]
80007fce:	9f 28       	st.w	pc[0x8],r8
80007fd0:	80 00       	ld.sh	r0,r0[0x0]
80007fd2:	a0 6a       	st.h	r0[0xc],r10
80007fd4:	80 00       	ld.sh	r0,r0[0x0]
80007fd6:	a0 3c       	st.h	r0[0x6],r12
80007fd8:	80 00       	ld.sh	r0,r0[0x0]
80007fda:	a1 d8       	cbr	r8,0x1
80007fdc:	80 00       	ld.sh	r0,r0[0x0]
80007fde:	a1 4a       	asr	r10,0x0
80007fe0:	80 00       	ld.sh	r0,r0[0x0]
80007fe2:	b1 b4       	sbr	r4,0x11
80007fe4:	6a 1a       	ld.w	r10,r5[0x4]
80007fe6:	a1 79       	lsl	r9,0x1
80007fe8:	2f fa       	sub	r10,-1
80007fea:	8b 1a       	st.w	r5[0x4],r10
80007fec:	6e 95       	ld.w	r5,r7[0x24]
80007fee:	f2 ca ff ec 	sub	r10,r9,-20
80007ff2:	10 3a       	cp.w	r10,r8
80007ff4:	fe 98 ff f8 	brls	80007fe4 <_dtoa_r+0x338>
80007ff8:	6a 1b       	ld.w	r11,r5[0x4]
80007ffa:	0e 9c       	mov	r12,r7
80007ffc:	f0 1f 00 53 	mcall	80008148 <_dtoa_r+0x49c>
80008000:	58 e1       	cp.w	r1,14
80008002:	5f 88       	srls	r8
80008004:	8b 0c       	st.w	r5[0x0],r12
80008006:	f1 e4 00 04 	and	r4,r8,r4
8000800a:	6e 98       	ld.w	r8,r7[0x24]
8000800c:	70 08       	ld.w	r8,r8[0x0]
8000800e:	50 88       	stdsp	sp[0x20],r8
80008010:	e0 80 01 98 	breq	80008340 <_dtoa_r+0x694>
80008014:	58 06       	cp.w	r6,0
80008016:	e0 8a 00 40 	brle	80008096 <_dtoa_r+0x3ea>
8000801a:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000801e:	4c c8       	lddpc	r8,8000814c <_dtoa_r+0x4a0>
80008020:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80008024:	fa e5 00 18 	st.d	sp[24],r4
80008028:	ec 04 14 04 	asr	r4,r6,0x4
8000802c:	ed b4 00 04 	bld	r4,0x4
80008030:	c0 30       	breq	80008036 <_dtoa_r+0x38a>
80008032:	30 25       	mov	r5,2
80008034:	c0 f8       	rjmp	80008052 <_dtoa_r+0x3a6>
80008036:	4c 78       	lddpc	r8,80008150 <_dtoa_r+0x4a4>
80008038:	f0 e8 00 20 	ld.d	r8,r8[32]
8000803c:	fa ea 00 3c 	ld.d	r10,sp[60]
80008040:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80008044:	f0 1f 00 44 	mcall	80008154 <_dtoa_r+0x4a8>
80008048:	30 35       	mov	r5,3
8000804a:	14 98       	mov	r8,r10
8000804c:	16 99       	mov	r9,r11
8000804e:	fa e9 00 08 	st.d	sp[8],r8
80008052:	4c 0c       	lddpc	r12,80008150 <_dtoa_r+0x4a4>
80008054:	50 a3       	stdsp	sp[0x28],r3
80008056:	0c 93       	mov	r3,r6
80008058:	18 96       	mov	r6,r12
8000805a:	c0 f8       	rjmp	80008078 <_dtoa_r+0x3cc>
8000805c:	fa ea 00 18 	ld.d	r10,sp[24]
80008060:	ed b4 00 00 	bld	r4,0x0
80008064:	c0 81       	brne	80008074 <_dtoa_r+0x3c8>
80008066:	ec e8 00 00 	ld.d	r8,r6[0]
8000806a:	2f f5       	sub	r5,-1
8000806c:	f0 1f 00 3b 	mcall	80008158 <_dtoa_r+0x4ac>
80008070:	fa eb 00 18 	st.d	sp[24],r10
80008074:	a1 54       	asr	r4,0x1
80008076:	2f 86       	sub	r6,-8
80008078:	58 04       	cp.w	r4,0
8000807a:	cf 11       	brne	8000805c <_dtoa_r+0x3b0>
8000807c:	fa e8 00 18 	ld.d	r8,sp[24]
80008080:	fa ea 00 08 	ld.d	r10,sp[8]
80008084:	06 96       	mov	r6,r3
80008086:	f0 1f 00 34 	mcall	80008154 <_dtoa_r+0x4a8>
8000808a:	40 a3       	lddsp	r3,sp[0x28]
8000808c:	14 98       	mov	r8,r10
8000808e:	16 99       	mov	r9,r11
80008090:	fa e9 00 08 	st.d	sp[8],r8
80008094:	c2 d8       	rjmp	800080ee <_dtoa_r+0x442>
80008096:	ec 08 11 00 	rsub	r8,r6,0
8000809a:	c0 31       	brne	800080a0 <_dtoa_r+0x3f4>
8000809c:	30 25       	mov	r5,2
8000809e:	c2 88       	rjmp	800080ee <_dtoa_r+0x442>
800080a0:	4a cc       	lddpc	r12,80008150 <_dtoa_r+0x4a4>
800080a2:	f0 04 14 04 	asr	r4,r8,0x4
800080a6:	50 1c       	stdsp	sp[0x4],r12
800080a8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800080ac:	4a 89       	lddpc	r9,8000814c <_dtoa_r+0x4a0>
800080ae:	fa ea 00 3c 	ld.d	r10,sp[60]
800080b2:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800080b6:	f0 1f 00 29 	mcall	80008158 <_dtoa_r+0x4ac>
800080ba:	40 1c       	lddsp	r12,sp[0x4]
800080bc:	50 63       	stdsp	sp[0x18],r3
800080be:	30 25       	mov	r5,2
800080c0:	0c 93       	mov	r3,r6
800080c2:	fa eb 00 08 	st.d	sp[8],r10
800080c6:	18 96       	mov	r6,r12
800080c8:	c0 f8       	rjmp	800080e6 <_dtoa_r+0x43a>
800080ca:	fa ea 00 08 	ld.d	r10,sp[8]
800080ce:	ed b4 00 00 	bld	r4,0x0
800080d2:	c0 81       	brne	800080e2 <_dtoa_r+0x436>
800080d4:	ec e8 00 00 	ld.d	r8,r6[0]
800080d8:	2f f5       	sub	r5,-1
800080da:	f0 1f 00 20 	mcall	80008158 <_dtoa_r+0x4ac>
800080de:	fa eb 00 08 	st.d	sp[8],r10
800080e2:	a1 54       	asr	r4,0x1
800080e4:	2f 86       	sub	r6,-8
800080e6:	58 04       	cp.w	r4,0
800080e8:	cf 11       	brne	800080ca <_dtoa_r+0x41e>
800080ea:	06 96       	mov	r6,r3
800080ec:	40 63       	lddsp	r3,sp[0x18]
800080ee:	41 4a       	lddsp	r10,sp[0x50]
800080f0:	58 0a       	cp.w	r10,0
800080f2:	c3 70       	breq	80008160 <_dtoa_r+0x4b4>
800080f4:	fa e8 00 08 	ld.d	r8,sp[8]
800080f8:	58 01       	cp.w	r1,0
800080fa:	5f 94       	srgt	r4
800080fc:	fa e9 00 18 	st.d	sp[24],r8
80008100:	30 08       	mov	r8,0
80008102:	fc 19 3f f0 	movh	r9,0x3ff0
80008106:	fa ea 00 18 	ld.d	r10,sp[24]
8000810a:	f0 1f 00 15 	mcall	8000815c <_dtoa_r+0x4b0>
8000810e:	f9 bc 00 00 	moveq	r12,0
80008112:	f9 bc 01 01 	movne	r12,1
80008116:	e9 ec 00 0c 	and	r12,r4,r12
8000811a:	c2 30       	breq	80008160 <_dtoa_r+0x4b4>
8000811c:	40 98       	lddsp	r8,sp[0x24]
8000811e:	58 08       	cp.w	r8,0
80008120:	e0 8a 01 0c 	brle	80008338 <_dtoa_r+0x68c>
80008124:	30 08       	mov	r8,0
80008126:	fc 19 40 24 	movh	r9,0x4024
8000812a:	ec c4 00 01 	sub	r4,r6,1
8000812e:	fa ea 00 18 	ld.d	r10,sp[24]
80008132:	2f f5       	sub	r5,-1
80008134:	50 64       	stdsp	sp[0x18],r4
80008136:	f0 1f 00 09 	mcall	80008158 <_dtoa_r+0x4ac>
8000813a:	40 94       	lddsp	r4,sp[0x24]
8000813c:	14 98       	mov	r8,r10
8000813e:	16 99       	mov	r9,r11
80008140:	fa e9 00 08 	st.d	sp[8],r8
80008144:	c1 08       	rjmp	80008164 <_dtoa_r+0x4b8>
80008146:	00 00       	add	r0,r0
80008148:	80 00       	ld.sh	r0,r0[0x0]
8000814a:	93 b4       	st.w	r9[0x2c],r4
8000814c:	80 00       	ld.sh	r0,r0[0x0]
8000814e:	b1 b4       	sbr	r4,0x11
80008150:	80 00       	ld.sh	r0,r0[0x0]
80008152:	b2 7c       	st.h	r9[0xe],r12
80008154:	80 00       	ld.sh	r0,r0[0x0]
80008156:	a2 40       	st.h	r1[0x8],r0
80008158:	80 00       	ld.sh	r0,r0[0x0]
8000815a:	9b b4       	st.w	sp[0x2c],r4
8000815c:	80 00       	ld.sh	r0,r0[0x0]
8000815e:	a1 d8       	cbr	r8,0x1
80008160:	50 66       	stdsp	sp[0x18],r6
80008162:	02 94       	mov	r4,r1
80008164:	0a 9c       	mov	r12,r5
80008166:	f0 1f 00 69 	mcall	80008308 <_dtoa_r+0x65c>
8000816a:	fa e8 00 08 	ld.d	r8,sp[8]
8000816e:	f0 1f 00 68 	mcall	8000830c <_dtoa_r+0x660>
80008172:	30 08       	mov	r8,0
80008174:	fc 19 40 1c 	movh	r9,0x401c
80008178:	f0 1f 00 66 	mcall	80008310 <_dtoa_r+0x664>
8000817c:	14 98       	mov	r8,r10
8000817e:	16 99       	mov	r9,r11
80008180:	fa e9 00 28 	st.d	sp[40],r8
80008184:	fc 18 fc c0 	movh	r8,0xfcc0
80008188:	40 a5       	lddsp	r5,sp[0x28]
8000818a:	10 05       	add	r5,r8
8000818c:	50 a5       	stdsp	sp[0x28],r5
8000818e:	58 04       	cp.w	r4,0
80008190:	c2 11       	brne	800081d2 <_dtoa_r+0x526>
80008192:	fa ea 00 08 	ld.d	r10,sp[8]
80008196:	30 08       	mov	r8,0
80008198:	fc 19 40 14 	movh	r9,0x4014
8000819c:	f0 1f 00 5e 	mcall	80008314 <_dtoa_r+0x668>
800081a0:	40 bc       	lddsp	r12,sp[0x2c]
800081a2:	fa eb 00 08 	st.d	sp[8],r10
800081a6:	14 98       	mov	r8,r10
800081a8:	16 99       	mov	r9,r11
800081aa:	18 9a       	mov	r10,r12
800081ac:	0a 9b       	mov	r11,r5
800081ae:	f0 1f 00 5b 	mcall	80008318 <_dtoa_r+0x66c>
800081b2:	e0 81 02 74 	brne	8000869a <_dtoa_r+0x9ee>
800081b6:	0a 98       	mov	r8,r5
800081b8:	40 b9       	lddsp	r9,sp[0x2c]
800081ba:	ee 18 80 00 	eorh	r8,0x8000
800081be:	fa ea 00 08 	ld.d	r10,sp[8]
800081c2:	10 95       	mov	r5,r8
800081c4:	12 98       	mov	r8,r9
800081c6:	0a 99       	mov	r9,r5
800081c8:	f0 1f 00 54 	mcall	80008318 <_dtoa_r+0x66c>
800081cc:	e0 81 02 5e 	brne	80008688 <_dtoa_r+0x9dc>
800081d0:	cb 48       	rjmp	80008338 <_dtoa_r+0x68c>
800081d2:	4d 39       	lddpc	r9,8000831c <_dtoa_r+0x670>
800081d4:	e8 c8 00 01 	sub	r8,r4,1
800081d8:	40 d5       	lddsp	r5,sp[0x34]
800081da:	58 05       	cp.w	r5,0
800081dc:	c4 f0       	breq	8000827a <_dtoa_r+0x5ce>
800081de:	30 0c       	mov	r12,0
800081e0:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800081e4:	51 3c       	stdsp	sp[0x4c],r12
800081e6:	30 0a       	mov	r10,0
800081e8:	fc 1b 3f e0 	movh	r11,0x3fe0
800081ec:	f0 1f 00 4d 	mcall	80008320 <_dtoa_r+0x674>
800081f0:	fa e8 00 28 	ld.d	r8,sp[40]
800081f4:	40 85       	lddsp	r5,sp[0x20]
800081f6:	f0 1f 00 48 	mcall	80008314 <_dtoa_r+0x668>
800081fa:	fa eb 00 28 	st.d	sp[40],r10
800081fe:	fa ea 00 08 	ld.d	r10,sp[8]
80008202:	f0 1f 00 49 	mcall	80008324 <_dtoa_r+0x678>
80008206:	51 6c       	stdsp	sp[0x58],r12
80008208:	f0 1f 00 40 	mcall	80008308 <_dtoa_r+0x65c>
8000820c:	14 98       	mov	r8,r10
8000820e:	16 99       	mov	r9,r11
80008210:	fa ea 00 08 	ld.d	r10,sp[8]
80008214:	f0 1f 00 40 	mcall	80008314 <_dtoa_r+0x668>
80008218:	fa eb 00 08 	st.d	sp[8],r10
8000821c:	41 68       	lddsp	r8,sp[0x58]
8000821e:	2d 08       	sub	r8,-48
80008220:	0a c8       	st.b	r5++,r8
80008222:	41 39       	lddsp	r9,sp[0x4c]
80008224:	2f f9       	sub	r9,-1
80008226:	51 39       	stdsp	sp[0x4c],r9
80008228:	fa e8 00 28 	ld.d	r8,sp[40]
8000822c:	f0 1f 00 3b 	mcall	80008318 <_dtoa_r+0x66c>
80008230:	e0 81 03 5a 	brne	800088e4 <_dtoa_r+0xc38>
80008234:	fa e8 00 08 	ld.d	r8,sp[8]
80008238:	30 0a       	mov	r10,0
8000823a:	fc 1b 3f f0 	movh	r11,0x3ff0
8000823e:	f0 1f 00 36 	mcall	80008314 <_dtoa_r+0x668>
80008242:	fa e8 00 28 	ld.d	r8,sp[40]
80008246:	f0 1f 00 35 	mcall	80008318 <_dtoa_r+0x66c>
8000824a:	fa ea 00 28 	ld.d	r10,sp[40]
8000824e:	30 08       	mov	r8,0
80008250:	fc 19 40 24 	movh	r9,0x4024
80008254:	e0 81 00 e8 	brne	80008424 <_dtoa_r+0x778>
80008258:	41 3c       	lddsp	r12,sp[0x4c]
8000825a:	08 3c       	cp.w	r12,r4
8000825c:	c6 e4       	brge	80008338 <_dtoa_r+0x68c>
8000825e:	f0 1f 00 2c 	mcall	8000830c <_dtoa_r+0x660>
80008262:	30 08       	mov	r8,0
80008264:	fa eb 00 28 	st.d	sp[40],r10
80008268:	fc 19 40 24 	movh	r9,0x4024
8000826c:	fa ea 00 08 	ld.d	r10,sp[8]
80008270:	f0 1f 00 27 	mcall	8000830c <_dtoa_r+0x660>
80008274:	fa eb 00 08 	st.d	sp[8],r10
80008278:	cc 3b       	rjmp	800081fe <_dtoa_r+0x552>
8000827a:	40 85       	lddsp	r5,sp[0x20]
8000827c:	08 05       	add	r5,r4
8000827e:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80008282:	51 35       	stdsp	sp[0x4c],r5
80008284:	fa e8 00 28 	ld.d	r8,sp[40]
80008288:	40 85       	lddsp	r5,sp[0x20]
8000828a:	f0 1f 00 21 	mcall	8000830c <_dtoa_r+0x660>
8000828e:	fa eb 00 28 	st.d	sp[40],r10
80008292:	fa ea 00 08 	ld.d	r10,sp[8]
80008296:	f0 1f 00 24 	mcall	80008324 <_dtoa_r+0x678>
8000829a:	51 6c       	stdsp	sp[0x58],r12
8000829c:	f0 1f 00 1b 	mcall	80008308 <_dtoa_r+0x65c>
800082a0:	14 98       	mov	r8,r10
800082a2:	16 99       	mov	r9,r11
800082a4:	fa ea 00 08 	ld.d	r10,sp[8]
800082a8:	f0 1f 00 1b 	mcall	80008314 <_dtoa_r+0x668>
800082ac:	fa eb 00 08 	st.d	sp[8],r10
800082b0:	41 68       	lddsp	r8,sp[0x58]
800082b2:	2d 08       	sub	r8,-48
800082b4:	0a c8       	st.b	r5++,r8
800082b6:	41 3c       	lddsp	r12,sp[0x4c]
800082b8:	18 35       	cp.w	r5,r12
800082ba:	c3 71       	brne	80008328 <_dtoa_r+0x67c>
800082bc:	30 08       	mov	r8,0
800082be:	fc 19 3f e0 	movh	r9,0x3fe0
800082c2:	fa ea 00 28 	ld.d	r10,sp[40]
800082c6:	f0 1f 00 13 	mcall	80008310 <_dtoa_r+0x664>
800082ca:	40 85       	lddsp	r5,sp[0x20]
800082cc:	fa e8 00 08 	ld.d	r8,sp[8]
800082d0:	08 05       	add	r5,r4
800082d2:	f0 1f 00 12 	mcall	80008318 <_dtoa_r+0x66c>
800082d6:	e0 81 00 a7 	brne	80008424 <_dtoa_r+0x778>
800082da:	fa e8 00 28 	ld.d	r8,sp[40]
800082de:	30 0a       	mov	r10,0
800082e0:	fc 1b 3f e0 	movh	r11,0x3fe0
800082e4:	f0 1f 00 0c 	mcall	80008314 <_dtoa_r+0x668>
800082e8:	14 98       	mov	r8,r10
800082ea:	16 99       	mov	r9,r11
800082ec:	fa ea 00 08 	ld.d	r10,sp[8]
800082f0:	f0 1f 00 0a 	mcall	80008318 <_dtoa_r+0x66c>
800082f4:	c2 20       	breq	80008338 <_dtoa_r+0x68c>
800082f6:	33 09       	mov	r9,48
800082f8:	0a 98       	mov	r8,r5
800082fa:	11 7a       	ld.ub	r10,--r8
800082fc:	f2 0a 18 00 	cp.b	r10,r9
80008300:	e0 81 02 f2 	brne	800088e4 <_dtoa_r+0xc38>
80008304:	10 95       	mov	r5,r8
80008306:	cf 9b       	rjmp	800082f8 <_dtoa_r+0x64c>
80008308:	80 00       	ld.sh	r0,r0[0x0]
8000830a:	a0 6a       	st.h	r0[0xc],r10
8000830c:	80 00       	ld.sh	r0,r0[0x0]
8000830e:	9b b4       	st.w	sp[0x2c],r4
80008310:	80 00       	ld.sh	r0,r0[0x0]
80008312:	9f 28       	st.w	pc[0x8],r8
80008314:	80 00       	ld.sh	r0,r0[0x0]
80008316:	9d 8c       	st.w	lr[0x20],r12
80008318:	80 00       	ld.sh	r0,r0[0x0]
8000831a:	a1 d8       	cbr	r8,0x1
8000831c:	80 00       	ld.sh	r0,r0[0x0]
8000831e:	b1 b4       	sbr	r4,0x11
80008320:	80 00       	ld.sh	r0,r0[0x0]
80008322:	a2 40       	st.h	r1[0x8],r0
80008324:	80 00       	ld.sh	r0,r0[0x0]
80008326:	a0 3c       	st.h	r0[0x6],r12
80008328:	30 08       	mov	r8,0
8000832a:	fc 19 40 24 	movh	r9,0x4024
8000832e:	f0 1f 00 56 	mcall	80008484 <_dtoa_r+0x7d8>
80008332:	fa eb 00 08 	st.d	sp[8],r10
80008336:	ca eb       	rjmp	80008292 <_dtoa_r+0x5e6>
80008338:	fa ea 00 3c 	ld.d	r10,sp[60]
8000833c:	fa eb 00 08 	st.d	sp[8],r10
80008340:	58 e6       	cp.w	r6,14
80008342:	5f ab       	srle	r11
80008344:	41 8a       	lddsp	r10,sp[0x60]
80008346:	30 08       	mov	r8,0
80008348:	f4 09 11 ff 	rsub	r9,r10,-1
8000834c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80008350:	f0 09 18 00 	cp.b	r9,r8
80008354:	e0 80 00 81 	breq	80008456 <_dtoa_r+0x7aa>
80008358:	40 ea       	lddsp	r10,sp[0x38]
8000835a:	58 01       	cp.w	r1,0
8000835c:	5f a9       	srle	r9
8000835e:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80008362:	4c aa       	lddpc	r10,80008488 <_dtoa_r+0x7dc>
80008364:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80008368:	fa e5 00 10 	st.d	sp[16],r4
8000836c:	f0 09 18 00 	cp.b	r9,r8
80008370:	c1 40       	breq	80008398 <_dtoa_r+0x6ec>
80008372:	58 01       	cp.w	r1,0
80008374:	e0 81 01 8a 	brne	80008688 <_dtoa_r+0x9dc>
80008378:	30 08       	mov	r8,0
8000837a:	fc 19 40 14 	movh	r9,0x4014
8000837e:	08 9a       	mov	r10,r4
80008380:	0a 9b       	mov	r11,r5
80008382:	f0 1f 00 41 	mcall	80008484 <_dtoa_r+0x7d8>
80008386:	fa e8 00 08 	ld.d	r8,sp[8]
8000838a:	f0 1f 00 41 	mcall	8000848c <_dtoa_r+0x7e0>
8000838e:	e0 81 01 7d 	brne	80008688 <_dtoa_r+0x9dc>
80008392:	02 92       	mov	r2,r1
80008394:	e0 8f 01 85 	bral	8000869e <_dtoa_r+0x9f2>
80008398:	40 85       	lddsp	r5,sp[0x20]
8000839a:	30 14       	mov	r4,1
8000839c:	fa e8 00 10 	ld.d	r8,sp[16]
800083a0:	fa ea 00 08 	ld.d	r10,sp[8]
800083a4:	f0 1f 00 3b 	mcall	80008490 <_dtoa_r+0x7e4>
800083a8:	f0 1f 00 3b 	mcall	80008494 <_dtoa_r+0x7e8>
800083ac:	18 92       	mov	r2,r12
800083ae:	f0 1f 00 3b 	mcall	80008498 <_dtoa_r+0x7ec>
800083b2:	fa e8 00 10 	ld.d	r8,sp[16]
800083b6:	f0 1f 00 34 	mcall	80008484 <_dtoa_r+0x7d8>
800083ba:	14 98       	mov	r8,r10
800083bc:	16 99       	mov	r9,r11
800083be:	fa ea 00 08 	ld.d	r10,sp[8]
800083c2:	f0 1f 00 37 	mcall	8000849c <_dtoa_r+0x7f0>
800083c6:	fa eb 00 08 	st.d	sp[8],r10
800083ca:	e4 c8 ff d0 	sub	r8,r2,-48
800083ce:	0a c8       	st.b	r5++,r8
800083d0:	fc 19 40 24 	movh	r9,0x4024
800083d4:	30 08       	mov	r8,0
800083d6:	02 34       	cp.w	r4,r1
800083d8:	c3 31       	brne	8000843e <_dtoa_r+0x792>
800083da:	fa e8 00 08 	ld.d	r8,sp[8]
800083de:	f0 1f 00 31 	mcall	800084a0 <_dtoa_r+0x7f4>
800083e2:	16 91       	mov	r1,r11
800083e4:	14 90       	mov	r0,r10
800083e6:	14 98       	mov	r8,r10
800083e8:	02 99       	mov	r9,r1
800083ea:	fa ea 00 10 	ld.d	r10,sp[16]
800083ee:	f0 1f 00 2e 	mcall	800084a4 <_dtoa_r+0x7f8>
800083f2:	c1 a1       	brne	80008426 <_dtoa_r+0x77a>
800083f4:	fa e8 00 10 	ld.d	r8,sp[16]
800083f8:	00 9a       	mov	r10,r0
800083fa:	02 9b       	mov	r11,r1
800083fc:	f0 1f 00 2b 	mcall	800084a8 <_dtoa_r+0x7fc>
80008400:	e0 80 02 71 	breq	800088e2 <_dtoa_r+0xc36>
80008404:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80008408:	c0 f1       	brne	80008426 <_dtoa_r+0x77a>
8000840a:	e0 8f 02 6c 	bral	800088e2 <_dtoa_r+0xc36>
8000840e:	40 8a       	lddsp	r10,sp[0x20]
80008410:	14 38       	cp.w	r8,r10
80008412:	c0 30       	breq	80008418 <_dtoa_r+0x76c>
80008414:	10 95       	mov	r5,r8
80008416:	c0 98       	rjmp	80008428 <_dtoa_r+0x77c>
80008418:	33 08       	mov	r8,48
8000841a:	40 89       	lddsp	r9,sp[0x20]
8000841c:	2f f6       	sub	r6,-1
8000841e:	b2 88       	st.b	r9[0x0],r8
80008420:	40 88       	lddsp	r8,sp[0x20]
80008422:	c0 88       	rjmp	80008432 <_dtoa_r+0x786>
80008424:	40 66       	lddsp	r6,sp[0x18]
80008426:	33 99       	mov	r9,57
80008428:	0a 98       	mov	r8,r5
8000842a:	11 7a       	ld.ub	r10,--r8
8000842c:	f2 0a 18 00 	cp.b	r10,r9
80008430:	ce f0       	breq	8000840e <_dtoa_r+0x762>
80008432:	50 66       	stdsp	sp[0x18],r6
80008434:	11 89       	ld.ub	r9,r8[0x0]
80008436:	2f f9       	sub	r9,-1
80008438:	b0 89       	st.b	r8[0x0],r9
8000843a:	e0 8f 02 55 	bral	800088e4 <_dtoa_r+0xc38>
8000843e:	f0 1f 00 12 	mcall	80008484 <_dtoa_r+0x7d8>
80008442:	2f f4       	sub	r4,-1
80008444:	fa eb 00 08 	st.d	sp[8],r10
80008448:	30 08       	mov	r8,0
8000844a:	30 09       	mov	r9,0
8000844c:	f0 1f 00 17 	mcall	800084a8 <_dtoa_r+0x7fc>
80008450:	ca 60       	breq	8000839c <_dtoa_r+0x6f0>
80008452:	e0 8f 02 48 	bral	800088e2 <_dtoa_r+0xc36>
80008456:	40 d8       	lddsp	r8,sp[0x34]
80008458:	58 08       	cp.w	r8,0
8000845a:	c0 51       	brne	80008464 <_dtoa_r+0x7b8>
8000845c:	04 98       	mov	r8,r2
8000845e:	00 95       	mov	r5,r0
80008460:	40 d4       	lddsp	r4,sp[0x34]
80008462:	c4 a8       	rjmp	800084f6 <_dtoa_r+0x84a>
80008464:	40 c5       	lddsp	r5,sp[0x30]
80008466:	58 15       	cp.w	r5,1
80008468:	e0 89 00 22 	brgt	800084ac <_dtoa_r+0x800>
8000846c:	41 74       	lddsp	r4,sp[0x5c]
8000846e:	58 04       	cp.w	r4,0
80008470:	c0 40       	breq	80008478 <_dtoa_r+0x7cc>
80008472:	f4 c9 fb cd 	sub	r9,r10,-1075
80008476:	c0 48       	rjmp	8000847e <_dtoa_r+0x7d2>
80008478:	41 99       	lddsp	r9,sp[0x64]
8000847a:	f2 09 11 36 	rsub	r9,r9,54
8000847e:	04 98       	mov	r8,r2
80008480:	00 95       	mov	r5,r0
80008482:	c2 f8       	rjmp	800084e0 <_dtoa_r+0x834>
80008484:	80 00       	ld.sh	r0,r0[0x0]
80008486:	9b b4       	st.w	sp[0x2c],r4
80008488:	80 00       	ld.sh	r0,r0[0x0]
8000848a:	b1 b4       	sbr	r4,0x11
8000848c:	80 00       	ld.sh	r0,r0[0x0]
8000848e:	a1 70       	lsl	r0,0x1
80008490:	80 00       	ld.sh	r0,r0[0x0]
80008492:	a2 40       	st.h	r1[0x8],r0
80008494:	80 00       	ld.sh	r0,r0[0x0]
80008496:	a0 3c       	st.h	r0[0x6],r12
80008498:	80 00       	ld.sh	r0,r0[0x0]
8000849a:	a0 6a       	st.h	r0[0xc],r10
8000849c:	80 00       	ld.sh	r0,r0[0x0]
8000849e:	9d 8c       	st.w	lr[0x20],r12
800084a0:	80 00       	ld.sh	r0,r0[0x0]
800084a2:	9f 28       	st.w	pc[0x8],r8
800084a4:	80 00       	ld.sh	r0,r0[0x0]
800084a6:	a1 d8       	cbr	r8,0x1
800084a8:	80 00       	ld.sh	r0,r0[0x0]
800084aa:	a1 4a       	asr	r10,0x0
800084ac:	e2 c8 00 01 	sub	r8,r1,1
800084b0:	58 01       	cp.w	r1,0
800084b2:	e0 05 17 40 	movge	r5,r0
800084b6:	e2 09 17 40 	movge	r9,r1
800084ba:	e1 d1 e5 15 	sublt	r5,r0,r1
800084be:	f9 b9 05 00 	movlt	r9,0
800084c2:	10 32       	cp.w	r2,r8
800084c4:	e5 d8 e4 18 	subge	r8,r2,r8
800084c8:	f1 d2 e5 18 	sublt	r8,r8,r2
800084cc:	e5 d8 e5 02 	addlt	r2,r2,r8
800084d0:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
800084d4:	f9 d8 e5 0c 	addlt	r12,r12,r8
800084d8:	fb fc 5a 11 	st.wlt	sp[0x44],r12
800084dc:	f9 b8 05 00 	movlt	r8,0
800084e0:	40 4b       	lddsp	r11,sp[0x10]
800084e2:	12 0b       	add	r11,r9
800084e4:	50 08       	stdsp	sp[0x0],r8
800084e6:	50 4b       	stdsp	sp[0x10],r11
800084e8:	12 00       	add	r0,r9
800084ea:	30 1b       	mov	r11,1
800084ec:	0e 9c       	mov	r12,r7
800084ee:	f0 1f 01 08 	mcall	8000890c <_dtoa_r+0xc60>
800084f2:	40 08       	lddsp	r8,sp[0x0]
800084f4:	18 94       	mov	r4,r12
800084f6:	40 4a       	lddsp	r10,sp[0x10]
800084f8:	58 05       	cp.w	r5,0
800084fa:	5f 99       	srgt	r9
800084fc:	58 0a       	cp.w	r10,0
800084fe:	5f 9a       	srgt	r10
80008500:	f5 e9 00 09 	and	r9,r10,r9
80008504:	c0 80       	breq	80008514 <_dtoa_r+0x868>
80008506:	40 4c       	lddsp	r12,sp[0x10]
80008508:	f8 05 0d 49 	min	r9,r12,r5
8000850c:	12 1c       	sub	r12,r9
8000850e:	12 10       	sub	r0,r9
80008510:	50 4c       	stdsp	sp[0x10],r12
80008512:	12 15       	sub	r5,r9
80008514:	58 02       	cp.w	r2,0
80008516:	e0 8a 00 27 	brle	80008564 <_dtoa_r+0x8b8>
8000851a:	40 db       	lddsp	r11,sp[0x34]
8000851c:	58 0b       	cp.w	r11,0
8000851e:	c1 d0       	breq	80008558 <_dtoa_r+0x8ac>
80008520:	58 08       	cp.w	r8,0
80008522:	e0 8a 00 17 	brle	80008550 <_dtoa_r+0x8a4>
80008526:	10 9a       	mov	r10,r8
80008528:	50 08       	stdsp	sp[0x0],r8
8000852a:	08 9b       	mov	r11,r4
8000852c:	0e 9c       	mov	r12,r7
8000852e:	f0 1f 00 f9 	mcall	80008910 <_dtoa_r+0xc64>
80008532:	06 9a       	mov	r10,r3
80008534:	18 9b       	mov	r11,r12
80008536:	18 94       	mov	r4,r12
80008538:	0e 9c       	mov	r12,r7
8000853a:	f0 1f 00 f7 	mcall	80008914 <_dtoa_r+0xc68>
8000853e:	18 99       	mov	r9,r12
80008540:	06 9b       	mov	r11,r3
80008542:	50 19       	stdsp	sp[0x4],r9
80008544:	0e 9c       	mov	r12,r7
80008546:	f0 1f 00 f5 	mcall	80008918 <_dtoa_r+0xc6c>
8000854a:	40 19       	lddsp	r9,sp[0x4]
8000854c:	40 08       	lddsp	r8,sp[0x0]
8000854e:	12 93       	mov	r3,r9
80008550:	e4 08 01 0a 	sub	r10,r2,r8
80008554:	c0 80       	breq	80008564 <_dtoa_r+0x8b8>
80008556:	c0 28       	rjmp	8000855a <_dtoa_r+0x8ae>
80008558:	04 9a       	mov	r10,r2
8000855a:	06 9b       	mov	r11,r3
8000855c:	0e 9c       	mov	r12,r7
8000855e:	f0 1f 00 ed 	mcall	80008910 <_dtoa_r+0xc64>
80008562:	18 93       	mov	r3,r12
80008564:	30 1b       	mov	r11,1
80008566:	0e 9c       	mov	r12,r7
80008568:	f0 1f 00 e9 	mcall	8000890c <_dtoa_r+0xc60>
8000856c:	41 1a       	lddsp	r10,sp[0x44]
8000856e:	18 92       	mov	r2,r12
80008570:	58 0a       	cp.w	r10,0
80008572:	e0 8a 00 07 	brle	80008580 <_dtoa_r+0x8d4>
80008576:	18 9b       	mov	r11,r12
80008578:	0e 9c       	mov	r12,r7
8000857a:	f0 1f 00 e6 	mcall	80008910 <_dtoa_r+0xc64>
8000857e:	18 92       	mov	r2,r12
80008580:	40 c9       	lddsp	r9,sp[0x30]
80008582:	58 19       	cp.w	r9,1
80008584:	e0 89 00 14 	brgt	800085ac <_dtoa_r+0x900>
80008588:	40 38       	lddsp	r8,sp[0xc]
8000858a:	58 08       	cp.w	r8,0
8000858c:	c1 01       	brne	800085ac <_dtoa_r+0x900>
8000858e:	40 29       	lddsp	r9,sp[0x8]
80008590:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80008594:	c0 c1       	brne	800085ac <_dtoa_r+0x900>
80008596:	12 98       	mov	r8,r9
80008598:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000859c:	c0 80       	breq	800085ac <_dtoa_r+0x900>
8000859e:	40 4c       	lddsp	r12,sp[0x10]
800085a0:	30 1b       	mov	r11,1
800085a2:	2f fc       	sub	r12,-1
800085a4:	2f f0       	sub	r0,-1
800085a6:	50 4c       	stdsp	sp[0x10],r12
800085a8:	50 6b       	stdsp	sp[0x18],r11
800085aa:	c0 38       	rjmp	800085b0 <_dtoa_r+0x904>
800085ac:	30 0a       	mov	r10,0
800085ae:	50 6a       	stdsp	sp[0x18],r10
800085b0:	41 19       	lddsp	r9,sp[0x44]
800085b2:	58 09       	cp.w	r9,0
800085b4:	c0 31       	brne	800085ba <_dtoa_r+0x90e>
800085b6:	30 1c       	mov	r12,1
800085b8:	c0 98       	rjmp	800085ca <_dtoa_r+0x91e>
800085ba:	64 48       	ld.w	r8,r2[0x10]
800085bc:	2f c8       	sub	r8,-4
800085be:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800085c2:	f0 1f 00 d7 	mcall	8000891c <_dtoa_r+0xc70>
800085c6:	f8 0c 11 20 	rsub	r12,r12,32
800085ca:	40 4b       	lddsp	r11,sp[0x10]
800085cc:	f8 0b 00 08 	add	r8,r12,r11
800085d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800085d4:	c0 c0       	breq	800085ec <_dtoa_r+0x940>
800085d6:	f0 08 11 20 	rsub	r8,r8,32
800085da:	58 48       	cp.w	r8,4
800085dc:	e0 8a 00 06 	brle	800085e8 <_dtoa_r+0x93c>
800085e0:	20 48       	sub	r8,4
800085e2:	10 0b       	add	r11,r8
800085e4:	50 4b       	stdsp	sp[0x10],r11
800085e6:	c0 78       	rjmp	800085f4 <_dtoa_r+0x948>
800085e8:	58 48       	cp.w	r8,4
800085ea:	c0 70       	breq	800085f8 <_dtoa_r+0x94c>
800085ec:	40 4a       	lddsp	r10,sp[0x10]
800085ee:	2e 48       	sub	r8,-28
800085f0:	10 0a       	add	r10,r8
800085f2:	50 4a       	stdsp	sp[0x10],r10
800085f4:	10 00       	add	r0,r8
800085f6:	10 05       	add	r5,r8
800085f8:	58 00       	cp.w	r0,0
800085fa:	e0 8a 00 08 	brle	8000860a <_dtoa_r+0x95e>
800085fe:	06 9b       	mov	r11,r3
80008600:	00 9a       	mov	r10,r0
80008602:	0e 9c       	mov	r12,r7
80008604:	f0 1f 00 c7 	mcall	80008920 <_dtoa_r+0xc74>
80008608:	18 93       	mov	r3,r12
8000860a:	40 49       	lddsp	r9,sp[0x10]
8000860c:	58 09       	cp.w	r9,0
8000860e:	e0 8a 00 08 	brle	8000861e <_dtoa_r+0x972>
80008612:	04 9b       	mov	r11,r2
80008614:	12 9a       	mov	r10,r9
80008616:	0e 9c       	mov	r12,r7
80008618:	f0 1f 00 c2 	mcall	80008920 <_dtoa_r+0xc74>
8000861c:	18 92       	mov	r2,r12
8000861e:	41 48       	lddsp	r8,sp[0x50]
80008620:	58 08       	cp.w	r8,0
80008622:	c1 b0       	breq	80008658 <_dtoa_r+0x9ac>
80008624:	04 9b       	mov	r11,r2
80008626:	06 9c       	mov	r12,r3
80008628:	f0 1f 00 bf 	mcall	80008924 <_dtoa_r+0xc78>
8000862c:	c1 64       	brge	80008658 <_dtoa_r+0x9ac>
8000862e:	06 9b       	mov	r11,r3
80008630:	30 09       	mov	r9,0
80008632:	30 aa       	mov	r10,10
80008634:	0e 9c       	mov	r12,r7
80008636:	f0 1f 00 bd 	mcall	80008928 <_dtoa_r+0xc7c>
8000863a:	20 16       	sub	r6,1
8000863c:	18 93       	mov	r3,r12
8000863e:	40 dc       	lddsp	r12,sp[0x34]
80008640:	58 0c       	cp.w	r12,0
80008642:	c0 31       	brne	80008648 <_dtoa_r+0x99c>
80008644:	40 91       	lddsp	r1,sp[0x24]
80008646:	c0 98       	rjmp	80008658 <_dtoa_r+0x9ac>
80008648:	08 9b       	mov	r11,r4
8000864a:	40 91       	lddsp	r1,sp[0x24]
8000864c:	30 09       	mov	r9,0
8000864e:	30 aa       	mov	r10,10
80008650:	0e 9c       	mov	r12,r7
80008652:	f0 1f 00 b6 	mcall	80008928 <_dtoa_r+0xc7c>
80008656:	18 94       	mov	r4,r12
80008658:	58 01       	cp.w	r1,0
8000865a:	5f a9       	srle	r9
8000865c:	40 cb       	lddsp	r11,sp[0x30]
8000865e:	58 2b       	cp.w	r11,2
80008660:	5f 98       	srgt	r8
80008662:	f3 e8 00 08 	and	r8,r9,r8
80008666:	c2 50       	breq	800086b0 <_dtoa_r+0xa04>
80008668:	58 01       	cp.w	r1,0
8000866a:	c1 11       	brne	8000868c <_dtoa_r+0x9e0>
8000866c:	04 9b       	mov	r11,r2
8000866e:	02 99       	mov	r9,r1
80008670:	30 5a       	mov	r10,5
80008672:	0e 9c       	mov	r12,r7
80008674:	f0 1f 00 ad 	mcall	80008928 <_dtoa_r+0xc7c>
80008678:	18 92       	mov	r2,r12
8000867a:	18 9b       	mov	r11,r12
8000867c:	06 9c       	mov	r12,r3
8000867e:	f0 1f 00 aa 	mcall	80008924 <_dtoa_r+0xc78>
80008682:	e0 89 00 0f 	brgt	800086a0 <_dtoa_r+0x9f4>
80008686:	c0 38       	rjmp	8000868c <_dtoa_r+0x9e0>
80008688:	30 02       	mov	r2,0
8000868a:	04 94       	mov	r4,r2
8000868c:	40 ea       	lddsp	r10,sp[0x38]
8000868e:	30 09       	mov	r9,0
80008690:	5c da       	com	r10
80008692:	40 85       	lddsp	r5,sp[0x20]
80008694:	50 6a       	stdsp	sp[0x18],r10
80008696:	50 49       	stdsp	sp[0x10],r9
80008698:	c0 f9       	rjmp	800088b6 <_dtoa_r+0xc0a>
8000869a:	08 92       	mov	r2,r4
8000869c:	40 66       	lddsp	r6,sp[0x18]
8000869e:	04 94       	mov	r4,r2
800086a0:	2f f6       	sub	r6,-1
800086a2:	50 66       	stdsp	sp[0x18],r6
800086a4:	33 18       	mov	r8,49
800086a6:	40 85       	lddsp	r5,sp[0x20]
800086a8:	0a c8       	st.b	r5++,r8
800086aa:	30 08       	mov	r8,0
800086ac:	50 48       	stdsp	sp[0x10],r8
800086ae:	c0 49       	rjmp	800088b6 <_dtoa_r+0xc0a>
800086b0:	40 dc       	lddsp	r12,sp[0x34]
800086b2:	58 0c       	cp.w	r12,0
800086b4:	e0 80 00 b5 	breq	8000881e <_dtoa_r+0xb72>
800086b8:	58 05       	cp.w	r5,0
800086ba:	e0 8a 00 08 	brle	800086ca <_dtoa_r+0xa1e>
800086be:	08 9b       	mov	r11,r4
800086c0:	0a 9a       	mov	r10,r5
800086c2:	0e 9c       	mov	r12,r7
800086c4:	f0 1f 00 97 	mcall	80008920 <_dtoa_r+0xc74>
800086c8:	18 94       	mov	r4,r12
800086ca:	40 6b       	lddsp	r11,sp[0x18]
800086cc:	58 0b       	cp.w	r11,0
800086ce:	c0 31       	brne	800086d4 <_dtoa_r+0xa28>
800086d0:	08 9c       	mov	r12,r4
800086d2:	c1 38       	rjmp	800086f8 <_dtoa_r+0xa4c>
800086d4:	68 1b       	ld.w	r11,r4[0x4]
800086d6:	0e 9c       	mov	r12,r7
800086d8:	f0 1f 00 95 	mcall	8000892c <_dtoa_r+0xc80>
800086dc:	68 4a       	ld.w	r10,r4[0x10]
800086de:	18 95       	mov	r5,r12
800086e0:	e8 cb ff f4 	sub	r11,r4,-12
800086e4:	2f ea       	sub	r10,-2
800086e6:	2f 4c       	sub	r12,-12
800086e8:	a3 6a       	lsl	r10,0x2
800086ea:	f0 1f 00 92 	mcall	80008930 <_dtoa_r+0xc84>
800086ee:	0a 9b       	mov	r11,r5
800086f0:	30 1a       	mov	r10,1
800086f2:	0e 9c       	mov	r12,r7
800086f4:	f0 1f 00 8b 	mcall	80008920 <_dtoa_r+0xc74>
800086f8:	50 44       	stdsp	sp[0x10],r4
800086fa:	40 3a       	lddsp	r10,sp[0xc]
800086fc:	30 19       	mov	r9,1
800086fe:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80008702:	18 94       	mov	r4,r12
80008704:	50 da       	stdsp	sp[0x34],r10
80008706:	40 85       	lddsp	r5,sp[0x20]
80008708:	50 99       	stdsp	sp[0x24],r9
8000870a:	50 26       	stdsp	sp[0x8],r6
8000870c:	50 e1       	stdsp	sp[0x38],r1
8000870e:	04 9b       	mov	r11,r2
80008710:	06 9c       	mov	r12,r3
80008712:	f0 1f 00 89 	mcall	80008934 <_dtoa_r+0xc88>
80008716:	40 4b       	lddsp	r11,sp[0x10]
80008718:	f8 c0 ff d0 	sub	r0,r12,-48
8000871c:	06 9c       	mov	r12,r3
8000871e:	f0 1f 00 82 	mcall	80008924 <_dtoa_r+0xc78>
80008722:	08 9a       	mov	r10,r4
80008724:	50 6c       	stdsp	sp[0x18],r12
80008726:	04 9b       	mov	r11,r2
80008728:	0e 9c       	mov	r12,r7
8000872a:	f0 1f 00 84 	mcall	80008938 <_dtoa_r+0xc8c>
8000872e:	18 91       	mov	r1,r12
80008730:	78 38       	ld.w	r8,r12[0xc]
80008732:	58 08       	cp.w	r8,0
80008734:	c0 30       	breq	8000873a <_dtoa_r+0xa8e>
80008736:	30 16       	mov	r6,1
80008738:	c0 68       	rjmp	80008744 <_dtoa_r+0xa98>
8000873a:	18 9b       	mov	r11,r12
8000873c:	06 9c       	mov	r12,r3
8000873e:	f0 1f 00 7a 	mcall	80008924 <_dtoa_r+0xc78>
80008742:	18 96       	mov	r6,r12
80008744:	0e 9c       	mov	r12,r7
80008746:	02 9b       	mov	r11,r1
80008748:	f0 1f 00 74 	mcall	80008918 <_dtoa_r+0xc6c>
8000874c:	40 cc       	lddsp	r12,sp[0x30]
8000874e:	ed ec 10 08 	or	r8,r6,r12
80008752:	c0 d1       	brne	8000876c <_dtoa_r+0xac0>
80008754:	40 db       	lddsp	r11,sp[0x34]
80008756:	58 0b       	cp.w	r11,0
80008758:	c0 a1       	brne	8000876c <_dtoa_r+0xac0>
8000875a:	40 26       	lddsp	r6,sp[0x8]
8000875c:	e0 40 00 39 	cp.w	r0,57
80008760:	c3 00       	breq	800087c0 <_dtoa_r+0xb14>
80008762:	40 6a       	lddsp	r10,sp[0x18]
80008764:	58 0a       	cp.w	r10,0
80008766:	e0 89 00 24 	brgt	800087ae <_dtoa_r+0xb02>
8000876a:	c2 f8       	rjmp	800087c8 <_dtoa_r+0xb1c>
8000876c:	40 69       	lddsp	r9,sp[0x18]
8000876e:	58 09       	cp.w	r9,0
80008770:	c0 85       	brlt	80008780 <_dtoa_r+0xad4>
80008772:	12 98       	mov	r8,r9
80008774:	40 cc       	lddsp	r12,sp[0x30]
80008776:	18 48       	or	r8,r12
80008778:	c1 d1       	brne	800087b2 <_dtoa_r+0xb06>
8000877a:	40 db       	lddsp	r11,sp[0x34]
8000877c:	58 0b       	cp.w	r11,0
8000877e:	c1 a1       	brne	800087b2 <_dtoa_r+0xb06>
80008780:	0c 99       	mov	r9,r6
80008782:	40 26       	lddsp	r6,sp[0x8]
80008784:	58 09       	cp.w	r9,0
80008786:	e0 8a 00 21 	brle	800087c8 <_dtoa_r+0xb1c>
8000878a:	06 9b       	mov	r11,r3
8000878c:	30 1a       	mov	r10,1
8000878e:	0e 9c       	mov	r12,r7
80008790:	f0 1f 00 64 	mcall	80008920 <_dtoa_r+0xc74>
80008794:	04 9b       	mov	r11,r2
80008796:	18 93       	mov	r3,r12
80008798:	f0 1f 00 63 	mcall	80008924 <_dtoa_r+0xc78>
8000879c:	e0 89 00 06 	brgt	800087a8 <_dtoa_r+0xafc>
800087a0:	c1 41       	brne	800087c8 <_dtoa_r+0xb1c>
800087a2:	ed b0 00 00 	bld	r0,0x0
800087a6:	c1 11       	brne	800087c8 <_dtoa_r+0xb1c>
800087a8:	e0 40 00 39 	cp.w	r0,57
800087ac:	c0 a0       	breq	800087c0 <_dtoa_r+0xb14>
800087ae:	2f f0       	sub	r0,-1
800087b0:	c0 c8       	rjmp	800087c8 <_dtoa_r+0xb1c>
800087b2:	58 06       	cp.w	r6,0
800087b4:	e0 8a 00 0c 	brle	800087cc <_dtoa_r+0xb20>
800087b8:	40 26       	lddsp	r6,sp[0x8]
800087ba:	e0 40 00 39 	cp.w	r0,57
800087be:	c0 41       	brne	800087c6 <_dtoa_r+0xb1a>
800087c0:	33 98       	mov	r8,57
800087c2:	0a c8       	st.b	r5++,r8
800087c4:	c6 78       	rjmp	80008892 <_dtoa_r+0xbe6>
800087c6:	2f f0       	sub	r0,-1
800087c8:	0a c0       	st.b	r5++,r0
800087ca:	c7 58       	rjmp	800088b4 <_dtoa_r+0xc08>
800087cc:	0a c0       	st.b	r5++,r0
800087ce:	40 9a       	lddsp	r10,sp[0x24]
800087d0:	40 e9       	lddsp	r9,sp[0x38]
800087d2:	12 3a       	cp.w	r10,r9
800087d4:	c4 30       	breq	8000885a <_dtoa_r+0xbae>
800087d6:	06 9b       	mov	r11,r3
800087d8:	30 09       	mov	r9,0
800087da:	30 aa       	mov	r10,10
800087dc:	0e 9c       	mov	r12,r7
800087de:	f0 1f 00 53 	mcall	80008928 <_dtoa_r+0xc7c>
800087e2:	40 48       	lddsp	r8,sp[0x10]
800087e4:	18 93       	mov	r3,r12
800087e6:	08 38       	cp.w	r8,r4
800087e8:	c0 91       	brne	800087fa <_dtoa_r+0xb4e>
800087ea:	10 9b       	mov	r11,r8
800087ec:	30 09       	mov	r9,0
800087ee:	30 aa       	mov	r10,10
800087f0:	0e 9c       	mov	r12,r7
800087f2:	f0 1f 00 4e 	mcall	80008928 <_dtoa_r+0xc7c>
800087f6:	50 4c       	stdsp	sp[0x10],r12
800087f8:	c0 e8       	rjmp	80008814 <_dtoa_r+0xb68>
800087fa:	40 4b       	lddsp	r11,sp[0x10]
800087fc:	30 09       	mov	r9,0
800087fe:	30 aa       	mov	r10,10
80008800:	0e 9c       	mov	r12,r7
80008802:	f0 1f 00 4a 	mcall	80008928 <_dtoa_r+0xc7c>
80008806:	08 9b       	mov	r11,r4
80008808:	50 4c       	stdsp	sp[0x10],r12
8000880a:	30 09       	mov	r9,0
8000880c:	30 aa       	mov	r10,10
8000880e:	0e 9c       	mov	r12,r7
80008810:	f0 1f 00 46 	mcall	80008928 <_dtoa_r+0xc7c>
80008814:	18 94       	mov	r4,r12
80008816:	40 9c       	lddsp	r12,sp[0x24]
80008818:	2f fc       	sub	r12,-1
8000881a:	50 9c       	stdsp	sp[0x24],r12
8000881c:	c7 9b       	rjmp	8000870e <_dtoa_r+0xa62>
8000881e:	30 18       	mov	r8,1
80008820:	06 90       	mov	r0,r3
80008822:	40 85       	lddsp	r5,sp[0x20]
80008824:	08 93       	mov	r3,r4
80008826:	0c 94       	mov	r4,r6
80008828:	10 96       	mov	r6,r8
8000882a:	04 9b       	mov	r11,r2
8000882c:	00 9c       	mov	r12,r0
8000882e:	f0 1f 00 42 	mcall	80008934 <_dtoa_r+0xc88>
80008832:	2d 0c       	sub	r12,-48
80008834:	0a cc       	st.b	r5++,r12
80008836:	02 36       	cp.w	r6,r1
80008838:	c0 a4       	brge	8000884c <_dtoa_r+0xba0>
8000883a:	00 9b       	mov	r11,r0
8000883c:	30 09       	mov	r9,0
8000883e:	30 aa       	mov	r10,10
80008840:	0e 9c       	mov	r12,r7
80008842:	2f f6       	sub	r6,-1
80008844:	f0 1f 00 39 	mcall	80008928 <_dtoa_r+0xc7c>
80008848:	18 90       	mov	r0,r12
8000884a:	cf 0b       	rjmp	8000882a <_dtoa_r+0xb7e>
8000884c:	08 96       	mov	r6,r4
8000884e:	30 0b       	mov	r11,0
80008850:	06 94       	mov	r4,r3
80008852:	50 4b       	stdsp	sp[0x10],r11
80008854:	00 93       	mov	r3,r0
80008856:	18 90       	mov	r0,r12
80008858:	c0 28       	rjmp	8000885c <_dtoa_r+0xbb0>
8000885a:	40 26       	lddsp	r6,sp[0x8]
8000885c:	06 9b       	mov	r11,r3
8000885e:	30 1a       	mov	r10,1
80008860:	0e 9c       	mov	r12,r7
80008862:	f0 1f 00 30 	mcall	80008920 <_dtoa_r+0xc74>
80008866:	04 9b       	mov	r11,r2
80008868:	18 93       	mov	r3,r12
8000886a:	f0 1f 00 2f 	mcall	80008924 <_dtoa_r+0xc78>
8000886e:	e0 89 00 12 	brgt	80008892 <_dtoa_r+0xbe6>
80008872:	c1 b1       	brne	800088a8 <_dtoa_r+0xbfc>
80008874:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80008878:	c0 d1       	brne	80008892 <_dtoa_r+0xbe6>
8000887a:	c1 78       	rjmp	800088a8 <_dtoa_r+0xbfc>
8000887c:	40 89       	lddsp	r9,sp[0x20]
8000887e:	12 38       	cp.w	r8,r9
80008880:	c0 30       	breq	80008886 <_dtoa_r+0xbda>
80008882:	10 95       	mov	r5,r8
80008884:	c0 88       	rjmp	80008894 <_dtoa_r+0xbe8>
80008886:	2f f6       	sub	r6,-1
80008888:	50 66       	stdsp	sp[0x18],r6
8000888a:	33 18       	mov	r8,49
8000888c:	40 8c       	lddsp	r12,sp[0x20]
8000888e:	b8 88       	st.b	r12[0x0],r8
80008890:	c1 38       	rjmp	800088b6 <_dtoa_r+0xc0a>
80008892:	33 9a       	mov	r10,57
80008894:	0a 98       	mov	r8,r5
80008896:	11 79       	ld.ub	r9,--r8
80008898:	f4 09 18 00 	cp.b	r9,r10
8000889c:	cf 00       	breq	8000887c <_dtoa_r+0xbd0>
8000889e:	2f f9       	sub	r9,-1
800088a0:	b0 89       	st.b	r8[0x0],r9
800088a2:	c0 98       	rjmp	800088b4 <_dtoa_r+0xc08>
800088a4:	10 95       	mov	r5,r8
800088a6:	c0 28       	rjmp	800088aa <_dtoa_r+0xbfe>
800088a8:	33 09       	mov	r9,48
800088aa:	0a 98       	mov	r8,r5
800088ac:	11 7a       	ld.ub	r10,--r8
800088ae:	f2 0a 18 00 	cp.b	r10,r9
800088b2:	cf 90       	breq	800088a4 <_dtoa_r+0xbf8>
800088b4:	50 66       	stdsp	sp[0x18],r6
800088b6:	04 9b       	mov	r11,r2
800088b8:	0e 9c       	mov	r12,r7
800088ba:	f0 1f 00 18 	mcall	80008918 <_dtoa_r+0xc6c>
800088be:	58 04       	cp.w	r4,0
800088c0:	c1 20       	breq	800088e4 <_dtoa_r+0xc38>
800088c2:	40 4b       	lddsp	r11,sp[0x10]
800088c4:	08 3b       	cp.w	r11,r4
800088c6:	5f 19       	srne	r9
800088c8:	58 0b       	cp.w	r11,0
800088ca:	5f 18       	srne	r8
800088cc:	f3 e8 00 08 	and	r8,r9,r8
800088d0:	c0 40       	breq	800088d8 <_dtoa_r+0xc2c>
800088d2:	0e 9c       	mov	r12,r7
800088d4:	f0 1f 00 11 	mcall	80008918 <_dtoa_r+0xc6c>
800088d8:	08 9b       	mov	r11,r4
800088da:	0e 9c       	mov	r12,r7
800088dc:	f0 1f 00 0f 	mcall	80008918 <_dtoa_r+0xc6c>
800088e0:	c0 28       	rjmp	800088e4 <_dtoa_r+0xc38>
800088e2:	50 66       	stdsp	sp[0x18],r6
800088e4:	0e 9c       	mov	r12,r7
800088e6:	06 9b       	mov	r11,r3
800088e8:	f0 1f 00 0c 	mcall	80008918 <_dtoa_r+0xc6c>
800088ec:	30 08       	mov	r8,0
800088ee:	aa 88       	st.b	r5[0x0],r8
800088f0:	40 68       	lddsp	r8,sp[0x18]
800088f2:	41 5a       	lddsp	r10,sp[0x54]
800088f4:	2f f8       	sub	r8,-1
800088f6:	41 29       	lddsp	r9,sp[0x48]
800088f8:	95 08       	st.w	r10[0x0],r8
800088fa:	40 8c       	lddsp	r12,sp[0x20]
800088fc:	58 09       	cp.w	r9,0
800088fe:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80008902:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80008906:	2e 6d       	sub	sp,-104
80008908:	d8 32       	popm	r0-r7,pc
8000890a:	00 00       	add	r0,r0
8000890c:	80 00       	ld.sh	r0,r0[0x0]
8000890e:	97 54       	st.w	r11[0x14],r4
80008910:	80 00       	ld.sh	r0,r0[0x0]
80008912:	97 f4       	st.w	r11[0x3c],r4
80008914:	80 00       	ld.sh	r0,r0[0x0]
80008916:	96 4c       	ld.sh	r12,r11[0x8]
80008918:	80 00       	ld.sh	r0,r0[0x0]
8000891a:	93 7c       	st.w	r9[0x1c],r12
8000891c:	80 00       	ld.sh	r0,r0[0x0]
8000891e:	92 5c       	ld.sh	r12,r9[0xa]
80008920:	80 00       	ld.sh	r0,r0[0x0]
80008922:	95 b8       	st.w	r10[0x2c],r8
80008924:	80 00       	ld.sh	r0,r0[0x0]
80008926:	93 4a       	st.w	r9[0x10],r10
80008928:	80 00       	ld.sh	r0,r0[0x0]
8000892a:	97 6c       	st.w	r11[0x18],r12
8000892c:	80 00       	ld.sh	r0,r0[0x0]
8000892e:	93 b4       	st.w	r9[0x2c],r4
80008930:	80 00       	ld.sh	r0,r0[0x0]
80008932:	4f 48       	lddpc	r8,80008b00 <__sfp+0x58>
80008934:	80 00       	ld.sh	r0,r0[0x0]
80008936:	7b 88       	ld.w	r8,sp[0x60]
80008938:	80 00       	ld.sh	r0,r0[0x0]
8000893a:	94 e0       	ld.uh	r0,r10[0xc]

8000893c <__errno>:
8000893c:	48 28       	lddpc	r8,80008944 <__errno+0x8>
8000893e:	70 0c       	ld.w	r12,r8[0x0]
80008940:	2f 4c       	sub	r12,-12
80008942:	5e fc       	retal	r12
80008944:	00 00       	add	r0,r0
80008946:	01 ec       	ld.ub	r12,r0[0x6]

80008948 <_fflush_r>:
80008948:	d4 21       	pushm	r4-r7,lr
8000894a:	16 97       	mov	r7,r11
8000894c:	18 96       	mov	r6,r12
8000894e:	76 48       	ld.w	r8,r11[0x10]
80008950:	58 08       	cp.w	r8,0
80008952:	c7 d0       	breq	80008a4c <_fflush_r+0x104>
80008954:	58 0c       	cp.w	r12,0
80008956:	c0 60       	breq	80008962 <_fflush_r+0x1a>
80008958:	78 68       	ld.w	r8,r12[0x18]
8000895a:	58 08       	cp.w	r8,0
8000895c:	c0 31       	brne	80008962 <_fflush_r+0x1a>
8000895e:	f0 1f 00 3d 	mcall	80008a50 <_fflush_r+0x108>
80008962:	4b d8       	lddpc	r8,80008a54 <_fflush_r+0x10c>
80008964:	10 37       	cp.w	r7,r8
80008966:	c0 31       	brne	8000896c <_fflush_r+0x24>
80008968:	6c 07       	ld.w	r7,r6[0x0]
8000896a:	c0 a8       	rjmp	8000897e <_fflush_r+0x36>
8000896c:	4b b8       	lddpc	r8,80008a58 <_fflush_r+0x110>
8000896e:	10 37       	cp.w	r7,r8
80008970:	c0 31       	brne	80008976 <_fflush_r+0x2e>
80008972:	6c 17       	ld.w	r7,r6[0x4]
80008974:	c0 58       	rjmp	8000897e <_fflush_r+0x36>
80008976:	4b a8       	lddpc	r8,80008a5c <_fflush_r+0x114>
80008978:	10 37       	cp.w	r7,r8
8000897a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000897e:	8e 6a       	ld.sh	r10,r7[0xc]
80008980:	14 98       	mov	r8,r10
80008982:	ed ba 00 03 	bld	r10,0x3
80008986:	c4 20       	breq	80008a0a <_fflush_r+0xc2>
80008988:	ab ba       	sbr	r10,0xb
8000898a:	ae 6a       	st.h	r7[0xc],r10
8000898c:	6e 18       	ld.w	r8,r7[0x4]
8000898e:	58 08       	cp.w	r8,0
80008990:	e0 89 00 06 	brgt	8000899c <_fflush_r+0x54>
80008994:	6f 08       	ld.w	r8,r7[0x40]
80008996:	58 08       	cp.w	r8,0
80008998:	e0 8a 00 5a 	brle	80008a4c <_fflush_r+0x104>
8000899c:	6e b8       	ld.w	r8,r7[0x2c]
8000899e:	58 08       	cp.w	r8,0
800089a0:	c5 60       	breq	80008a4c <_fflush_r+0x104>
800089a2:	e2 1a 10 00 	andl	r10,0x1000,COH
800089a6:	c0 30       	breq	800089ac <_fflush_r+0x64>
800089a8:	6f 55       	ld.w	r5,r7[0x54]
800089aa:	c0 f8       	rjmp	800089c8 <_fflush_r+0x80>
800089ac:	30 19       	mov	r9,1
800089ae:	6e 8b       	ld.w	r11,r7[0x20]
800089b0:	0c 9c       	mov	r12,r6
800089b2:	5d 18       	icall	r8
800089b4:	18 95       	mov	r5,r12
800089b6:	5b fc       	cp.w	r12,-1
800089b8:	c0 81       	brne	800089c8 <_fflush_r+0x80>
800089ba:	6c 38       	ld.w	r8,r6[0xc]
800089bc:	59 d8       	cp.w	r8,29
800089be:	c4 70       	breq	80008a4c <_fflush_r+0x104>
800089c0:	8e 68       	ld.sh	r8,r7[0xc]
800089c2:	a7 a8       	sbr	r8,0x6
800089c4:	ae 68       	st.h	r7[0xc],r8
800089c6:	d8 22       	popm	r4-r7,pc
800089c8:	8e 68       	ld.sh	r8,r7[0xc]
800089ca:	ed b8 00 02 	bld	r8,0x2
800089ce:	c0 91       	brne	800089e0 <_fflush_r+0x98>
800089d0:	6e 18       	ld.w	r8,r7[0x4]
800089d2:	10 15       	sub	r5,r8
800089d4:	6e d8       	ld.w	r8,r7[0x34]
800089d6:	58 08       	cp.w	r8,0
800089d8:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800089dc:	eb d8 e1 15 	subne	r5,r5,r8
800089e0:	6e b8       	ld.w	r8,r7[0x2c]
800089e2:	0c 9c       	mov	r12,r6
800089e4:	30 09       	mov	r9,0
800089e6:	0a 9a       	mov	r10,r5
800089e8:	6e 8b       	ld.w	r11,r7[0x20]
800089ea:	5d 18       	icall	r8
800089ec:	8e 68       	ld.sh	r8,r7[0xc]
800089ee:	0a 3c       	cp.w	r12,r5
800089f0:	c2 61       	brne	80008a3c <_fflush_r+0xf4>
800089f2:	ab d8       	cbr	r8,0xb
800089f4:	30 0c       	mov	r12,0
800089f6:	6e 49       	ld.w	r9,r7[0x10]
800089f8:	ae 68       	st.h	r7[0xc],r8
800089fa:	8f 1c       	st.w	r7[0x4],r12
800089fc:	8f 09       	st.w	r7[0x0],r9
800089fe:	ed b8 00 0c 	bld	r8,0xc
80008a02:	c2 51       	brne	80008a4c <_fflush_r+0x104>
80008a04:	ef 45 00 54 	st.w	r7[84],r5
80008a08:	d8 22       	popm	r4-r7,pc
80008a0a:	6e 45       	ld.w	r5,r7[0x10]
80008a0c:	58 05       	cp.w	r5,0
80008a0e:	c1 f0       	breq	80008a4c <_fflush_r+0x104>
80008a10:	6e 04       	ld.w	r4,r7[0x0]
80008a12:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80008a16:	8f 05       	st.w	r7[0x0],r5
80008a18:	f9 b8 01 00 	movne	r8,0
80008a1c:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80008a20:	0a 14       	sub	r4,r5
80008a22:	8f 28       	st.w	r7[0x8],r8
80008a24:	c1 18       	rjmp	80008a46 <_fflush_r+0xfe>
80008a26:	08 99       	mov	r9,r4
80008a28:	0a 9a       	mov	r10,r5
80008a2a:	6e a8       	ld.w	r8,r7[0x28]
80008a2c:	6e 8b       	ld.w	r11,r7[0x20]
80008a2e:	0c 9c       	mov	r12,r6
80008a30:	5d 18       	icall	r8
80008a32:	18 14       	sub	r4,r12
80008a34:	58 0c       	cp.w	r12,0
80008a36:	e0 89 00 07 	brgt	80008a44 <_fflush_r+0xfc>
80008a3a:	8e 68       	ld.sh	r8,r7[0xc]
80008a3c:	a7 a8       	sbr	r8,0x6
80008a3e:	3f fc       	mov	r12,-1
80008a40:	ae 68       	st.h	r7[0xc],r8
80008a42:	d8 22       	popm	r4-r7,pc
80008a44:	18 05       	add	r5,r12
80008a46:	58 04       	cp.w	r4,0
80008a48:	fe 99 ff ef 	brgt	80008a26 <_fflush_r+0xde>
80008a4c:	d8 2a       	popm	r4-r7,pc,r12=0
80008a4e:	00 00       	add	r0,r0
80008a50:	80 00       	ld.sh	r0,r0[0x0]
80008a52:	8b 24       	st.w	r5[0x8],r4
80008a54:	80 00       	ld.sh	r0,r0[0x0]
80008a56:	b1 08       	ld.d	r8,r8
80008a58:	80 00       	ld.sh	r0,r0[0x0]
80008a5a:	b1 28       	st.d	r8++,r8
80008a5c:	80 00       	ld.sh	r0,r0[0x0]
80008a5e:	b1 48       	asr	r8,0x10

80008a60 <__sfp_lock_acquire>:
80008a60:	5e fc       	retal	r12

80008a62 <__sfp_lock_release>:
80008a62:	5e fc       	retal	r12

80008a64 <_cleanup_r>:
80008a64:	d4 01       	pushm	lr
80008a66:	48 3b       	lddpc	r11,80008a70 <_cleanup_r+0xc>
80008a68:	f0 1f 00 03 	mcall	80008a74 <_cleanup_r+0x10>
80008a6c:	d8 02       	popm	pc
80008a6e:	00 00       	add	r0,r0
80008a70:	80 00       	ld.sh	r0,r0[0x0]
80008a72:	9b 18       	st.w	sp[0x4],r8
80008a74:	80 00       	ld.sh	r0,r0[0x0]
80008a76:	90 e0       	ld.uh	r0,r8[0xc]

80008a78 <__sfmoreglue>:
80008a78:	d4 21       	pushm	r4-r7,lr
80008a7a:	16 95       	mov	r5,r11
80008a7c:	f6 06 10 5c 	mul	r6,r11,92
80008a80:	ec cb ff f4 	sub	r11,r6,-12
80008a84:	f0 1f 00 07 	mcall	80008aa0 <__sfmoreglue+0x28>
80008a88:	18 97       	mov	r7,r12
80008a8a:	c0 90       	breq	80008a9c <__sfmoreglue+0x24>
80008a8c:	99 15       	st.w	r12[0x4],r5
80008a8e:	30 0b       	mov	r11,0
80008a90:	2f 4c       	sub	r12,-12
80008a92:	0c 9a       	mov	r10,r6
80008a94:	8f 2c       	st.w	r7[0x8],r12
80008a96:	8f 0b       	st.w	r7[0x0],r11
80008a98:	f0 1f 00 03 	mcall	80008aa4 <__sfmoreglue+0x2c>
80008a9c:	0e 9c       	mov	r12,r7
80008a9e:	d8 22       	popm	r4-r7,pc
80008aa0:	80 00       	ld.sh	r0,r0[0x0]
80008aa2:	4a f8       	lddpc	r8,80008b5c <__sinit+0x38>
80008aa4:	80 00       	ld.sh	r0,r0[0x0]
80008aa6:	50 90       	stdsp	sp[0x24],r0

80008aa8 <__sfp>:
80008aa8:	d4 21       	pushm	r4-r7,lr
80008aaa:	49 c8       	lddpc	r8,80008b18 <__sfp+0x70>
80008aac:	18 96       	mov	r6,r12
80008aae:	70 07       	ld.w	r7,r8[0x0]
80008ab0:	6e 68       	ld.w	r8,r7[0x18]
80008ab2:	58 08       	cp.w	r8,0
80008ab4:	c0 41       	brne	80008abc <__sfp+0x14>
80008ab6:	0e 9c       	mov	r12,r7
80008ab8:	f0 1f 00 19 	mcall	80008b1c <__sfp+0x74>
80008abc:	ee c7 ff 28 	sub	r7,r7,-216
80008ac0:	30 05       	mov	r5,0
80008ac2:	6e 2c       	ld.w	r12,r7[0x8]
80008ac4:	6e 18       	ld.w	r8,r7[0x4]
80008ac6:	c0 68       	rjmp	80008ad2 <__sfp+0x2a>
80008ac8:	98 69       	ld.sh	r9,r12[0xc]
80008aca:	ea 09 19 00 	cp.h	r9,r5
80008ace:	c1 20       	breq	80008af2 <__sfp+0x4a>
80008ad0:	2a 4c       	sub	r12,-92
80008ad2:	20 18       	sub	r8,1
80008ad4:	cf a7       	brpl	80008ac8 <__sfp+0x20>
80008ad6:	6e 08       	ld.w	r8,r7[0x0]
80008ad8:	58 08       	cp.w	r8,0
80008ada:	c0 71       	brne	80008ae8 <__sfp+0x40>
80008adc:	30 4b       	mov	r11,4
80008ade:	0c 9c       	mov	r12,r6
80008ae0:	f0 1f 00 10 	mcall	80008b20 <__sfp+0x78>
80008ae4:	8f 0c       	st.w	r7[0x0],r12
80008ae6:	c0 30       	breq	80008aec <__sfp+0x44>
80008ae8:	6e 07       	ld.w	r7,r7[0x0]
80008aea:	ce cb       	rjmp	80008ac2 <__sfp+0x1a>
80008aec:	30 c8       	mov	r8,12
80008aee:	8d 38       	st.w	r6[0xc],r8
80008af0:	d8 22       	popm	r4-r7,pc
80008af2:	30 08       	mov	r8,0
80008af4:	f9 48 00 4c 	st.w	r12[76],r8
80008af8:	99 08       	st.w	r12[0x0],r8
80008afa:	99 28       	st.w	r12[0x8],r8
80008afc:	99 18       	st.w	r12[0x4],r8
80008afe:	99 48       	st.w	r12[0x10],r8
80008b00:	99 58       	st.w	r12[0x14],r8
80008b02:	99 68       	st.w	r12[0x18],r8
80008b04:	99 d8       	st.w	r12[0x34],r8
80008b06:	99 e8       	st.w	r12[0x38],r8
80008b08:	f9 48 00 48 	st.w	r12[72],r8
80008b0c:	3f f8       	mov	r8,-1
80008b0e:	b8 78       	st.h	r12[0xe],r8
80008b10:	30 18       	mov	r8,1
80008b12:	b8 68       	st.h	r12[0xc],r8
80008b14:	d8 22       	popm	r4-r7,pc
80008b16:	00 00       	add	r0,r0
80008b18:	80 00       	ld.sh	r0,r0[0x0]
80008b1a:	ad 20       	st.d	r6++,r0
80008b1c:	80 00       	ld.sh	r0,r0[0x0]
80008b1e:	8b 24       	st.w	r5[0x8],r4
80008b20:	80 00       	ld.sh	r0,r0[0x0]
80008b22:	8a 78       	ld.sh	r8,r5[0xe]

80008b24 <__sinit>:
80008b24:	d4 21       	pushm	r4-r7,lr
80008b26:	18 96       	mov	r6,r12
80008b28:	78 67       	ld.w	r7,r12[0x18]
80008b2a:	58 07       	cp.w	r7,0
80008b2c:	c4 71       	brne	80008bba <__sinit+0x96>
80008b2e:	4a 48       	lddpc	r8,80008bbc <__sinit+0x98>
80008b30:	30 15       	mov	r5,1
80008b32:	99 a8       	st.w	r12[0x28],r8
80008b34:	f9 47 00 d8 	st.w	r12[216],r7
80008b38:	f9 47 00 dc 	st.w	r12[220],r7
80008b3c:	f9 47 00 e0 	st.w	r12[224],r7
80008b40:	99 65       	st.w	r12[0x18],r5
80008b42:	f0 1f 00 20 	mcall	80008bc0 <__sinit+0x9c>
80008b46:	8d 0c       	st.w	r6[0x0],r12
80008b48:	0c 9c       	mov	r12,r6
80008b4a:	f0 1f 00 1e 	mcall	80008bc0 <__sinit+0x9c>
80008b4e:	8d 1c       	st.w	r6[0x4],r12
80008b50:	0c 9c       	mov	r12,r6
80008b52:	f0 1f 00 1c 	mcall	80008bc0 <__sinit+0x9c>
80008b56:	6c 09       	ld.w	r9,r6[0x0]
80008b58:	30 48       	mov	r8,4
80008b5a:	93 07       	st.w	r9[0x0],r7
80008b5c:	b2 68       	st.h	r9[0xc],r8
80008b5e:	93 17       	st.w	r9[0x4],r7
80008b60:	93 27       	st.w	r9[0x8],r7
80008b62:	6c 18       	ld.w	r8,r6[0x4]
80008b64:	b2 77       	st.h	r9[0xe],r7
80008b66:	93 47       	st.w	r9[0x10],r7
80008b68:	93 57       	st.w	r9[0x14],r7
80008b6a:	93 67       	st.w	r9[0x18],r7
80008b6c:	93 89       	st.w	r9[0x20],r9
80008b6e:	91 07       	st.w	r8[0x0],r7
80008b70:	91 17       	st.w	r8[0x4],r7
80008b72:	91 27       	st.w	r8[0x8],r7
80008b74:	49 4e       	lddpc	lr,80008bc4 <__sinit+0xa0>
80008b76:	49 5b       	lddpc	r11,80008bc8 <__sinit+0xa4>
80008b78:	93 9e       	st.w	r9[0x24],lr
80008b7a:	93 ab       	st.w	r9[0x28],r11
80008b7c:	49 4a       	lddpc	r10,80008bcc <__sinit+0xa8>
80008b7e:	49 54       	lddpc	r4,80008bd0 <__sinit+0xac>
80008b80:	93 ba       	st.w	r9[0x2c],r10
80008b82:	93 c4       	st.w	r9[0x30],r4
80008b84:	30 99       	mov	r9,9
80008b86:	b0 69       	st.h	r8[0xc],r9
80008b88:	b0 75       	st.h	r8[0xe],r5
80008b8a:	91 c4       	st.w	r8[0x30],r4
80008b8c:	91 47       	st.w	r8[0x10],r7
80008b8e:	91 57       	st.w	r8[0x14],r7
80008b90:	91 67       	st.w	r8[0x18],r7
80008b92:	91 88       	st.w	r8[0x20],r8
80008b94:	91 9e       	st.w	r8[0x24],lr
80008b96:	91 ab       	st.w	r8[0x28],r11
80008b98:	91 ba       	st.w	r8[0x2c],r10
80008b9a:	8d 2c       	st.w	r6[0x8],r12
80008b9c:	31 28       	mov	r8,18
80008b9e:	99 07       	st.w	r12[0x0],r7
80008ba0:	b8 68       	st.h	r12[0xc],r8
80008ba2:	99 17       	st.w	r12[0x4],r7
80008ba4:	99 27       	st.w	r12[0x8],r7
80008ba6:	30 28       	mov	r8,2
80008ba8:	b8 78       	st.h	r12[0xe],r8
80008baa:	99 c4       	st.w	r12[0x30],r4
80008bac:	99 67       	st.w	r12[0x18],r7
80008bae:	99 9e       	st.w	r12[0x24],lr
80008bb0:	99 ab       	st.w	r12[0x28],r11
80008bb2:	99 ba       	st.w	r12[0x2c],r10
80008bb4:	99 47       	st.w	r12[0x10],r7
80008bb6:	99 57       	st.w	r12[0x14],r7
80008bb8:	99 8c       	st.w	r12[0x20],r12
80008bba:	d8 22       	popm	r4-r7,pc
80008bbc:	80 00       	ld.sh	r0,r0[0x0]
80008bbe:	8a 64       	ld.sh	r4,r5[0xc]
80008bc0:	80 00       	ld.sh	r0,r0[0x0]
80008bc2:	8a a8       	ld.uh	r8,r5[0x4]
80008bc4:	80 00       	ld.sh	r0,r0[0x0]
80008bc6:	99 58       	st.w	r12[0x14],r8
80008bc8:	80 00       	ld.sh	r0,r0[0x0]
80008bca:	99 20       	st.w	r12[0x8],r0
80008bcc:	80 00       	ld.sh	r0,r0[0x0]
80008bce:	98 f8       	ld.uh	r8,r12[0xe]
80008bd0:	80 00       	ld.sh	r0,r0[0x0]
80008bd2:	98 e8       	ld.uh	r8,r12[0xc]

80008bd4 <_malloc_trim_r>:
80008bd4:	d4 21       	pushm	r4-r7,lr
80008bd6:	16 95       	mov	r5,r11
80008bd8:	18 97       	mov	r7,r12
80008bda:	f0 1f 00 23 	mcall	80008c64 <_malloc_trim_r+0x90>
80008bde:	4a 34       	lddpc	r4,80008c68 <_malloc_trim_r+0x94>
80008be0:	68 28       	ld.w	r8,r4[0x8]
80008be2:	70 16       	ld.w	r6,r8[0x4]
80008be4:	e0 16 ff fc 	andl	r6,0xfffc
80008be8:	ec c8 ff 91 	sub	r8,r6,-111
80008bec:	f0 05 01 05 	sub	r5,r8,r5
80008bf0:	e0 15 ff 80 	andl	r5,0xff80
80008bf4:	ea c5 00 80 	sub	r5,r5,128
80008bf8:	e0 45 00 7f 	cp.w	r5,127
80008bfc:	e0 8a 00 23 	brle	80008c42 <_malloc_trim_r+0x6e>
80008c00:	30 0b       	mov	r11,0
80008c02:	0e 9c       	mov	r12,r7
80008c04:	f0 1f 00 1a 	mcall	80008c6c <_malloc_trim_r+0x98>
80008c08:	68 28       	ld.w	r8,r4[0x8]
80008c0a:	0c 08       	add	r8,r6
80008c0c:	10 3c       	cp.w	r12,r8
80008c0e:	c1 a1       	brne	80008c42 <_malloc_trim_r+0x6e>
80008c10:	ea 0b 11 00 	rsub	r11,r5,0
80008c14:	0e 9c       	mov	r12,r7
80008c16:	f0 1f 00 16 	mcall	80008c6c <_malloc_trim_r+0x98>
80008c1a:	5b fc       	cp.w	r12,-1
80008c1c:	c1 71       	brne	80008c4a <_malloc_trim_r+0x76>
80008c1e:	30 0b       	mov	r11,0
80008c20:	0e 9c       	mov	r12,r7
80008c22:	f0 1f 00 13 	mcall	80008c6c <_malloc_trim_r+0x98>
80008c26:	68 28       	ld.w	r8,r4[0x8]
80008c28:	f8 08 01 09 	sub	r9,r12,r8
80008c2c:	58 f9       	cp.w	r9,15
80008c2e:	e0 8a 00 0a 	brle	80008c42 <_malloc_trim_r+0x6e>
80008c32:	a1 a9       	sbr	r9,0x0
80008c34:	91 19       	st.w	r8[0x4],r9
80008c36:	48 f8       	lddpc	r8,80008c70 <_malloc_trim_r+0x9c>
80008c38:	70 09       	ld.w	r9,r8[0x0]
80008c3a:	48 f8       	lddpc	r8,80008c74 <_malloc_trim_r+0xa0>
80008c3c:	f8 09 01 09 	sub	r9,r12,r9
80008c40:	91 09       	st.w	r8[0x0],r9
80008c42:	0e 9c       	mov	r12,r7
80008c44:	f0 1f 00 0d 	mcall	80008c78 <_malloc_trim_r+0xa4>
80008c48:	d8 2a       	popm	r4-r7,pc,r12=0
80008c4a:	68 28       	ld.w	r8,r4[0x8]
80008c4c:	0a 16       	sub	r6,r5
80008c4e:	a1 a6       	sbr	r6,0x0
80008c50:	91 16       	st.w	r8[0x4],r6
80008c52:	48 98       	lddpc	r8,80008c74 <_malloc_trim_r+0xa0>
80008c54:	70 09       	ld.w	r9,r8[0x0]
80008c56:	0a 19       	sub	r9,r5
80008c58:	0e 9c       	mov	r12,r7
80008c5a:	91 09       	st.w	r8[0x0],r9
80008c5c:	f0 1f 00 07 	mcall	80008c78 <_malloc_trim_r+0xa4>
80008c60:	da 2a       	popm	r4-r7,pc,r12=1
80008c62:	00 00       	add	r0,r0
80008c64:	80 00       	ld.sh	r0,r0[0x0]
80008c66:	42 d8       	lddsp	r8,sp[0xb4]
80008c68:	00 00       	add	r0,r0
80008c6a:	01 f0       	ld.ub	r0,r0[0x7]
80008c6c:	80 00       	ld.sh	r0,r0[0x0]
80008c6e:	53 b8       	stdsp	sp[0xec],r8
80008c70:	00 00       	add	r0,r0
80008c72:	05 fc       	ld.ub	r12,r2[0x7]
80008c74:	00 00       	add	r0,r0
80008c76:	09 d4       	ld.ub	r4,r4[0x5]
80008c78:	80 00       	ld.sh	r0,r0[0x0]
80008c7a:	42 e4       	lddsp	r4,sp[0xb8]

80008c7c <_free_r>:
80008c7c:	d4 21       	pushm	r4-r7,lr
80008c7e:	16 96       	mov	r6,r11
80008c80:	18 97       	mov	r7,r12
80008c82:	58 0b       	cp.w	r11,0
80008c84:	e0 80 00 c8 	breq	80008e14 <_free_r+0x198>
80008c88:	f0 1f 00 4c 	mcall	80008db8 <_free_r+0x13c>
80008c8c:	20 86       	sub	r6,8
80008c8e:	4c ca       	lddpc	r10,80008dbc <_free_r+0x140>
80008c90:	6c 18       	ld.w	r8,r6[0x4]
80008c92:	74 2e       	ld.w	lr,r10[0x8]
80008c94:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80008c98:	a1 c8       	cbr	r8,0x0
80008c9a:	ec 08 00 09 	add	r9,r6,r8
80008c9e:	72 1b       	ld.w	r11,r9[0x4]
80008ca0:	e0 1b ff fc 	andl	r11,0xfffc
80008ca4:	1c 39       	cp.w	r9,lr
80008ca6:	c1 d1       	brne	80008ce0 <_free_r+0x64>
80008ca8:	f6 08 00 08 	add	r8,r11,r8
80008cac:	58 0c       	cp.w	r12,0
80008cae:	c0 81       	brne	80008cbe <_free_r+0x42>
80008cb0:	6c 09       	ld.w	r9,r6[0x0]
80008cb2:	12 16       	sub	r6,r9
80008cb4:	12 08       	add	r8,r9
80008cb6:	6c 3b       	ld.w	r11,r6[0xc]
80008cb8:	6c 29       	ld.w	r9,r6[0x8]
80008cba:	97 29       	st.w	r11[0x8],r9
80008cbc:	93 3b       	st.w	r9[0xc],r11
80008cbe:	10 99       	mov	r9,r8
80008cc0:	95 26       	st.w	r10[0x8],r6
80008cc2:	a1 a9       	sbr	r9,0x0
80008cc4:	8d 19       	st.w	r6[0x4],r9
80008cc6:	4b f9       	lddpc	r9,80008dc0 <_free_r+0x144>
80008cc8:	72 09       	ld.w	r9,r9[0x0]
80008cca:	12 38       	cp.w	r8,r9
80008ccc:	c0 63       	brcs	80008cd8 <_free_r+0x5c>
80008cce:	4b e8       	lddpc	r8,80008dc4 <_free_r+0x148>
80008cd0:	0e 9c       	mov	r12,r7
80008cd2:	70 0b       	ld.w	r11,r8[0x0]
80008cd4:	f0 1f 00 3d 	mcall	80008dc8 <_free_r+0x14c>
80008cd8:	0e 9c       	mov	r12,r7
80008cda:	f0 1f 00 3d 	mcall	80008dcc <_free_r+0x150>
80008cde:	d8 22       	popm	r4-r7,pc
80008ce0:	93 1b       	st.w	r9[0x4],r11
80008ce2:	58 0c       	cp.w	r12,0
80008ce4:	c0 30       	breq	80008cea <_free_r+0x6e>
80008ce6:	30 0c       	mov	r12,0
80008ce8:	c1 08       	rjmp	80008d08 <_free_r+0x8c>
80008cea:	6c 0e       	ld.w	lr,r6[0x0]
80008cec:	f4 c5 ff f8 	sub	r5,r10,-8
80008cf0:	1c 16       	sub	r6,lr
80008cf2:	1c 08       	add	r8,lr
80008cf4:	6c 2e       	ld.w	lr,r6[0x8]
80008cf6:	0a 3e       	cp.w	lr,r5
80008cf8:	f9 bc 00 01 	moveq	r12,1
80008cfc:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80008d00:	eb fe 1a 02 	st.wne	r5[0x8],lr
80008d04:	fd f5 1a 03 	st.wne	lr[0xc],r5
80008d08:	f2 0b 00 0e 	add	lr,r9,r11
80008d0c:	7c 1e       	ld.w	lr,lr[0x4]
80008d0e:	ed be 00 00 	bld	lr,0x0
80008d12:	c1 30       	breq	80008d38 <_free_r+0xbc>
80008d14:	16 08       	add	r8,r11
80008d16:	58 0c       	cp.w	r12,0
80008d18:	c0 c1       	brne	80008d30 <_free_r+0xb4>
80008d1a:	4a 9e       	lddpc	lr,80008dbc <_free_r+0x140>
80008d1c:	72 2b       	ld.w	r11,r9[0x8]
80008d1e:	2f 8e       	sub	lr,-8
80008d20:	1c 3b       	cp.w	r11,lr
80008d22:	c0 71       	brne	80008d30 <_free_r+0xb4>
80008d24:	97 36       	st.w	r11[0xc],r6
80008d26:	97 26       	st.w	r11[0x8],r6
80008d28:	8d 2b       	st.w	r6[0x8],r11
80008d2a:	8d 3b       	st.w	r6[0xc],r11
80008d2c:	30 1c       	mov	r12,1
80008d2e:	c0 58       	rjmp	80008d38 <_free_r+0xbc>
80008d30:	72 2b       	ld.w	r11,r9[0x8]
80008d32:	72 39       	ld.w	r9,r9[0xc]
80008d34:	93 2b       	st.w	r9[0x8],r11
80008d36:	97 39       	st.w	r11[0xc],r9
80008d38:	10 99       	mov	r9,r8
80008d3a:	ec 08 09 08 	st.w	r6[r8],r8
80008d3e:	a1 a9       	sbr	r9,0x0
80008d40:	8d 19       	st.w	r6[0x4],r9
80008d42:	58 0c       	cp.w	r12,0
80008d44:	c6 51       	brne	80008e0e <_free_r+0x192>
80008d46:	e0 48 01 ff 	cp.w	r8,511
80008d4a:	e0 8b 00 13 	brhi	80008d70 <_free_r+0xf4>
80008d4e:	a3 98       	lsr	r8,0x3
80008d50:	f4 08 00 39 	add	r9,r10,r8<<0x3
80008d54:	72 2b       	ld.w	r11,r9[0x8]
80008d56:	8d 39       	st.w	r6[0xc],r9
80008d58:	8d 2b       	st.w	r6[0x8],r11
80008d5a:	97 36       	st.w	r11[0xc],r6
80008d5c:	93 26       	st.w	r9[0x8],r6
80008d5e:	a3 48       	asr	r8,0x2
80008d60:	74 19       	ld.w	r9,r10[0x4]
80008d62:	30 1b       	mov	r11,1
80008d64:	f6 08 09 48 	lsl	r8,r11,r8
80008d68:	f3 e8 10 08 	or	r8,r9,r8
80008d6c:	95 18       	st.w	r10[0x4],r8
80008d6e:	c5 08       	rjmp	80008e0e <_free_r+0x192>
80008d70:	f0 0b 16 09 	lsr	r11,r8,0x9
80008d74:	58 4b       	cp.w	r11,4
80008d76:	e0 8b 00 06 	brhi	80008d82 <_free_r+0x106>
80008d7a:	f0 0b 16 06 	lsr	r11,r8,0x6
80008d7e:	2c 8b       	sub	r11,-56
80008d80:	c2 b8       	rjmp	80008dd6 <_free_r+0x15a>
80008d82:	59 4b       	cp.w	r11,20
80008d84:	e0 8b 00 04 	brhi	80008d8c <_free_r+0x110>
80008d88:	2a 5b       	sub	r11,-91
80008d8a:	c2 68       	rjmp	80008dd6 <_free_r+0x15a>
80008d8c:	e0 4b 00 54 	cp.w	r11,84
80008d90:	e0 8b 00 06 	brhi	80008d9c <_free_r+0x120>
80008d94:	f0 0b 16 0c 	lsr	r11,r8,0xc
80008d98:	29 2b       	sub	r11,-110
80008d9a:	c1 e8       	rjmp	80008dd6 <_free_r+0x15a>
80008d9c:	e0 4b 01 54 	cp.w	r11,340
80008da0:	e0 8b 00 06 	brhi	80008dac <_free_r+0x130>
80008da4:	f0 0b 16 0f 	lsr	r11,r8,0xf
80008da8:	28 9b       	sub	r11,-119
80008daa:	c1 68       	rjmp	80008dd6 <_free_r+0x15a>
80008dac:	e0 4b 05 54 	cp.w	r11,1364
80008db0:	e0 88 00 10 	brls	80008dd0 <_free_r+0x154>
80008db4:	37 eb       	mov	r11,126
80008db6:	c1 08       	rjmp	80008dd6 <_free_r+0x15a>
80008db8:	80 00       	ld.sh	r0,r0[0x0]
80008dba:	42 d8       	lddsp	r8,sp[0xb4]
80008dbc:	00 00       	add	r0,r0
80008dbe:	01 f0       	ld.ub	r0,r0[0x7]
80008dc0:	00 00       	add	r0,r0
80008dc2:	05 f8       	ld.ub	r8,r2[0x7]
80008dc4:	00 00       	add	r0,r0
80008dc6:	09 d0       	ld.ub	r0,r4[0x5]
80008dc8:	80 00       	ld.sh	r0,r0[0x0]
80008dca:	8b d4       	st.w	r5[0x34],r4
80008dcc:	80 00       	ld.sh	r0,r0[0x0]
80008dce:	42 e4       	lddsp	r4,sp[0xb8]
80008dd0:	f0 0b 16 12 	lsr	r11,r8,0x12
80008dd4:	28 4b       	sub	r11,-124
80008dd6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80008dda:	78 29       	ld.w	r9,r12[0x8]
80008ddc:	18 39       	cp.w	r9,r12
80008dde:	c0 e1       	brne	80008dfa <_free_r+0x17e>
80008de0:	74 18       	ld.w	r8,r10[0x4]
80008de2:	a3 4b       	asr	r11,0x2
80008de4:	30 1c       	mov	r12,1
80008de6:	f8 0b 09 4b 	lsl	r11,r12,r11
80008dea:	f1 eb 10 0b 	or	r11,r8,r11
80008dee:	12 98       	mov	r8,r9
80008df0:	95 1b       	st.w	r10[0x4],r11
80008df2:	c0 a8       	rjmp	80008e06 <_free_r+0x18a>
80008df4:	72 29       	ld.w	r9,r9[0x8]
80008df6:	18 39       	cp.w	r9,r12
80008df8:	c0 60       	breq	80008e04 <_free_r+0x188>
80008dfa:	72 1a       	ld.w	r10,r9[0x4]
80008dfc:	e0 1a ff fc 	andl	r10,0xfffc
80008e00:	14 38       	cp.w	r8,r10
80008e02:	cf 93       	brcs	80008df4 <_free_r+0x178>
80008e04:	72 38       	ld.w	r8,r9[0xc]
80008e06:	8d 38       	st.w	r6[0xc],r8
80008e08:	8d 29       	st.w	r6[0x8],r9
80008e0a:	93 36       	st.w	r9[0xc],r6
80008e0c:	91 26       	st.w	r8[0x8],r6
80008e0e:	0e 9c       	mov	r12,r7
80008e10:	f0 1f 00 02 	mcall	80008e18 <_free_r+0x19c>
80008e14:	d8 22       	popm	r4-r7,pc
80008e16:	00 00       	add	r0,r0
80008e18:	80 00       	ld.sh	r0,r0[0x0]
80008e1a:	42 e4       	lddsp	r4,sp[0xb8]

80008e1c <__sfvwrite_r>:
80008e1c:	d4 31       	pushm	r0-r7,lr
80008e1e:	20 3d       	sub	sp,12
80008e20:	14 94       	mov	r4,r10
80008e22:	18 95       	mov	r5,r12
80008e24:	16 97       	mov	r7,r11
80008e26:	74 28       	ld.w	r8,r10[0x8]
80008e28:	58 08       	cp.w	r8,0
80008e2a:	e0 80 01 47 	breq	800090b8 <__sfvwrite_r+0x29c>
80008e2e:	96 68       	ld.sh	r8,r11[0xc]
80008e30:	ed b8 00 03 	bld	r8,0x3
80008e34:	c0 41       	brne	80008e3c <__sfvwrite_r+0x20>
80008e36:	76 48       	ld.w	r8,r11[0x10]
80008e38:	58 08       	cp.w	r8,0
80008e3a:	c0 c1       	brne	80008e52 <__sfvwrite_r+0x36>
80008e3c:	0e 9b       	mov	r11,r7
80008e3e:	0a 9c       	mov	r12,r5
80008e40:	f0 1f 00 a0 	mcall	800090c0 <__sfvwrite_r+0x2a4>
80008e44:	c0 70       	breq	80008e52 <__sfvwrite_r+0x36>
80008e46:	8e 68       	ld.sh	r8,r7[0xc]
80008e48:	a7 a8       	sbr	r8,0x6
80008e4a:	ae 68       	st.h	r7[0xc],r8
80008e4c:	30 98       	mov	r8,9
80008e4e:	8b 38       	st.w	r5[0xc],r8
80008e50:	c3 29       	rjmp	800090b4 <__sfvwrite_r+0x298>
80008e52:	8e 63       	ld.sh	r3,r7[0xc]
80008e54:	68 00       	ld.w	r0,r4[0x0]
80008e56:	06 96       	mov	r6,r3
80008e58:	e2 16 00 02 	andl	r6,0x2,COH
80008e5c:	c2 10       	breq	80008e9e <__sfvwrite_r+0x82>
80008e5e:	30 03       	mov	r3,0
80008e60:	e0 62 04 00 	mov	r2,1024
80008e64:	06 96       	mov	r6,r3
80008e66:	c0 48       	rjmp	80008e6e <__sfvwrite_r+0x52>
80008e68:	60 03       	ld.w	r3,r0[0x0]
80008e6a:	60 16       	ld.w	r6,r0[0x4]
80008e6c:	2f 80       	sub	r0,-8
80008e6e:	58 06       	cp.w	r6,0
80008e70:	cf c0       	breq	80008e68 <__sfvwrite_r+0x4c>
80008e72:	e0 46 04 00 	cp.w	r6,1024
80008e76:	ec 09 17 80 	movls	r9,r6
80008e7a:	e4 09 17 b0 	movhi	r9,r2
80008e7e:	06 9a       	mov	r10,r3
80008e80:	6e a8       	ld.w	r8,r7[0x28]
80008e82:	6e 8b       	ld.w	r11,r7[0x20]
80008e84:	0a 9c       	mov	r12,r5
80008e86:	5d 18       	icall	r8
80008e88:	18 16       	sub	r6,r12
80008e8a:	58 0c       	cp.w	r12,0
80008e8c:	e0 8a 01 11 	brle	800090ae <__sfvwrite_r+0x292>
80008e90:	68 28       	ld.w	r8,r4[0x8]
80008e92:	18 18       	sub	r8,r12
80008e94:	89 28       	st.w	r4[0x8],r8
80008e96:	e0 80 01 11 	breq	800090b8 <__sfvwrite_r+0x29c>
80008e9a:	18 03       	add	r3,r12
80008e9c:	ce 9b       	rjmp	80008e6e <__sfvwrite_r+0x52>
80008e9e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80008ea2:	c0 70       	breq	80008eb0 <__sfvwrite_r+0x94>
80008ea4:	50 06       	stdsp	sp[0x0],r6
80008ea6:	0c 93       	mov	r3,r6
80008ea8:	0c 91       	mov	r1,r6
80008eaa:	50 15       	stdsp	sp[0x4],r5
80008eac:	08 92       	mov	r2,r4
80008eae:	ca 08       	rjmp	80008fee <__sfvwrite_r+0x1d2>
80008eb0:	06 96       	mov	r6,r3
80008eb2:	08 91       	mov	r1,r4
80008eb4:	c0 48       	rjmp	80008ebc <__sfvwrite_r+0xa0>
80008eb6:	60 03       	ld.w	r3,r0[0x0]
80008eb8:	60 16       	ld.w	r6,r0[0x4]
80008eba:	2f 80       	sub	r0,-8
80008ebc:	58 06       	cp.w	r6,0
80008ebe:	cf c0       	breq	80008eb6 <__sfvwrite_r+0x9a>
80008ec0:	8e 68       	ld.sh	r8,r7[0xc]
80008ec2:	6e 24       	ld.w	r4,r7[0x8]
80008ec4:	10 99       	mov	r9,r8
80008ec6:	e2 19 02 00 	andl	r9,0x200,COH
80008eca:	c5 70       	breq	80008f78 <__sfvwrite_r+0x15c>
80008ecc:	08 36       	cp.w	r6,r4
80008ece:	c4 53       	brcs	80008f58 <__sfvwrite_r+0x13c>
80008ed0:	10 99       	mov	r9,r8
80008ed2:	e2 19 04 80 	andl	r9,0x480,COH
80008ed6:	c4 10       	breq	80008f58 <__sfvwrite_r+0x13c>
80008ed8:	6e 4b       	ld.w	r11,r7[0x10]
80008eda:	6e 09       	ld.w	r9,r7[0x0]
80008edc:	16 19       	sub	r9,r11
80008ede:	50 09       	stdsp	sp[0x0],r9
80008ee0:	6e 59       	ld.w	r9,r7[0x14]
80008ee2:	10 9c       	mov	r12,r8
80008ee4:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80008ee8:	30 28       	mov	r8,2
80008eea:	f4 08 0c 08 	divs	r8,r10,r8
80008eee:	fa e9 00 04 	st.d	sp[4],r8
80008ef2:	10 94       	mov	r4,r8
80008ef4:	40 09       	lddsp	r9,sp[0x0]
80008ef6:	e2 1c 04 00 	andl	r12,0x400,COH
80008efa:	2f f9       	sub	r9,-1
80008efc:	0c 09       	add	r9,r6
80008efe:	12 38       	cp.w	r8,r9
80008f00:	f2 04 17 30 	movlo	r4,r9
80008f04:	58 0c       	cp.w	r12,0
80008f06:	c1 10       	breq	80008f28 <__sfvwrite_r+0x10c>
80008f08:	08 9b       	mov	r11,r4
80008f0a:	0a 9c       	mov	r12,r5
80008f0c:	f0 1f 00 6e 	mcall	800090c4 <__sfvwrite_r+0x2a8>
80008f10:	18 92       	mov	r2,r12
80008f12:	c1 50       	breq	80008f3c <__sfvwrite_r+0x120>
80008f14:	40 0a       	lddsp	r10,sp[0x0]
80008f16:	6e 4b       	ld.w	r11,r7[0x10]
80008f18:	f0 1f 00 6c 	mcall	800090c8 <__sfvwrite_r+0x2ac>
80008f1c:	8e 68       	ld.sh	r8,r7[0xc]
80008f1e:	e0 18 fb 7f 	andl	r8,0xfb7f
80008f22:	a7 b8       	sbr	r8,0x7
80008f24:	ae 68       	st.h	r7[0xc],r8
80008f26:	c0 e8       	rjmp	80008f42 <__sfvwrite_r+0x126>
80008f28:	08 9a       	mov	r10,r4
80008f2a:	0a 9c       	mov	r12,r5
80008f2c:	f0 1f 00 68 	mcall	800090cc <__sfvwrite_r+0x2b0>
80008f30:	18 92       	mov	r2,r12
80008f32:	c0 81       	brne	80008f42 <__sfvwrite_r+0x126>
80008f34:	6e 4b       	ld.w	r11,r7[0x10]
80008f36:	0a 9c       	mov	r12,r5
80008f38:	f0 1f 00 66 	mcall	800090d0 <__sfvwrite_r+0x2b4>
80008f3c:	30 c8       	mov	r8,12
80008f3e:	8b 38       	st.w	r5[0xc],r8
80008f40:	cb 78       	rjmp	800090ae <__sfvwrite_r+0x292>
80008f42:	40 0a       	lddsp	r10,sp[0x0]
80008f44:	40 09       	lddsp	r9,sp[0x0]
80008f46:	e8 0a 01 0a 	sub	r10,r4,r10
80008f4a:	e4 09 00 08 	add	r8,r2,r9
80008f4e:	8f 54       	st.w	r7[0x14],r4
80008f50:	8f 2a       	st.w	r7[0x8],r10
80008f52:	8f 08       	st.w	r7[0x0],r8
80008f54:	8f 42       	st.w	r7[0x10],r2
80008f56:	0c 94       	mov	r4,r6
80008f58:	08 36       	cp.w	r6,r4
80008f5a:	ec 04 17 30 	movlo	r4,r6
80008f5e:	06 9b       	mov	r11,r3
80008f60:	08 9a       	mov	r10,r4
80008f62:	6e 0c       	ld.w	r12,r7[0x0]
80008f64:	f0 1f 00 5c 	mcall	800090d4 <__sfvwrite_r+0x2b8>
80008f68:	6e 08       	ld.w	r8,r7[0x0]
80008f6a:	08 08       	add	r8,r4
80008f6c:	8f 08       	st.w	r7[0x0],r8
80008f6e:	6e 28       	ld.w	r8,r7[0x8]
80008f70:	08 18       	sub	r8,r4
80008f72:	0c 94       	mov	r4,r6
80008f74:	8f 28       	st.w	r7[0x8],r8
80008f76:	c3 08       	rjmp	80008fd6 <__sfvwrite_r+0x1ba>
80008f78:	08 36       	cp.w	r6,r4
80008f7a:	5f ba       	srhi	r10
80008f7c:	6e 0c       	ld.w	r12,r7[0x0]
80008f7e:	6e 48       	ld.w	r8,r7[0x10]
80008f80:	10 3c       	cp.w	r12,r8
80008f82:	5f b8       	srhi	r8
80008f84:	f5 e8 00 08 	and	r8,r10,r8
80008f88:	f2 08 18 00 	cp.b	r8,r9
80008f8c:	c0 e0       	breq	80008fa8 <__sfvwrite_r+0x18c>
80008f8e:	06 9b       	mov	r11,r3
80008f90:	08 9a       	mov	r10,r4
80008f92:	f0 1f 00 51 	mcall	800090d4 <__sfvwrite_r+0x2b8>
80008f96:	6e 08       	ld.w	r8,r7[0x0]
80008f98:	08 08       	add	r8,r4
80008f9a:	0e 9b       	mov	r11,r7
80008f9c:	8f 08       	st.w	r7[0x0],r8
80008f9e:	0a 9c       	mov	r12,r5
80008fa0:	f0 1f 00 4e 	mcall	800090d8 <__sfvwrite_r+0x2bc>
80008fa4:	c1 90       	breq	80008fd6 <__sfvwrite_r+0x1ba>
80008fa6:	c8 48       	rjmp	800090ae <__sfvwrite_r+0x292>
80008fa8:	6e 59       	ld.w	r9,r7[0x14]
80008faa:	12 36       	cp.w	r6,r9
80008fac:	c0 a3       	brcs	80008fc0 <__sfvwrite_r+0x1a4>
80008fae:	6e a8       	ld.w	r8,r7[0x28]
80008fb0:	06 9a       	mov	r10,r3
80008fb2:	6e 8b       	ld.w	r11,r7[0x20]
80008fb4:	0a 9c       	mov	r12,r5
80008fb6:	5d 18       	icall	r8
80008fb8:	18 94       	mov	r4,r12
80008fba:	e0 89 00 0e 	brgt	80008fd6 <__sfvwrite_r+0x1ba>
80008fbe:	c7 88       	rjmp	800090ae <__sfvwrite_r+0x292>
80008fc0:	0c 9a       	mov	r10,r6
80008fc2:	06 9b       	mov	r11,r3
80008fc4:	f0 1f 00 44 	mcall	800090d4 <__sfvwrite_r+0x2b8>
80008fc8:	6e 08       	ld.w	r8,r7[0x0]
80008fca:	0c 08       	add	r8,r6
80008fcc:	0c 94       	mov	r4,r6
80008fce:	8f 08       	st.w	r7[0x0],r8
80008fd0:	6e 28       	ld.w	r8,r7[0x8]
80008fd2:	0c 18       	sub	r8,r6
80008fd4:	8f 28       	st.w	r7[0x8],r8
80008fd6:	62 28       	ld.w	r8,r1[0x8]
80008fd8:	08 18       	sub	r8,r4
80008fda:	83 28       	st.w	r1[0x8],r8
80008fdc:	c6 e0       	breq	800090b8 <__sfvwrite_r+0x29c>
80008fde:	08 16       	sub	r6,r4
80008fe0:	08 03       	add	r3,r4
80008fe2:	c6 db       	rjmp	80008ebc <__sfvwrite_r+0xa0>
80008fe4:	60 03       	ld.w	r3,r0[0x0]
80008fe6:	60 11       	ld.w	r1,r0[0x4]
80008fe8:	30 08       	mov	r8,0
80008fea:	2f 80       	sub	r0,-8
80008fec:	50 08       	stdsp	sp[0x0],r8
80008fee:	58 01       	cp.w	r1,0
80008ff0:	cf a0       	breq	80008fe4 <__sfvwrite_r+0x1c8>
80008ff2:	40 0a       	lddsp	r10,sp[0x0]
80008ff4:	58 0a       	cp.w	r10,0
80008ff6:	c1 51       	brne	80009020 <__sfvwrite_r+0x204>
80008ff8:	e2 c6 ff ff 	sub	r6,r1,-1
80008ffc:	02 9a       	mov	r10,r1
80008ffe:	30 ab       	mov	r11,10
80009000:	06 9c       	mov	r12,r3
80009002:	f0 1f 00 37 	mcall	800090dc <__sfvwrite_r+0x2c0>
80009006:	f8 c8 ff ff 	sub	r8,r12,-1
8000900a:	58 0c       	cp.w	r12,0
8000900c:	f1 d3 e1 16 	subne	r6,r8,r3
80009010:	f9 b9 01 01 	movne	r9,1
80009014:	fb f9 1a 00 	st.wne	sp[0x0],r9
80009018:	f9 b8 00 01 	moveq	r8,1
8000901c:	fb f8 0a 00 	st.weq	sp[0x0],r8
80009020:	02 36       	cp.w	r6,r1
80009022:	ec 04 17 80 	movls	r4,r6
80009026:	e2 04 17 b0 	movhi	r4,r1
8000902a:	6e 59       	ld.w	r9,r7[0x14]
8000902c:	6e 25       	ld.w	r5,r7[0x8]
8000902e:	f2 05 00 05 	add	r5,r9,r5
80009032:	0a 34       	cp.w	r4,r5
80009034:	5f 9a       	srgt	r10
80009036:	6e 0c       	ld.w	r12,r7[0x0]
80009038:	6e 48       	ld.w	r8,r7[0x10]
8000903a:	10 3c       	cp.w	r12,r8
8000903c:	5f b8       	srhi	r8
8000903e:	f5 e8 00 08 	and	r8,r10,r8
80009042:	30 0a       	mov	r10,0
80009044:	f4 08 18 00 	cp.b	r8,r10
80009048:	c0 e0       	breq	80009064 <__sfvwrite_r+0x248>
8000904a:	06 9b       	mov	r11,r3
8000904c:	0a 9a       	mov	r10,r5
8000904e:	f0 1f 00 22 	mcall	800090d4 <__sfvwrite_r+0x2b8>
80009052:	6e 08       	ld.w	r8,r7[0x0]
80009054:	0a 08       	add	r8,r5
80009056:	0e 9b       	mov	r11,r7
80009058:	8f 08       	st.w	r7[0x0],r8
8000905a:	40 1c       	lddsp	r12,sp[0x4]
8000905c:	f0 1f 00 1f 	mcall	800090d8 <__sfvwrite_r+0x2bc>
80009060:	c1 80       	breq	80009090 <__sfvwrite_r+0x274>
80009062:	c2 68       	rjmp	800090ae <__sfvwrite_r+0x292>
80009064:	12 34       	cp.w	r4,r9
80009066:	c0 a5       	brlt	8000907a <__sfvwrite_r+0x25e>
80009068:	6e a8       	ld.w	r8,r7[0x28]
8000906a:	06 9a       	mov	r10,r3
8000906c:	6e 8b       	ld.w	r11,r7[0x20]
8000906e:	40 1c       	lddsp	r12,sp[0x4]
80009070:	5d 18       	icall	r8
80009072:	18 95       	mov	r5,r12
80009074:	e0 89 00 0e 	brgt	80009090 <__sfvwrite_r+0x274>
80009078:	c1 b8       	rjmp	800090ae <__sfvwrite_r+0x292>
8000907a:	08 9a       	mov	r10,r4
8000907c:	06 9b       	mov	r11,r3
8000907e:	f0 1f 00 16 	mcall	800090d4 <__sfvwrite_r+0x2b8>
80009082:	6e 08       	ld.w	r8,r7[0x0]
80009084:	08 08       	add	r8,r4
80009086:	08 95       	mov	r5,r4
80009088:	8f 08       	st.w	r7[0x0],r8
8000908a:	6e 28       	ld.w	r8,r7[0x8]
8000908c:	08 18       	sub	r8,r4
8000908e:	8f 28       	st.w	r7[0x8],r8
80009090:	0a 16       	sub	r6,r5
80009092:	c0 71       	brne	800090a0 <__sfvwrite_r+0x284>
80009094:	0e 9b       	mov	r11,r7
80009096:	40 1c       	lddsp	r12,sp[0x4]
80009098:	f0 1f 00 10 	mcall	800090d8 <__sfvwrite_r+0x2bc>
8000909c:	c0 91       	brne	800090ae <__sfvwrite_r+0x292>
8000909e:	50 06       	stdsp	sp[0x0],r6
800090a0:	64 28       	ld.w	r8,r2[0x8]
800090a2:	0a 18       	sub	r8,r5
800090a4:	85 28       	st.w	r2[0x8],r8
800090a6:	c0 90       	breq	800090b8 <__sfvwrite_r+0x29c>
800090a8:	0a 11       	sub	r1,r5
800090aa:	0a 03       	add	r3,r5
800090ac:	ca 1b       	rjmp	80008fee <__sfvwrite_r+0x1d2>
800090ae:	8e 68       	ld.sh	r8,r7[0xc]
800090b0:	a7 a8       	sbr	r8,0x6
800090b2:	ae 68       	st.h	r7[0xc],r8
800090b4:	3f fc       	mov	r12,-1
800090b6:	c0 28       	rjmp	800090ba <__sfvwrite_r+0x29e>
800090b8:	30 0c       	mov	r12,0
800090ba:	2f dd       	sub	sp,-12
800090bc:	d8 32       	popm	r0-r7,pc
800090be:	00 00       	add	r0,r0
800090c0:	80 00       	ld.sh	r0,r0[0x0]
800090c2:	79 20       	ld.w	r0,r12[0x48]
800090c4:	80 00       	ld.sh	r0,r0[0x0]
800090c6:	4a f8       	lddpc	r8,80009180 <__smakebuf_r+0x44>
800090c8:	80 00       	ld.sh	r0,r0[0x0]
800090ca:	4f 48       	lddpc	r8,80009298 <__hi0bits+0x3c>
800090cc:	80 00       	ld.sh	r0,r0[0x0]
800090ce:	50 d8       	stdsp	sp[0x34],r8
800090d0:	80 00       	ld.sh	r0,r0[0x0]
800090d2:	8c 7c       	ld.sh	r12,r6[0xe]
800090d4:	80 00       	ld.sh	r0,r0[0x0]
800090d6:	92 1e       	ld.sh	lr,r9[0x2]
800090d8:	80 00       	ld.sh	r0,r0[0x0]
800090da:	89 48       	st.w	r4[0x10],r8
800090dc:	80 00       	ld.sh	r0,r0[0x0]
800090de:	92 08       	ld.sh	r8,r9[0x0]

800090e0 <_fwalk>:
800090e0:	d4 31       	pushm	r0-r7,lr
800090e2:	30 05       	mov	r5,0
800090e4:	16 91       	mov	r1,r11
800090e6:	f8 c7 ff 28 	sub	r7,r12,-216
800090ea:	0a 92       	mov	r2,r5
800090ec:	f0 1f 00 10 	mcall	8000912c <_fwalk+0x4c>
800090f0:	3f f3       	mov	r3,-1
800090f2:	c1 68       	rjmp	8000911e <_fwalk+0x3e>
800090f4:	6e 26       	ld.w	r6,r7[0x8]
800090f6:	6e 14       	ld.w	r4,r7[0x4]
800090f8:	2f 46       	sub	r6,-12
800090fa:	c0 c8       	rjmp	80009112 <_fwalk+0x32>
800090fc:	8c 08       	ld.sh	r8,r6[0x0]
800090fe:	e4 08 19 00 	cp.h	r8,r2
80009102:	c0 70       	breq	80009110 <_fwalk+0x30>
80009104:	8c 18       	ld.sh	r8,r6[0x2]
80009106:	e6 08 19 00 	cp.h	r8,r3
8000910a:	c0 30       	breq	80009110 <_fwalk+0x30>
8000910c:	5d 11       	icall	r1
8000910e:	18 45       	or	r5,r12
80009110:	2a 46       	sub	r6,-92
80009112:	20 14       	sub	r4,1
80009114:	ec cc 00 0c 	sub	r12,r6,12
80009118:	58 04       	cp.w	r4,0
8000911a:	cf 14       	brge	800090fc <_fwalk+0x1c>
8000911c:	6e 07       	ld.w	r7,r7[0x0]
8000911e:	58 07       	cp.w	r7,0
80009120:	ce a1       	brne	800090f4 <_fwalk+0x14>
80009122:	f0 1f 00 04 	mcall	80009130 <_fwalk+0x50>
80009126:	0a 9c       	mov	r12,r5
80009128:	d8 32       	popm	r0-r7,pc
8000912a:	00 00       	add	r0,r0
8000912c:	80 00       	ld.sh	r0,r0[0x0]
8000912e:	8a 60       	ld.sh	r0,r5[0xc]
80009130:	80 00       	ld.sh	r0,r0[0x0]
80009132:	8a 62       	ld.sh	r2,r5[0xc]

80009134 <_localeconv_r>:
80009134:	48 1c       	lddpc	r12,80009138 <_localeconv_r+0x4>
80009136:	5e fc       	retal	r12
80009138:	80 00       	ld.sh	r0,r0[0x0]
8000913a:	b1 68       	lsl	r8,0x10

8000913c <__smakebuf_r>:
8000913c:	d4 21       	pushm	r4-r7,lr
8000913e:	20 fd       	sub	sp,60
80009140:	96 68       	ld.sh	r8,r11[0xc]
80009142:	16 97       	mov	r7,r11
80009144:	18 96       	mov	r6,r12
80009146:	e2 18 00 02 	andl	r8,0x2,COH
8000914a:	c3 c1       	brne	800091c2 <__smakebuf_r+0x86>
8000914c:	96 7b       	ld.sh	r11,r11[0xe]
8000914e:	f0 0b 19 00 	cp.h	r11,r8
80009152:	c0 55       	brlt	8000915c <__smakebuf_r+0x20>
80009154:	1a 9a       	mov	r10,sp
80009156:	f0 1f 00 28 	mcall	800091f4 <__smakebuf_r+0xb8>
8000915a:	c0 f4       	brge	80009178 <__smakebuf_r+0x3c>
8000915c:	8e 65       	ld.sh	r5,r7[0xc]
8000915e:	0a 98       	mov	r8,r5
80009160:	ab b8       	sbr	r8,0xb
80009162:	e2 15 00 80 	andl	r5,0x80,COH
80009166:	ae 68       	st.h	r7[0xc],r8
80009168:	30 04       	mov	r4,0
8000916a:	e0 68 04 00 	mov	r8,1024
8000916e:	f9 b5 01 40 	movne	r5,64
80009172:	f0 05 17 00 	moveq	r5,r8
80009176:	c1 b8       	rjmp	800091ac <__smakebuf_r+0x70>
80009178:	40 18       	lddsp	r8,sp[0x4]
8000917a:	e2 18 f0 00 	andl	r8,0xf000,COH
8000917e:	e0 48 20 00 	cp.w	r8,8192
80009182:	5f 04       	sreq	r4
80009184:	e0 48 80 00 	cp.w	r8,32768
80009188:	c0 d1       	brne	800091a2 <__smakebuf_r+0x66>
8000918a:	6e b9       	ld.w	r9,r7[0x2c]
8000918c:	49 b8       	lddpc	r8,800091f8 <__smakebuf_r+0xbc>
8000918e:	10 39       	cp.w	r9,r8
80009190:	c0 91       	brne	800091a2 <__smakebuf_r+0x66>
80009192:	8e 68       	ld.sh	r8,r7[0xc]
80009194:	e0 65 04 00 	mov	r5,1024
80009198:	ab a8       	sbr	r8,0xa
8000919a:	ef 45 00 50 	st.w	r7[80],r5
8000919e:	ae 68       	st.h	r7[0xc],r8
800091a0:	c0 68       	rjmp	800091ac <__smakebuf_r+0x70>
800091a2:	8e 68       	ld.sh	r8,r7[0xc]
800091a4:	e0 65 04 00 	mov	r5,1024
800091a8:	ab b8       	sbr	r8,0xb
800091aa:	ae 68       	st.h	r7[0xc],r8
800091ac:	0a 9b       	mov	r11,r5
800091ae:	0c 9c       	mov	r12,r6
800091b0:	f0 1f 00 13 	mcall	800091fc <__smakebuf_r+0xc0>
800091b4:	8e 68       	ld.sh	r8,r7[0xc]
800091b6:	c0 d1       	brne	800091d0 <__smakebuf_r+0x94>
800091b8:	ed b8 00 09 	bld	r8,0x9
800091bc:	c1 a0       	breq	800091f0 <__smakebuf_r+0xb4>
800091be:	a1 b8       	sbr	r8,0x1
800091c0:	ae 68       	st.h	r7[0xc],r8
800091c2:	ee c8 ff b9 	sub	r8,r7,-71
800091c6:	8f 48       	st.w	r7[0x10],r8
800091c8:	8f 08       	st.w	r7[0x0],r8
800091ca:	30 18       	mov	r8,1
800091cc:	8f 58       	st.w	r7[0x14],r8
800091ce:	c1 18       	rjmp	800091f0 <__smakebuf_r+0xb4>
800091d0:	a7 b8       	sbr	r8,0x7
800091d2:	8f 4c       	st.w	r7[0x10],r12
800091d4:	ae 68       	st.h	r7[0xc],r8
800091d6:	8f 55       	st.w	r7[0x14],r5
800091d8:	48 a8       	lddpc	r8,80009200 <__smakebuf_r+0xc4>
800091da:	8f 0c       	st.w	r7[0x0],r12
800091dc:	8d a8       	st.w	r6[0x28],r8
800091de:	58 04       	cp.w	r4,0
800091e0:	c0 80       	breq	800091f0 <__smakebuf_r+0xb4>
800091e2:	8e 7c       	ld.sh	r12,r7[0xe]
800091e4:	f0 1f 00 08 	mcall	80009204 <__smakebuf_r+0xc8>
800091e8:	c0 40       	breq	800091f0 <__smakebuf_r+0xb4>
800091ea:	8e 68       	ld.sh	r8,r7[0xc]
800091ec:	a1 a8       	sbr	r8,0x0
800091ee:	ae 68       	st.h	r7[0xc],r8
800091f0:	2f 1d       	sub	sp,-60
800091f2:	d8 22       	popm	r4-r7,pc
800091f4:	80 00       	ld.sh	r0,r0[0x0]
800091f6:	9b 30       	st.w	sp[0xc],r0
800091f8:	80 00       	ld.sh	r0,r0[0x0]
800091fa:	98 f8       	ld.uh	r8,r12[0xe]
800091fc:	80 00       	ld.sh	r0,r0[0x0]
800091fe:	4a f8       	lddpc	r8,800092b8 <__hi0bits+0x5c>
80009200:	80 00       	ld.sh	r0,r0[0x0]
80009202:	8a 64       	ld.sh	r4,r5[0xc]
80009204:	80 00       	ld.sh	r0,r0[0x0]
80009206:	55 80       	stdsp	sp[0x160],r0

80009208 <memchr>:
80009208:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000920c:	c0 68       	rjmp	80009218 <memchr+0x10>
8000920e:	20 1a       	sub	r10,1
80009210:	19 88       	ld.ub	r8,r12[0x0]
80009212:	16 38       	cp.w	r8,r11
80009214:	5e 0c       	reteq	r12
80009216:	2f fc       	sub	r12,-1
80009218:	58 0a       	cp.w	r10,0
8000921a:	cf a1       	brne	8000920e <memchr+0x6>
8000921c:	5e fa       	retal	r10

8000921e <memmove>:
8000921e:	d4 01       	pushm	lr
80009220:	18 3b       	cp.w	r11,r12
80009222:	c1 92       	brcc	80009254 <memmove+0x36>
80009224:	f6 0a 00 09 	add	r9,r11,r10
80009228:	12 3c       	cp.w	r12,r9
8000922a:	c1 52       	brcc	80009254 <memmove+0x36>
8000922c:	f8 0a 00 0b 	add	r11,r12,r10
80009230:	30 08       	mov	r8,0
80009232:	c0 68       	rjmp	8000923e <memmove+0x20>
80009234:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80009238:	20 1a       	sub	r10,1
8000923a:	f6 08 0b 0e 	st.b	r11[r8],lr
8000923e:	20 18       	sub	r8,1
80009240:	58 0a       	cp.w	r10,0
80009242:	cf 91       	brne	80009234 <memmove+0x16>
80009244:	d8 02       	popm	pc
80009246:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000924a:	20 1a       	sub	r10,1
8000924c:	f8 08 0b 09 	st.b	r12[r8],r9
80009250:	2f f8       	sub	r8,-1
80009252:	c0 28       	rjmp	80009256 <memmove+0x38>
80009254:	30 08       	mov	r8,0
80009256:	58 0a       	cp.w	r10,0
80009258:	cf 71       	brne	80009246 <memmove+0x28>
8000925a:	d8 02       	popm	pc

8000925c <__hi0bits>:
8000925c:	18 98       	mov	r8,r12
8000925e:	e0 1c 00 00 	andl	r12,0x0
80009262:	f0 09 15 10 	lsl	r9,r8,0x10
80009266:	58 0c       	cp.w	r12,0
80009268:	f2 08 17 00 	moveq	r8,r9
8000926c:	f9 bc 00 10 	moveq	r12,16
80009270:	f9 bc 01 00 	movne	r12,0
80009274:	10 9a       	mov	r10,r8
80009276:	f0 09 15 08 	lsl	r9,r8,0x8
8000927a:	e6 1a ff 00 	andh	r10,0xff00,COH
8000927e:	f7 bc 00 f8 	subeq	r12,-8
80009282:	f2 08 17 00 	moveq	r8,r9
80009286:	10 9a       	mov	r10,r8
80009288:	f0 09 15 04 	lsl	r9,r8,0x4
8000928c:	e6 1a f0 00 	andh	r10,0xf000,COH
80009290:	f7 bc 00 fc 	subeq	r12,-4
80009294:	f2 08 17 00 	moveq	r8,r9
80009298:	10 9a       	mov	r10,r8
8000929a:	f0 09 15 02 	lsl	r9,r8,0x2
8000929e:	e6 1a c0 00 	andh	r10,0xc000,COH
800092a2:	f7 bc 00 fe 	subeq	r12,-2
800092a6:	f2 08 17 00 	moveq	r8,r9
800092aa:	58 08       	cp.w	r8,0
800092ac:	5e 5c       	retlt	r12
800092ae:	ed b8 00 1e 	bld	r8,0x1e
800092b2:	f9 bc 01 20 	movne	r12,32
800092b6:	f7 bc 00 ff 	subeq	r12,-1
800092ba:	5e fc       	retal	r12

800092bc <__lo0bits>:
800092bc:	18 99       	mov	r9,r12
800092be:	78 08       	ld.w	r8,r12[0x0]
800092c0:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800092c4:	c1 50       	breq	800092ee <__lo0bits+0x32>
800092c6:	ed b8 00 00 	bld	r8,0x0
800092ca:	c0 21       	brne	800092ce <__lo0bits+0x12>
800092cc:	5e fd       	retal	0
800092ce:	10 9b       	mov	r11,r8
800092d0:	f0 0a 16 01 	lsr	r10,r8,0x1
800092d4:	e2 1b 00 02 	andl	r11,0x2,COH
800092d8:	a3 88       	lsr	r8,0x2
800092da:	58 0b       	cp.w	r11,0
800092dc:	f3 fa 1a 00 	st.wne	r9[0x0],r10
800092e0:	f9 bc 01 01 	movne	r12,1
800092e4:	f3 f8 0a 00 	st.weq	r9[0x0],r8
800092e8:	f9 bc 00 02 	moveq	r12,2
800092ec:	5e fc       	retal	r12
800092ee:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800092f2:	f0 0b 16 10 	lsr	r11,r8,0x10
800092f6:	58 0a       	cp.w	r10,0
800092f8:	f6 08 17 00 	moveq	r8,r11
800092fc:	f9 bc 00 10 	moveq	r12,16
80009300:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80009304:	f0 0a 16 08 	lsr	r10,r8,0x8
80009308:	58 0b       	cp.w	r11,0
8000930a:	f7 bc 00 f8 	subeq	r12,-8
8000930e:	f4 08 17 00 	moveq	r8,r10
80009312:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80009316:	f0 0a 16 04 	lsr	r10,r8,0x4
8000931a:	58 0b       	cp.w	r11,0
8000931c:	f7 bc 00 fc 	subeq	r12,-4
80009320:	f4 08 17 00 	moveq	r8,r10
80009324:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80009328:	f0 0a 16 02 	lsr	r10,r8,0x2
8000932c:	58 0b       	cp.w	r11,0
8000932e:	f7 bc 00 fe 	subeq	r12,-2
80009332:	f4 08 17 00 	moveq	r8,r10
80009336:	ed b8 00 00 	bld	r8,0x0
8000933a:	c0 60       	breq	80009346 <__lo0bits+0x8a>
8000933c:	a1 98       	lsr	r8,0x1
8000933e:	c0 31       	brne	80009344 <__lo0bits+0x88>
80009340:	32 0c       	mov	r12,32
80009342:	5e fc       	retal	r12
80009344:	2f fc       	sub	r12,-1
80009346:	93 08       	st.w	r9[0x0],r8
80009348:	5e fc       	retal	r12

8000934a <__mcmp>:
8000934a:	d4 01       	pushm	lr
8000934c:	18 98       	mov	r8,r12
8000934e:	76 49       	ld.w	r9,r11[0x10]
80009350:	78 4c       	ld.w	r12,r12[0x10]
80009352:	12 1c       	sub	r12,r9
80009354:	c1 31       	brne	8000937a <__mcmp+0x30>
80009356:	2f b9       	sub	r9,-5
80009358:	a3 69       	lsl	r9,0x2
8000935a:	12 0b       	add	r11,r9
8000935c:	f0 09 00 09 	add	r9,r8,r9
80009360:	2e c8       	sub	r8,-20
80009362:	13 4e       	ld.w	lr,--r9
80009364:	17 4a       	ld.w	r10,--r11
80009366:	14 3e       	cp.w	lr,r10
80009368:	c0 60       	breq	80009374 <__mcmp+0x2a>
8000936a:	f9 bc 03 ff 	movlo	r12,-1
8000936e:	f9 bc 02 01 	movhs	r12,1
80009372:	d8 02       	popm	pc
80009374:	10 39       	cp.w	r9,r8
80009376:	fe 9b ff f6 	brhi	80009362 <__mcmp+0x18>
8000937a:	d8 02       	popm	pc

8000937c <_Bfree>:
8000937c:	d4 21       	pushm	r4-r7,lr
8000937e:	18 97       	mov	r7,r12
80009380:	16 95       	mov	r5,r11
80009382:	78 96       	ld.w	r6,r12[0x24]
80009384:	58 06       	cp.w	r6,0
80009386:	c0 91       	brne	80009398 <_Bfree+0x1c>
80009388:	31 0c       	mov	r12,16
8000938a:	f0 1f 00 0a 	mcall	800093b0 <_Bfree+0x34>
8000938e:	99 36       	st.w	r12[0xc],r6
80009390:	8f 9c       	st.w	r7[0x24],r12
80009392:	99 16       	st.w	r12[0x4],r6
80009394:	99 26       	st.w	r12[0x8],r6
80009396:	99 06       	st.w	r12[0x0],r6
80009398:	58 05       	cp.w	r5,0
8000939a:	c0 90       	breq	800093ac <_Bfree+0x30>
8000939c:	6a 19       	ld.w	r9,r5[0x4]
8000939e:	6e 98       	ld.w	r8,r7[0x24]
800093a0:	70 38       	ld.w	r8,r8[0xc]
800093a2:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
800093a6:	8b 0a       	st.w	r5[0x0],r10
800093a8:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
800093ac:	d8 22       	popm	r4-r7,pc
800093ae:	00 00       	add	r0,r0
800093b0:	80 00       	ld.sh	r0,r0[0x0]
800093b2:	4a e0       	lddpc	r0,80009468 <__d2b+0x3c>

800093b4 <_Balloc>:
800093b4:	d4 21       	pushm	r4-r7,lr
800093b6:	18 97       	mov	r7,r12
800093b8:	16 96       	mov	r6,r11
800093ba:	78 95       	ld.w	r5,r12[0x24]
800093bc:	58 05       	cp.w	r5,0
800093be:	c0 91       	brne	800093d0 <_Balloc+0x1c>
800093c0:	31 0c       	mov	r12,16
800093c2:	f0 1f 00 19 	mcall	80009424 <_Balloc+0x70>
800093c6:	99 35       	st.w	r12[0xc],r5
800093c8:	8f 9c       	st.w	r7[0x24],r12
800093ca:	99 15       	st.w	r12[0x4],r5
800093cc:	99 25       	st.w	r12[0x8],r5
800093ce:	99 05       	st.w	r12[0x0],r5
800093d0:	6e 95       	ld.w	r5,r7[0x24]
800093d2:	6a 38       	ld.w	r8,r5[0xc]
800093d4:	58 08       	cp.w	r8,0
800093d6:	c0 b1       	brne	800093ec <_Balloc+0x38>
800093d8:	31 0a       	mov	r10,16
800093da:	30 4b       	mov	r11,4
800093dc:	0e 9c       	mov	r12,r7
800093de:	f0 1f 00 13 	mcall	80009428 <_Balloc+0x74>
800093e2:	8b 3c       	st.w	r5[0xc],r12
800093e4:	6e 98       	ld.w	r8,r7[0x24]
800093e6:	70 3c       	ld.w	r12,r8[0xc]
800093e8:	58 0c       	cp.w	r12,0
800093ea:	c1 b0       	breq	80009420 <_Balloc+0x6c>
800093ec:	6e 98       	ld.w	r8,r7[0x24]
800093ee:	70 38       	ld.w	r8,r8[0xc]
800093f0:	f0 06 00 28 	add	r8,r8,r6<<0x2
800093f4:	70 0c       	ld.w	r12,r8[0x0]
800093f6:	58 0c       	cp.w	r12,0
800093f8:	c0 40       	breq	80009400 <_Balloc+0x4c>
800093fa:	78 09       	ld.w	r9,r12[0x0]
800093fc:	91 09       	st.w	r8[0x0],r9
800093fe:	c0 e8       	rjmp	8000941a <_Balloc+0x66>
80009400:	0e 9c       	mov	r12,r7
80009402:	30 17       	mov	r7,1
80009404:	0e 9b       	mov	r11,r7
80009406:	ee 06 09 47 	lsl	r7,r7,r6
8000940a:	ee ca ff fb 	sub	r10,r7,-5
8000940e:	a3 6a       	lsl	r10,0x2
80009410:	f0 1f 00 06 	mcall	80009428 <_Balloc+0x74>
80009414:	c0 60       	breq	80009420 <_Balloc+0x6c>
80009416:	99 16       	st.w	r12[0x4],r6
80009418:	99 27       	st.w	r12[0x8],r7
8000941a:	30 08       	mov	r8,0
8000941c:	99 38       	st.w	r12[0xc],r8
8000941e:	99 48       	st.w	r12[0x10],r8
80009420:	d8 22       	popm	r4-r7,pc
80009422:	00 00       	add	r0,r0
80009424:	80 00       	ld.sh	r0,r0[0x0]
80009426:	4a e0       	lddpc	r0,800094dc <__d2b+0xb0>
80009428:	80 00       	ld.sh	r0,r0[0x0]
8000942a:	99 c0       	st.w	r12[0x30],r0

8000942c <__d2b>:
8000942c:	d4 31       	pushm	r0-r7,lr
8000942e:	20 2d       	sub	sp,8
80009430:	16 93       	mov	r3,r11
80009432:	12 96       	mov	r6,r9
80009434:	10 95       	mov	r5,r8
80009436:	14 92       	mov	r2,r10
80009438:	30 1b       	mov	r11,1
8000943a:	f0 1f 00 27 	mcall	800094d4 <__d2b+0xa8>
8000943e:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80009442:	50 09       	stdsp	sp[0x0],r9
80009444:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80009448:	b5 a9       	sbr	r9,0x14
8000944a:	f0 01 16 14 	lsr	r1,r8,0x14
8000944e:	fb f9 1a 00 	st.wne	sp[0x0],r9
80009452:	18 94       	mov	r4,r12
80009454:	58 02       	cp.w	r2,0
80009456:	c1 e0       	breq	80009492 <__d2b+0x66>
80009458:	fa cc ff f8 	sub	r12,sp,-8
8000945c:	18 d2       	st.w	--r12,r2
8000945e:	f0 1f 00 1f 	mcall	800094d8 <__d2b+0xac>
80009462:	40 18       	lddsp	r8,sp[0x4]
80009464:	c0 d0       	breq	8000947e <__d2b+0x52>
80009466:	40 09       	lddsp	r9,sp[0x0]
80009468:	f8 0a 11 20 	rsub	r10,r12,32
8000946c:	f2 0a 09 4a 	lsl	r10,r9,r10
80009470:	f5 e8 10 08 	or	r8,r10,r8
80009474:	89 58       	st.w	r4[0x14],r8
80009476:	f2 0c 0a 49 	lsr	r9,r9,r12
8000947a:	50 09       	stdsp	sp[0x0],r9
8000947c:	c0 28       	rjmp	80009480 <__d2b+0x54>
8000947e:	89 58       	st.w	r4[0x14],r8
80009480:	40 08       	lddsp	r8,sp[0x0]
80009482:	58 08       	cp.w	r8,0
80009484:	f9 b3 01 02 	movne	r3,2
80009488:	f9 b3 00 01 	moveq	r3,1
8000948c:	89 68       	st.w	r4[0x18],r8
8000948e:	89 43       	st.w	r4[0x10],r3
80009490:	c0 98       	rjmp	800094a2 <__d2b+0x76>
80009492:	1a 9c       	mov	r12,sp
80009494:	f0 1f 00 11 	mcall	800094d8 <__d2b+0xac>
80009498:	30 13       	mov	r3,1
8000949a:	40 08       	lddsp	r8,sp[0x0]
8000949c:	2e 0c       	sub	r12,-32
8000949e:	89 43       	st.w	r4[0x10],r3
800094a0:	89 58       	st.w	r4[0x14],r8
800094a2:	58 01       	cp.w	r1,0
800094a4:	c0 90       	breq	800094b6 <__d2b+0x8a>
800094a6:	e2 c1 04 33 	sub	r1,r1,1075
800094aa:	18 01       	add	r1,r12
800094ac:	8d 01       	st.w	r6[0x0],r1
800094ae:	f8 0c 11 35 	rsub	r12,r12,53
800094b2:	8b 0c       	st.w	r5[0x0],r12
800094b4:	c0 d8       	rjmp	800094ce <__d2b+0xa2>
800094b6:	e6 c8 ff fc 	sub	r8,r3,-4
800094ba:	f8 cc 04 32 	sub	r12,r12,1074
800094be:	a5 73       	lsl	r3,0x5
800094c0:	8d 0c       	st.w	r6[0x0],r12
800094c2:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800094c6:	f0 1f 00 06 	mcall	800094dc <__d2b+0xb0>
800094ca:	18 13       	sub	r3,r12
800094cc:	8b 03       	st.w	r5[0x0],r3
800094ce:	08 9c       	mov	r12,r4
800094d0:	2f ed       	sub	sp,-8
800094d2:	d8 32       	popm	r0-r7,pc
800094d4:	80 00       	ld.sh	r0,r0[0x0]
800094d6:	93 b4       	st.w	r9[0x2c],r4
800094d8:	80 00       	ld.sh	r0,r0[0x0]
800094da:	92 bc       	ld.uh	r12,r9[0x6]
800094dc:	80 00       	ld.sh	r0,r0[0x0]
800094de:	92 5c       	ld.sh	r12,r9[0xa]

800094e0 <__mdiff>:
800094e0:	d4 31       	pushm	r0-r7,lr
800094e2:	74 48       	ld.w	r8,r10[0x10]
800094e4:	76 45       	ld.w	r5,r11[0x10]
800094e6:	16 97       	mov	r7,r11
800094e8:	14 96       	mov	r6,r10
800094ea:	10 15       	sub	r5,r8
800094ec:	c1 31       	brne	80009512 <__mdiff+0x32>
800094ee:	2f b8       	sub	r8,-5
800094f0:	ee ce ff ec 	sub	lr,r7,-20
800094f4:	a3 68       	lsl	r8,0x2
800094f6:	f4 08 00 0b 	add	r11,r10,r8
800094fa:	ee 08 00 08 	add	r8,r7,r8
800094fe:	11 4a       	ld.w	r10,--r8
80009500:	17 49       	ld.w	r9,--r11
80009502:	12 3a       	cp.w	r10,r9
80009504:	c0 30       	breq	8000950a <__mdiff+0x2a>
80009506:	c0 e2       	brcc	80009522 <__mdiff+0x42>
80009508:	c0 78       	rjmp	80009516 <__mdiff+0x36>
8000950a:	1c 38       	cp.w	r8,lr
8000950c:	fe 9b ff f9 	brhi	800094fe <__mdiff+0x1e>
80009510:	c4 a8       	rjmp	800095a4 <__mdiff+0xc4>
80009512:	58 05       	cp.w	r5,0
80009514:	c0 64       	brge	80009520 <__mdiff+0x40>
80009516:	0e 98       	mov	r8,r7
80009518:	30 15       	mov	r5,1
8000951a:	0c 97       	mov	r7,r6
8000951c:	10 96       	mov	r6,r8
8000951e:	c0 28       	rjmp	80009522 <__mdiff+0x42>
80009520:	30 05       	mov	r5,0
80009522:	6e 1b       	ld.w	r11,r7[0x4]
80009524:	f0 1f 00 24 	mcall	800095b4 <__mdiff+0xd4>
80009528:	6e 49       	ld.w	r9,r7[0x10]
8000952a:	6c 44       	ld.w	r4,r6[0x10]
8000952c:	99 35       	st.w	r12[0xc],r5
8000952e:	2f b4       	sub	r4,-5
80009530:	f2 c5 ff fb 	sub	r5,r9,-5
80009534:	ec 04 00 24 	add	r4,r6,r4<<0x2
80009538:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000953c:	2e c6       	sub	r6,-20
8000953e:	2e c7       	sub	r7,-20
80009540:	f8 c8 ff ec 	sub	r8,r12,-20
80009544:	30 0a       	mov	r10,0
80009546:	0f 0e       	ld.w	lr,r7++
80009548:	0d 0b       	ld.w	r11,r6++
8000954a:	fc 02 16 10 	lsr	r2,lr,0x10
8000954e:	f6 03 16 10 	lsr	r3,r11,0x10
80009552:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009556:	e4 03 01 03 	sub	r3,r2,r3
8000955a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000955e:	fc 0b 01 0b 	sub	r11,lr,r11
80009562:	f6 0a 00 0a 	add	r10,r11,r10
80009566:	b0 1a       	st.h	r8[0x2],r10
80009568:	b1 4a       	asr	r10,0x10
8000956a:	e6 0a 00 0a 	add	r10,r3,r10
8000956e:	b0 0a       	st.h	r8[0x0],r10
80009570:	2f c8       	sub	r8,-4
80009572:	b1 4a       	asr	r10,0x10
80009574:	08 36       	cp.w	r6,r4
80009576:	ce 83       	brcs	80009546 <__mdiff+0x66>
80009578:	c0 d8       	rjmp	80009592 <__mdiff+0xb2>
8000957a:	0f 0b       	ld.w	r11,r7++
8000957c:	f6 0e 16 10 	lsr	lr,r11,0x10
80009580:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009584:	16 0a       	add	r10,r11
80009586:	b0 1a       	st.h	r8[0x2],r10
80009588:	b1 4a       	asr	r10,0x10
8000958a:	1c 0a       	add	r10,lr
8000958c:	b0 0a       	st.h	r8[0x0],r10
8000958e:	2f c8       	sub	r8,-4
80009590:	b1 4a       	asr	r10,0x10
80009592:	0a 37       	cp.w	r7,r5
80009594:	cf 33       	brcs	8000957a <__mdiff+0x9a>
80009596:	c0 28       	rjmp	8000959a <__mdiff+0xba>
80009598:	20 19       	sub	r9,1
8000959a:	11 4a       	ld.w	r10,--r8
8000959c:	58 0a       	cp.w	r10,0
8000959e:	cf d0       	breq	80009598 <__mdiff+0xb8>
800095a0:	99 49       	st.w	r12[0x10],r9
800095a2:	d8 32       	popm	r0-r7,pc
800095a4:	30 0b       	mov	r11,0
800095a6:	f0 1f 00 04 	mcall	800095b4 <__mdiff+0xd4>
800095aa:	30 18       	mov	r8,1
800095ac:	99 48       	st.w	r12[0x10],r8
800095ae:	30 08       	mov	r8,0
800095b0:	99 58       	st.w	r12[0x14],r8
800095b2:	d8 32       	popm	r0-r7,pc
800095b4:	80 00       	ld.sh	r0,r0[0x0]
800095b6:	93 b4       	st.w	r9[0x2c],r4

800095b8 <__lshift>:
800095b8:	d4 31       	pushm	r0-r7,lr
800095ba:	16 97       	mov	r7,r11
800095bc:	76 46       	ld.w	r6,r11[0x10]
800095be:	f4 02 14 05 	asr	r2,r10,0x5
800095c2:	2f f6       	sub	r6,-1
800095c4:	14 93       	mov	r3,r10
800095c6:	18 94       	mov	r4,r12
800095c8:	04 06       	add	r6,r2
800095ca:	76 1b       	ld.w	r11,r11[0x4]
800095cc:	6e 28       	ld.w	r8,r7[0x8]
800095ce:	c0 38       	rjmp	800095d4 <__lshift+0x1c>
800095d0:	2f fb       	sub	r11,-1
800095d2:	a1 78       	lsl	r8,0x1
800095d4:	10 36       	cp.w	r6,r8
800095d6:	fe 99 ff fd 	brgt	800095d0 <__lshift+0x18>
800095da:	08 9c       	mov	r12,r4
800095dc:	f0 1f 00 1a 	mcall	80009644 <__lshift+0x8c>
800095e0:	30 09       	mov	r9,0
800095e2:	18 95       	mov	r5,r12
800095e4:	f8 c8 ff ec 	sub	r8,r12,-20
800095e8:	12 9a       	mov	r10,r9
800095ea:	c0 38       	rjmp	800095f0 <__lshift+0x38>
800095ec:	10 aa       	st.w	r8++,r10
800095ee:	2f f9       	sub	r9,-1
800095f0:	04 39       	cp.w	r9,r2
800095f2:	cf d5       	brlt	800095ec <__lshift+0x34>
800095f4:	6e 4b       	ld.w	r11,r7[0x10]
800095f6:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
800095fa:	2f bb       	sub	r11,-5
800095fc:	ee c9 ff ec 	sub	r9,r7,-20
80009600:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80009604:	58 03       	cp.w	r3,0
80009606:	c1 30       	breq	8000962c <__lshift+0x74>
80009608:	e6 0c 11 20 	rsub	r12,r3,32
8000960c:	30 0a       	mov	r10,0
8000960e:	72 02       	ld.w	r2,r9[0x0]
80009610:	e4 03 09 42 	lsl	r2,r2,r3
80009614:	04 4a       	or	r10,r2
80009616:	10 aa       	st.w	r8++,r10
80009618:	13 0a       	ld.w	r10,r9++
8000961a:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000961e:	16 39       	cp.w	r9,r11
80009620:	cf 73       	brcs	8000960e <__lshift+0x56>
80009622:	91 0a       	st.w	r8[0x0],r10
80009624:	58 0a       	cp.w	r10,0
80009626:	c0 70       	breq	80009634 <__lshift+0x7c>
80009628:	2f f6       	sub	r6,-1
8000962a:	c0 58       	rjmp	80009634 <__lshift+0x7c>
8000962c:	13 0a       	ld.w	r10,r9++
8000962e:	10 aa       	st.w	r8++,r10
80009630:	16 39       	cp.w	r9,r11
80009632:	cf d3       	brcs	8000962c <__lshift+0x74>
80009634:	08 9c       	mov	r12,r4
80009636:	20 16       	sub	r6,1
80009638:	0e 9b       	mov	r11,r7
8000963a:	8b 46       	st.w	r5[0x10],r6
8000963c:	f0 1f 00 03 	mcall	80009648 <__lshift+0x90>
80009640:	0a 9c       	mov	r12,r5
80009642:	d8 32       	popm	r0-r7,pc
80009644:	80 00       	ld.sh	r0,r0[0x0]
80009646:	93 b4       	st.w	r9[0x2c],r4
80009648:	80 00       	ld.sh	r0,r0[0x0]
8000964a:	93 7c       	st.w	r9[0x1c],r12

8000964c <__multiply>:
8000964c:	d4 31       	pushm	r0-r7,lr
8000964e:	20 2d       	sub	sp,8
80009650:	76 49       	ld.w	r9,r11[0x10]
80009652:	74 48       	ld.w	r8,r10[0x10]
80009654:	16 96       	mov	r6,r11
80009656:	14 95       	mov	r5,r10
80009658:	10 39       	cp.w	r9,r8
8000965a:	ec 08 17 50 	movlt	r8,r6
8000965e:	ea 06 17 50 	movlt	r6,r5
80009662:	f0 05 17 50 	movlt	r5,r8
80009666:	6c 28       	ld.w	r8,r6[0x8]
80009668:	76 43       	ld.w	r3,r11[0x10]
8000966a:	74 42       	ld.w	r2,r10[0x10]
8000966c:	76 1b       	ld.w	r11,r11[0x4]
8000966e:	e4 03 00 07 	add	r7,r2,r3
80009672:	10 37       	cp.w	r7,r8
80009674:	f7 bb 09 ff 	subgt	r11,-1
80009678:	f0 1f 00 36 	mcall	80009750 <__multiply+0x104>
8000967c:	ee c4 ff fb 	sub	r4,r7,-5
80009680:	f8 c9 ff ec 	sub	r9,r12,-20
80009684:	f8 04 00 24 	add	r4,r12,r4<<0x2
80009688:	30 0a       	mov	r10,0
8000968a:	12 98       	mov	r8,r9
8000968c:	c0 28       	rjmp	80009690 <__multiply+0x44>
8000968e:	10 aa       	st.w	r8++,r10
80009690:	08 38       	cp.w	r8,r4
80009692:	cf e3       	brcs	8000968e <__multiply+0x42>
80009694:	2f b3       	sub	r3,-5
80009696:	2f b2       	sub	r2,-5
80009698:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000969c:	ea 02 00 22 	add	r2,r5,r2<<0x2
800096a0:	ec cb ff ec 	sub	r11,r6,-20
800096a4:	50 12       	stdsp	sp[0x4],r2
800096a6:	ea ca ff ec 	sub	r10,r5,-20
800096aa:	c4 48       	rjmp	80009732 <__multiply+0xe6>
800096ac:	94 95       	ld.uh	r5,r10[0x2]
800096ae:	58 05       	cp.w	r5,0
800096b0:	c2 00       	breq	800096f0 <__multiply+0xa4>
800096b2:	12 98       	mov	r8,r9
800096b4:	16 96       	mov	r6,r11
800096b6:	30 0e       	mov	lr,0
800096b8:	50 09       	stdsp	sp[0x0],r9
800096ba:	0d 02       	ld.w	r2,r6++
800096bc:	e4 00 16 10 	lsr	r0,r2,0x10
800096c0:	70 01       	ld.w	r1,r8[0x0]
800096c2:	70 09       	ld.w	r9,r8[0x0]
800096c4:	b1 81       	lsr	r1,0x10
800096c6:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
800096ca:	e0 05 03 41 	mac	r1,r0,r5
800096ce:	ab 32       	mul	r2,r5
800096d0:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
800096d4:	00 02       	add	r2,r0
800096d6:	e4 0e 00 0e 	add	lr,r2,lr
800096da:	b0 1e       	st.h	r8[0x2],lr
800096dc:	b1 8e       	lsr	lr,0x10
800096de:	1c 01       	add	r1,lr
800096e0:	b0 01       	st.h	r8[0x0],r1
800096e2:	e2 0e 16 10 	lsr	lr,r1,0x10
800096e6:	2f c8       	sub	r8,-4
800096e8:	06 36       	cp.w	r6,r3
800096ea:	ce 83       	brcs	800096ba <__multiply+0x6e>
800096ec:	40 09       	lddsp	r9,sp[0x0]
800096ee:	91 0e       	st.w	r8[0x0],lr
800096f0:	94 86       	ld.uh	r6,r10[0x0]
800096f2:	58 06       	cp.w	r6,0
800096f4:	c1 d0       	breq	8000972e <__multiply+0xe2>
800096f6:	72 02       	ld.w	r2,r9[0x0]
800096f8:	12 98       	mov	r8,r9
800096fa:	16 9e       	mov	lr,r11
800096fc:	30 05       	mov	r5,0
800096fe:	b0 12       	st.h	r8[0x2],r2
80009700:	1d 01       	ld.w	r1,lr++
80009702:	90 82       	ld.uh	r2,r8[0x0]
80009704:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80009708:	ad 30       	mul	r0,r6
8000970a:	e0 02 00 02 	add	r2,r0,r2
8000970e:	e4 05 00 05 	add	r5,r2,r5
80009712:	b0 05       	st.h	r8[0x0],r5
80009714:	b1 85       	lsr	r5,0x10
80009716:	b1 81       	lsr	r1,0x10
80009718:	2f c8       	sub	r8,-4
8000971a:	ad 31       	mul	r1,r6
8000971c:	90 92       	ld.uh	r2,r8[0x2]
8000971e:	e2 02 00 02 	add	r2,r1,r2
80009722:	0a 02       	add	r2,r5
80009724:	e4 05 16 10 	lsr	r5,r2,0x10
80009728:	06 3e       	cp.w	lr,r3
8000972a:	ce a3       	brcs	800096fe <__multiply+0xb2>
8000972c:	91 02       	st.w	r8[0x0],r2
8000972e:	2f ca       	sub	r10,-4
80009730:	2f c9       	sub	r9,-4
80009732:	40 18       	lddsp	r8,sp[0x4]
80009734:	10 3a       	cp.w	r10,r8
80009736:	cb b3       	brcs	800096ac <__multiply+0x60>
80009738:	c0 28       	rjmp	8000973c <__multiply+0xf0>
8000973a:	20 17       	sub	r7,1
8000973c:	58 07       	cp.w	r7,0
8000973e:	e0 8a 00 05 	brle	80009748 <__multiply+0xfc>
80009742:	09 48       	ld.w	r8,--r4
80009744:	58 08       	cp.w	r8,0
80009746:	cf a0       	breq	8000973a <__multiply+0xee>
80009748:	99 47       	st.w	r12[0x10],r7
8000974a:	2f ed       	sub	sp,-8
8000974c:	d8 32       	popm	r0-r7,pc
8000974e:	00 00       	add	r0,r0
80009750:	80 00       	ld.sh	r0,r0[0x0]
80009752:	93 b4       	st.w	r9[0x2c],r4

80009754 <__i2b>:
80009754:	d4 21       	pushm	r4-r7,lr
80009756:	16 97       	mov	r7,r11
80009758:	30 1b       	mov	r11,1
8000975a:	f0 1f 00 04 	mcall	80009768 <__i2b+0x14>
8000975e:	30 19       	mov	r9,1
80009760:	99 57       	st.w	r12[0x14],r7
80009762:	99 49       	st.w	r12[0x10],r9
80009764:	d8 22       	popm	r4-r7,pc
80009766:	00 00       	add	r0,r0
80009768:	80 00       	ld.sh	r0,r0[0x0]
8000976a:	93 b4       	st.w	r9[0x2c],r4

8000976c <__multadd>:
8000976c:	d4 31       	pushm	r0-r7,lr
8000976e:	30 08       	mov	r8,0
80009770:	12 95       	mov	r5,r9
80009772:	16 97       	mov	r7,r11
80009774:	18 96       	mov	r6,r12
80009776:	76 44       	ld.w	r4,r11[0x10]
80009778:	f6 c9 ff ec 	sub	r9,r11,-20
8000977c:	72 0b       	ld.w	r11,r9[0x0]
8000977e:	f6 0c 16 10 	lsr	r12,r11,0x10
80009782:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009786:	f4 0c 02 4c 	mul	r12,r10,r12
8000978a:	f4 0b 03 45 	mac	r5,r10,r11
8000978e:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80009792:	b1 85       	lsr	r5,0x10
80009794:	18 05       	add	r5,r12
80009796:	ea 0c 15 10 	lsl	r12,r5,0x10
8000979a:	f8 0b 00 0b 	add	r11,r12,r11
8000979e:	12 ab       	st.w	r9++,r11
800097a0:	2f f8       	sub	r8,-1
800097a2:	b1 85       	lsr	r5,0x10
800097a4:	08 38       	cp.w	r8,r4
800097a6:	ce b5       	brlt	8000977c <__multadd+0x10>
800097a8:	58 05       	cp.w	r5,0
800097aa:	c1 d0       	breq	800097e4 <__multadd+0x78>
800097ac:	6e 28       	ld.w	r8,r7[0x8]
800097ae:	10 34       	cp.w	r4,r8
800097b0:	c1 45       	brlt	800097d8 <__multadd+0x6c>
800097b2:	6e 1b       	ld.w	r11,r7[0x4]
800097b4:	0c 9c       	mov	r12,r6
800097b6:	2f fb       	sub	r11,-1
800097b8:	f0 1f 00 0c 	mcall	800097e8 <__multadd+0x7c>
800097bc:	6e 4a       	ld.w	r10,r7[0x10]
800097be:	ee cb ff f4 	sub	r11,r7,-12
800097c2:	18 93       	mov	r3,r12
800097c4:	2f ea       	sub	r10,-2
800097c6:	2f 4c       	sub	r12,-12
800097c8:	a3 6a       	lsl	r10,0x2
800097ca:	f0 1f 00 09 	mcall	800097ec <__multadd+0x80>
800097ce:	0e 9b       	mov	r11,r7
800097d0:	0c 9c       	mov	r12,r6
800097d2:	f0 1f 00 08 	mcall	800097f0 <__multadd+0x84>
800097d6:	06 97       	mov	r7,r3
800097d8:	e8 c8 ff ff 	sub	r8,r4,-1
800097dc:	2f b4       	sub	r4,-5
800097de:	8f 48       	st.w	r7[0x10],r8
800097e0:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
800097e4:	0e 9c       	mov	r12,r7
800097e6:	d8 32       	popm	r0-r7,pc
800097e8:	80 00       	ld.sh	r0,r0[0x0]
800097ea:	93 b4       	st.w	r9[0x2c],r4
800097ec:	80 00       	ld.sh	r0,r0[0x0]
800097ee:	4f 48       	lddpc	r8,800099bc <_write_r+0x28>
800097f0:	80 00       	ld.sh	r0,r0[0x0]
800097f2:	93 7c       	st.w	r9[0x1c],r12

800097f4 <__pow5mult>:
800097f4:	d4 31       	pushm	r0-r7,lr
800097f6:	14 96       	mov	r6,r10
800097f8:	18 97       	mov	r7,r12
800097fa:	16 94       	mov	r4,r11
800097fc:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80009800:	c0 90       	breq	80009812 <__pow5mult+0x1e>
80009802:	20 18       	sub	r8,1
80009804:	4a 19       	lddpc	r9,80009888 <__pow5mult+0x94>
80009806:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000980a:	30 09       	mov	r9,0
8000980c:	f0 1f 00 20 	mcall	8000988c <__pow5mult+0x98>
80009810:	18 94       	mov	r4,r12
80009812:	a3 46       	asr	r6,0x2
80009814:	c3 70       	breq	80009882 <__pow5mult+0x8e>
80009816:	6e 95       	ld.w	r5,r7[0x24]
80009818:	58 05       	cp.w	r5,0
8000981a:	c0 91       	brne	8000982c <__pow5mult+0x38>
8000981c:	31 0c       	mov	r12,16
8000981e:	f0 1f 00 1d 	mcall	80009890 <__pow5mult+0x9c>
80009822:	99 35       	st.w	r12[0xc],r5
80009824:	8f 9c       	st.w	r7[0x24],r12
80009826:	99 15       	st.w	r12[0x4],r5
80009828:	99 25       	st.w	r12[0x8],r5
8000982a:	99 05       	st.w	r12[0x0],r5
8000982c:	6e 93       	ld.w	r3,r7[0x24]
8000982e:	66 25       	ld.w	r5,r3[0x8]
80009830:	58 05       	cp.w	r5,0
80009832:	c0 d1       	brne	8000984c <__pow5mult+0x58>
80009834:	e0 6b 02 71 	mov	r11,625
80009838:	0e 9c       	mov	r12,r7
8000983a:	f0 1f 00 17 	mcall	80009894 <__pow5mult+0xa0>
8000983e:	87 2c       	st.w	r3[0x8],r12
80009840:	30 08       	mov	r8,0
80009842:	18 95       	mov	r5,r12
80009844:	99 08       	st.w	r12[0x0],r8
80009846:	c0 38       	rjmp	8000984c <__pow5mult+0x58>
80009848:	06 9c       	mov	r12,r3
8000984a:	18 95       	mov	r5,r12
8000984c:	ed b6 00 00 	bld	r6,0x0
80009850:	c0 c1       	brne	80009868 <__pow5mult+0x74>
80009852:	08 9b       	mov	r11,r4
80009854:	0a 9a       	mov	r10,r5
80009856:	0e 9c       	mov	r12,r7
80009858:	f0 1f 00 10 	mcall	80009898 <__pow5mult+0xa4>
8000985c:	08 9b       	mov	r11,r4
8000985e:	18 93       	mov	r3,r12
80009860:	0e 9c       	mov	r12,r7
80009862:	06 94       	mov	r4,r3
80009864:	f0 1f 00 0e 	mcall	8000989c <__pow5mult+0xa8>
80009868:	a1 56       	asr	r6,0x1
8000986a:	c0 c0       	breq	80009882 <__pow5mult+0x8e>
8000986c:	6a 03       	ld.w	r3,r5[0x0]
8000986e:	58 03       	cp.w	r3,0
80009870:	ce c1       	brne	80009848 <__pow5mult+0x54>
80009872:	0a 9a       	mov	r10,r5
80009874:	0a 9b       	mov	r11,r5
80009876:	0e 9c       	mov	r12,r7
80009878:	f0 1f 00 08 	mcall	80009898 <__pow5mult+0xa4>
8000987c:	8b 0c       	st.w	r5[0x0],r12
8000987e:	99 03       	st.w	r12[0x0],r3
80009880:	ce 5b       	rjmp	8000984a <__pow5mult+0x56>
80009882:	08 9c       	mov	r12,r4
80009884:	d8 32       	popm	r0-r7,pc
80009886:	00 00       	add	r0,r0
80009888:	80 00       	ld.sh	r0,r0[0x0]
8000988a:	b1 a8       	sbr	r8,0x10
8000988c:	80 00       	ld.sh	r0,r0[0x0]
8000988e:	97 6c       	st.w	r11[0x18],r12
80009890:	80 00       	ld.sh	r0,r0[0x0]
80009892:	4a e0       	lddpc	r0,80009948 <__swrite+0x28>
80009894:	80 00       	ld.sh	r0,r0[0x0]
80009896:	97 54       	st.w	r11[0x14],r4
80009898:	80 00       	ld.sh	r0,r0[0x0]
8000989a:	96 4c       	ld.sh	r12,r11[0x8]
8000989c:	80 00       	ld.sh	r0,r0[0x0]
8000989e:	93 7c       	st.w	r9[0x1c],r12

800098a0 <__isinfd>:
800098a0:	14 98       	mov	r8,r10
800098a2:	fc 19 7f f0 	movh	r9,0x7ff0
800098a6:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800098aa:	f0 0b 11 00 	rsub	r11,r8,0
800098ae:	f7 e8 10 08 	or	r8,r11,r8
800098b2:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800098b6:	f2 08 01 08 	sub	r8,r9,r8
800098ba:	f0 0c 11 00 	rsub	r12,r8,0
800098be:	f9 e8 10 08 	or	r8,r12,r8
800098c2:	f0 0c 14 1f 	asr	r12,r8,0x1f
800098c6:	2f fc       	sub	r12,-1
800098c8:	5e fc       	retal	r12

800098ca <__isnand>:
800098ca:	14 98       	mov	r8,r10
800098cc:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800098d0:	f0 0c 11 00 	rsub	r12,r8,0
800098d4:	10 4c       	or	r12,r8
800098d6:	fc 18 7f f0 	movh	r8,0x7ff0
800098da:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800098de:	f0 0c 01 0c 	sub	r12,r8,r12
800098e2:	bf 9c       	lsr	r12,0x1f
800098e4:	5e fc       	retal	r12
800098e6:	d7 03       	nop

800098e8 <__sclose>:
800098e8:	d4 01       	pushm	lr
800098ea:	96 7b       	ld.sh	r11,r11[0xe]
800098ec:	f0 1f 00 02 	mcall	800098f4 <__sclose+0xc>
800098f0:	d8 02       	popm	pc
800098f2:	00 00       	add	r0,r0
800098f4:	80 00       	ld.sh	r0,r0[0x0]
800098f6:	9a 20       	ld.sh	r0,sp[0x4]

800098f8 <__sseek>:
800098f8:	d4 21       	pushm	r4-r7,lr
800098fa:	16 97       	mov	r7,r11
800098fc:	96 7b       	ld.sh	r11,r11[0xe]
800098fe:	f0 1f 00 08 	mcall	8000991c <__sseek+0x24>
80009902:	8e 68       	ld.sh	r8,r7[0xc]
80009904:	10 99       	mov	r9,r8
80009906:	ad c8       	cbr	r8,0xc
80009908:	ad a9       	sbr	r9,0xc
8000990a:	5b fc       	cp.w	r12,-1
8000990c:	ef f8 0c 06 	st.heq	r7[0xc],r8
80009910:	ef f9 1c 06 	st.hne	r7[0xc],r9
80009914:	ef fc 1a 15 	st.wne	r7[0x54],r12
80009918:	d8 22       	popm	r4-r7,pc
8000991a:	00 00       	add	r0,r0
8000991c:	80 00       	ld.sh	r0,r0[0x0]
8000991e:	9b 5c       	st.w	sp[0x14],r12

80009920 <__swrite>:
80009920:	d4 21       	pushm	r4-r7,lr
80009922:	96 68       	ld.sh	r8,r11[0xc]
80009924:	16 97       	mov	r7,r11
80009926:	14 95       	mov	r5,r10
80009928:	12 94       	mov	r4,r9
8000992a:	e2 18 01 00 	andl	r8,0x100,COH
8000992e:	18 96       	mov	r6,r12
80009930:	c0 60       	breq	8000993c <__swrite+0x1c>
80009932:	30 29       	mov	r9,2
80009934:	30 0a       	mov	r10,0
80009936:	96 7b       	ld.sh	r11,r11[0xe]
80009938:	f0 1f 00 06 	mcall	80009950 <__swrite+0x30>
8000993c:	8e 68       	ld.sh	r8,r7[0xc]
8000993e:	ad c8       	cbr	r8,0xc
80009940:	08 99       	mov	r9,r4
80009942:	0a 9a       	mov	r10,r5
80009944:	8e 7b       	ld.sh	r11,r7[0xe]
80009946:	0c 9c       	mov	r12,r6
80009948:	ae 68       	st.h	r7[0xc],r8
8000994a:	f0 1f 00 03 	mcall	80009954 <__swrite+0x34>
8000994e:	d8 22       	popm	r4-r7,pc
80009950:	80 00       	ld.sh	r0,r0[0x0]
80009952:	9b 5c       	st.w	sp[0x14],r12
80009954:	80 00       	ld.sh	r0,r0[0x0]
80009956:	99 94       	st.w	r12[0x24],r4

80009958 <__sread>:
80009958:	d4 21       	pushm	r4-r7,lr
8000995a:	16 97       	mov	r7,r11
8000995c:	96 7b       	ld.sh	r11,r11[0xe]
8000995e:	f0 1f 00 07 	mcall	80009978 <__sread+0x20>
80009962:	c0 65       	brlt	8000996e <__sread+0x16>
80009964:	6f 58       	ld.w	r8,r7[0x54]
80009966:	18 08       	add	r8,r12
80009968:	ef 48 00 54 	st.w	r7[84],r8
8000996c:	d8 22       	popm	r4-r7,pc
8000996e:	8e 68       	ld.sh	r8,r7[0xc]
80009970:	ad c8       	cbr	r8,0xc
80009972:	ae 68       	st.h	r7[0xc],r8
80009974:	d8 22       	popm	r4-r7,pc
80009976:	00 00       	add	r0,r0
80009978:	80 00       	ld.sh	r0,r0[0x0]
8000997a:	9b 88       	st.w	sp[0x20],r8

8000997c <strlen>:
8000997c:	30 09       	mov	r9,0
8000997e:	18 98       	mov	r8,r12
80009980:	c0 28       	rjmp	80009984 <strlen+0x8>
80009982:	2f f8       	sub	r8,-1
80009984:	11 8a       	ld.ub	r10,r8[0x0]
80009986:	f2 0a 18 00 	cp.b	r10,r9
8000998a:	cf c1       	brne	80009982 <strlen+0x6>
8000998c:	f0 0c 01 0c 	sub	r12,r8,r12
80009990:	5e fc       	retal	r12
80009992:	d7 03       	nop

80009994 <_write_r>:
80009994:	d4 21       	pushm	r4-r7,lr
80009996:	16 98       	mov	r8,r11
80009998:	18 97       	mov	r7,r12
8000999a:	10 9c       	mov	r12,r8
8000999c:	30 08       	mov	r8,0
8000999e:	14 9b       	mov	r11,r10
800099a0:	48 66       	lddpc	r6,800099b8 <_write_r+0x24>
800099a2:	12 9a       	mov	r10,r9
800099a4:	8d 08       	st.w	r6[0x0],r8
800099a6:	f0 1f 00 06 	mcall	800099bc <_write_r+0x28>
800099aa:	5b fc       	cp.w	r12,-1
800099ac:	c0 51       	brne	800099b6 <_write_r+0x22>
800099ae:	6c 08       	ld.w	r8,r6[0x0]
800099b0:	58 08       	cp.w	r8,0
800099b2:	ef f8 1a 03 	st.wne	r7[0xc],r8
800099b6:	d8 22       	popm	r4-r7,pc
800099b8:	00 00       	add	r0,r0
800099ba:	0a 2c       	rsub	r12,r5
800099bc:	80 00       	ld.sh	r0,r0[0x0]
800099be:	3f c0       	mov	r0,-4

800099c0 <_calloc_r>:
800099c0:	d4 21       	pushm	r4-r7,lr
800099c2:	f4 0b 02 4b 	mul	r11,r10,r11
800099c6:	f0 1f 00 15 	mcall	80009a18 <_calloc_r+0x58>
800099ca:	18 97       	mov	r7,r12
800099cc:	c2 30       	breq	80009a12 <_calloc_r+0x52>
800099ce:	f8 fa ff fc 	ld.w	r10,r12[-4]
800099d2:	e0 1a ff fc 	andl	r10,0xfffc
800099d6:	20 4a       	sub	r10,4
800099d8:	e0 4a 00 24 	cp.w	r10,36
800099dc:	e0 8b 00 18 	brhi	80009a0c <_calloc_r+0x4c>
800099e0:	18 98       	mov	r8,r12
800099e2:	59 3a       	cp.w	r10,19
800099e4:	e0 88 00 0f 	brls	80009a02 <_calloc_r+0x42>
800099e8:	30 09       	mov	r9,0
800099ea:	10 a9       	st.w	r8++,r9
800099ec:	10 a9       	st.w	r8++,r9
800099ee:	59 ba       	cp.w	r10,27
800099f0:	e0 88 00 09 	brls	80009a02 <_calloc_r+0x42>
800099f4:	10 a9       	st.w	r8++,r9
800099f6:	10 a9       	st.w	r8++,r9
800099f8:	e0 4a 00 24 	cp.w	r10,36
800099fc:	c0 31       	brne	80009a02 <_calloc_r+0x42>
800099fe:	10 a9       	st.w	r8++,r9
80009a00:	10 a9       	st.w	r8++,r9
80009a02:	30 09       	mov	r9,0
80009a04:	10 a9       	st.w	r8++,r9
80009a06:	91 19       	st.w	r8[0x4],r9
80009a08:	91 09       	st.w	r8[0x0],r9
80009a0a:	c0 48       	rjmp	80009a12 <_calloc_r+0x52>
80009a0c:	30 0b       	mov	r11,0
80009a0e:	f0 1f 00 04 	mcall	80009a1c <_calloc_r+0x5c>
80009a12:	0e 9c       	mov	r12,r7
80009a14:	d8 22       	popm	r4-r7,pc
80009a16:	00 00       	add	r0,r0
80009a18:	80 00       	ld.sh	r0,r0[0x0]
80009a1a:	4a f8       	lddpc	r8,80009ad4 <_fclose_r+0x8c>
80009a1c:	80 00       	ld.sh	r0,r0[0x0]
80009a1e:	50 90       	stdsp	sp[0x24],r0

80009a20 <_close_r>:
80009a20:	d4 21       	pushm	r4-r7,lr
80009a22:	30 08       	mov	r8,0
80009a24:	18 97       	mov	r7,r12
80009a26:	48 76       	lddpc	r6,80009a40 <_close_r+0x20>
80009a28:	16 9c       	mov	r12,r11
80009a2a:	8d 08       	st.w	r6[0x0],r8
80009a2c:	f0 1f 00 06 	mcall	80009a44 <_close_r+0x24>
80009a30:	5b fc       	cp.w	r12,-1
80009a32:	c0 51       	brne	80009a3c <_close_r+0x1c>
80009a34:	6c 08       	ld.w	r8,r6[0x0]
80009a36:	58 08       	cp.w	r8,0
80009a38:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009a3c:	d8 22       	popm	r4-r7,pc
80009a3e:	00 00       	add	r0,r0
80009a40:	00 00       	add	r0,r0
80009a42:	0a 2c       	rsub	r12,r5
80009a44:	80 00       	ld.sh	r0,r0[0x0]
80009a46:	55 50       	stdsp	sp[0x154],r0

80009a48 <_fclose_r>:
80009a48:	d4 21       	pushm	r4-r7,lr
80009a4a:	18 96       	mov	r6,r12
80009a4c:	16 97       	mov	r7,r11
80009a4e:	58 0b       	cp.w	r11,0
80009a50:	c0 31       	brne	80009a56 <_fclose_r+0xe>
80009a52:	16 95       	mov	r5,r11
80009a54:	c5 08       	rjmp	80009af4 <_fclose_r+0xac>
80009a56:	f0 1f 00 29 	mcall	80009af8 <_fclose_r+0xb0>
80009a5a:	58 06       	cp.w	r6,0
80009a5c:	c0 70       	breq	80009a6a <_fclose_r+0x22>
80009a5e:	6c 68       	ld.w	r8,r6[0x18]
80009a60:	58 08       	cp.w	r8,0
80009a62:	c0 41       	brne	80009a6a <_fclose_r+0x22>
80009a64:	0c 9c       	mov	r12,r6
80009a66:	f0 1f 00 26 	mcall	80009afc <_fclose_r+0xb4>
80009a6a:	4a 68       	lddpc	r8,80009b00 <_fclose_r+0xb8>
80009a6c:	10 37       	cp.w	r7,r8
80009a6e:	c0 31       	brne	80009a74 <_fclose_r+0x2c>
80009a70:	6c 07       	ld.w	r7,r6[0x0]
80009a72:	c0 a8       	rjmp	80009a86 <_fclose_r+0x3e>
80009a74:	4a 48       	lddpc	r8,80009b04 <_fclose_r+0xbc>
80009a76:	10 37       	cp.w	r7,r8
80009a78:	c0 31       	brne	80009a7e <_fclose_r+0x36>
80009a7a:	6c 17       	ld.w	r7,r6[0x4]
80009a7c:	c0 58       	rjmp	80009a86 <_fclose_r+0x3e>
80009a7e:	4a 38       	lddpc	r8,80009b08 <_fclose_r+0xc0>
80009a80:	10 37       	cp.w	r7,r8
80009a82:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80009a86:	8e 69       	ld.sh	r9,r7[0xc]
80009a88:	30 08       	mov	r8,0
80009a8a:	f0 09 19 00 	cp.h	r9,r8
80009a8e:	c0 51       	brne	80009a98 <_fclose_r+0x50>
80009a90:	f0 1f 00 1f 	mcall	80009b0c <_fclose_r+0xc4>
80009a94:	30 05       	mov	r5,0
80009a96:	c2 f8       	rjmp	80009af4 <_fclose_r+0xac>
80009a98:	0e 9b       	mov	r11,r7
80009a9a:	0c 9c       	mov	r12,r6
80009a9c:	f0 1f 00 1d 	mcall	80009b10 <_fclose_r+0xc8>
80009aa0:	6e c8       	ld.w	r8,r7[0x30]
80009aa2:	18 95       	mov	r5,r12
80009aa4:	58 08       	cp.w	r8,0
80009aa6:	c0 60       	breq	80009ab2 <_fclose_r+0x6a>
80009aa8:	6e 8b       	ld.w	r11,r7[0x20]
80009aaa:	0c 9c       	mov	r12,r6
80009aac:	5d 18       	icall	r8
80009aae:	f9 b5 05 ff 	movlt	r5,-1
80009ab2:	8e 68       	ld.sh	r8,r7[0xc]
80009ab4:	ed b8 00 07 	bld	r8,0x7
80009ab8:	c0 51       	brne	80009ac2 <_fclose_r+0x7a>
80009aba:	6e 4b       	ld.w	r11,r7[0x10]
80009abc:	0c 9c       	mov	r12,r6
80009abe:	f0 1f 00 16 	mcall	80009b14 <_fclose_r+0xcc>
80009ac2:	6e db       	ld.w	r11,r7[0x34]
80009ac4:	58 0b       	cp.w	r11,0
80009ac6:	c0 a0       	breq	80009ada <_fclose_r+0x92>
80009ac8:	ee c8 ff bc 	sub	r8,r7,-68
80009acc:	10 3b       	cp.w	r11,r8
80009ace:	c0 40       	breq	80009ad6 <_fclose_r+0x8e>
80009ad0:	0c 9c       	mov	r12,r6
80009ad2:	f0 1f 00 11 	mcall	80009b14 <_fclose_r+0xcc>
80009ad6:	30 08       	mov	r8,0
80009ad8:	8f d8       	st.w	r7[0x34],r8
80009ada:	6f 2b       	ld.w	r11,r7[0x48]
80009adc:	58 0b       	cp.w	r11,0
80009ade:	c0 70       	breq	80009aec <_fclose_r+0xa4>
80009ae0:	0c 9c       	mov	r12,r6
80009ae2:	f0 1f 00 0d 	mcall	80009b14 <_fclose_r+0xcc>
80009ae6:	30 08       	mov	r8,0
80009ae8:	ef 48 00 48 	st.w	r7[72],r8
80009aec:	30 08       	mov	r8,0
80009aee:	ae 68       	st.h	r7[0xc],r8
80009af0:	f0 1f 00 07 	mcall	80009b0c <_fclose_r+0xc4>
80009af4:	0a 9c       	mov	r12,r5
80009af6:	d8 22       	popm	r4-r7,pc
80009af8:	80 00       	ld.sh	r0,r0[0x0]
80009afa:	8a 60       	ld.sh	r0,r5[0xc]
80009afc:	80 00       	ld.sh	r0,r0[0x0]
80009afe:	8b 24       	st.w	r5[0x8],r4
80009b00:	80 00       	ld.sh	r0,r0[0x0]
80009b02:	b1 08       	ld.d	r8,r8
80009b04:	80 00       	ld.sh	r0,r0[0x0]
80009b06:	b1 28       	st.d	r8++,r8
80009b08:	80 00       	ld.sh	r0,r0[0x0]
80009b0a:	b1 48       	asr	r8,0x10
80009b0c:	80 00       	ld.sh	r0,r0[0x0]
80009b0e:	8a 62       	ld.sh	r2,r5[0xc]
80009b10:	80 00       	ld.sh	r0,r0[0x0]
80009b12:	89 48       	st.w	r4[0x10],r8
80009b14:	80 00       	ld.sh	r0,r0[0x0]
80009b16:	8c 7c       	ld.sh	r12,r6[0xe]

80009b18 <fclose>:
80009b18:	d4 01       	pushm	lr
80009b1a:	48 48       	lddpc	r8,80009b28 <fclose+0x10>
80009b1c:	18 9b       	mov	r11,r12
80009b1e:	70 0c       	ld.w	r12,r8[0x0]
80009b20:	f0 1f 00 03 	mcall	80009b2c <fclose+0x14>
80009b24:	d8 02       	popm	pc
80009b26:	00 00       	add	r0,r0
80009b28:	00 00       	add	r0,r0
80009b2a:	01 ec       	ld.ub	r12,r0[0x6]
80009b2c:	80 00       	ld.sh	r0,r0[0x0]
80009b2e:	9a 48       	ld.sh	r8,sp[0x8]

80009b30 <_fstat_r>:
80009b30:	d4 21       	pushm	r4-r7,lr
80009b32:	16 98       	mov	r8,r11
80009b34:	18 97       	mov	r7,r12
80009b36:	10 9c       	mov	r12,r8
80009b38:	30 08       	mov	r8,0
80009b3a:	48 76       	lddpc	r6,80009b54 <_fstat_r+0x24>
80009b3c:	14 9b       	mov	r11,r10
80009b3e:	8d 08       	st.w	r6[0x0],r8
80009b40:	f0 1f 00 06 	mcall	80009b58 <_fstat_r+0x28>
80009b44:	5b fc       	cp.w	r12,-1
80009b46:	c0 51       	brne	80009b50 <_fstat_r+0x20>
80009b48:	6c 08       	ld.w	r8,r6[0x0]
80009b4a:	58 08       	cp.w	r8,0
80009b4c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009b50:	d8 22       	popm	r4-r7,pc
80009b52:	00 00       	add	r0,r0
80009b54:	00 00       	add	r0,r0
80009b56:	0a 2c       	rsub	r12,r5
80009b58:	80 00       	ld.sh	r0,r0[0x0]
80009b5a:	55 b0       	stdsp	sp[0x16c],r0

80009b5c <_lseek_r>:
80009b5c:	d4 21       	pushm	r4-r7,lr
80009b5e:	16 98       	mov	r8,r11
80009b60:	18 97       	mov	r7,r12
80009b62:	10 9c       	mov	r12,r8
80009b64:	30 08       	mov	r8,0
80009b66:	14 9b       	mov	r11,r10
80009b68:	48 66       	lddpc	r6,80009b80 <_lseek_r+0x24>
80009b6a:	12 9a       	mov	r10,r9
80009b6c:	8d 08       	st.w	r6[0x0],r8
80009b6e:	f0 1f 00 06 	mcall	80009b84 <_lseek_r+0x28>
80009b72:	5b fc       	cp.w	r12,-1
80009b74:	c0 51       	brne	80009b7e <_lseek_r+0x22>
80009b76:	6c 08       	ld.w	r8,r6[0x0]
80009b78:	58 08       	cp.w	r8,0
80009b7a:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009b7e:	d8 22       	popm	r4-r7,pc
80009b80:	00 00       	add	r0,r0
80009b82:	0a 2c       	rsub	r12,r5
80009b84:	80 00       	ld.sh	r0,r0[0x0]
80009b86:	55 68       	stdsp	sp[0x158],r8

80009b88 <_read_r>:
80009b88:	d4 21       	pushm	r4-r7,lr
80009b8a:	16 98       	mov	r8,r11
80009b8c:	18 97       	mov	r7,r12
80009b8e:	10 9c       	mov	r12,r8
80009b90:	30 08       	mov	r8,0
80009b92:	14 9b       	mov	r11,r10
80009b94:	48 66       	lddpc	r6,80009bac <_read_r+0x24>
80009b96:	12 9a       	mov	r10,r9
80009b98:	8d 08       	st.w	r6[0x0],r8
80009b9a:	f0 1f 00 06 	mcall	80009bb0 <_read_r+0x28>
80009b9e:	5b fc       	cp.w	r12,-1
80009ba0:	c0 51       	brne	80009baa <_read_r+0x22>
80009ba2:	6c 08       	ld.w	r8,r6[0x0]
80009ba4:	58 08       	cp.w	r8,0
80009ba6:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009baa:	d8 22       	popm	r4-r7,pc
80009bac:	00 00       	add	r0,r0
80009bae:	0a 2c       	rsub	r12,r5
80009bb0:	80 00       	ld.sh	r0,r0[0x0]
80009bb2:	3e a4       	mov	r4,-22

80009bb4 <__avr32_f64_mul>:
80009bb4:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80009bb8:	e0 80 00 dc 	breq	80009d70 <__avr32_f64_mul_op1_zero>
80009bbc:	d4 21       	pushm	r4-r7,lr
80009bbe:	f7 e9 20 0e 	eor	lr,r11,r9
80009bc2:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80009bc6:	30 15       	mov	r5,1
80009bc8:	c4 30       	breq	80009c4e <__avr32_f64_mul_op1_subnormal>
80009bca:	ab 6b       	lsl	r11,0xa
80009bcc:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80009bd0:	ab 6a       	lsl	r10,0xa
80009bd2:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80009bd6:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80009bda:	c5 c0       	breq	80009c92 <__avr32_f64_mul_op2_subnormal>
80009bdc:	a1 78       	lsl	r8,0x1
80009bde:	5c f9       	rol	r9
80009be0:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80009be4:	e0 47 07 ff 	cp.w	r7,2047
80009be8:	c7 70       	breq	80009cd6 <__avr32_f64_mul_op_nan_or_inf>
80009bea:	e0 46 07 ff 	cp.w	r6,2047
80009bee:	c7 40       	breq	80009cd6 <__avr32_f64_mul_op_nan_or_inf>
80009bf0:	ee 06 00 0c 	add	r12,r7,r6
80009bf4:	e0 2c 03 fe 	sub	r12,1022
80009bf8:	f6 08 06 44 	mulu.d	r4,r11,r8
80009bfc:	f4 09 07 44 	macu.d	r4,r10,r9
80009c00:	f4 08 06 46 	mulu.d	r6,r10,r8
80009c04:	f6 09 06 4a 	mulu.d	r10,r11,r9
80009c08:	08 07       	add	r7,r4
80009c0a:	f4 05 00 4a 	adc	r10,r10,r5
80009c0e:	5c 0b       	acr	r11
80009c10:	ed bb 00 14 	bld	r11,0x14
80009c14:	c0 50       	breq	80009c1e <__avr32_f64_mul+0x6a>
80009c16:	a1 77       	lsl	r7,0x1
80009c18:	5c fa       	rol	r10
80009c1a:	5c fb       	rol	r11
80009c1c:	20 1c       	sub	r12,1
80009c1e:	58 0c       	cp.w	r12,0
80009c20:	e0 8a 00 6f 	brle	80009cfe <__avr32_f64_mul_res_subnormal>
80009c24:	e0 4c 07 ff 	cp.w	r12,2047
80009c28:	e0 84 00 9c 	brge	80009d60 <__avr32_f64_mul_res_inf>
80009c2c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80009c30:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80009c34:	ef e6 12 17 	or	r7,r7,r6>>0x1
80009c38:	ee 17 80 00 	eorh	r7,0x8000
80009c3c:	f1 b7 04 20 	satu	r7,0x1
80009c40:	0e 0a       	add	r10,r7
80009c42:	5c 0b       	acr	r11
80009c44:	ed be 00 1f 	bld	lr,0x1f
80009c48:	ef bb 00 1f 	bst	r11,0x1f
80009c4c:	d8 22       	popm	r4-r7,pc

80009c4e <__avr32_f64_mul_op1_subnormal>:
80009c4e:	e4 1b 00 0f 	andh	r11,0xf
80009c52:	f4 0c 12 00 	clz	r12,r10
80009c56:	f6 06 12 00 	clz	r6,r11
80009c5a:	f7 bc 03 e1 	sublo	r12,-31
80009c5e:	f8 06 17 30 	movlo	r6,r12
80009c62:	f7 b6 02 01 	subhs	r6,1
80009c66:	e0 46 00 20 	cp.w	r6,32
80009c6a:	c0 d4       	brge	80009c84 <__avr32_f64_mul_op1_subnormal+0x36>
80009c6c:	ec 0c 11 20 	rsub	r12,r6,32
80009c70:	f6 06 09 4b 	lsl	r11,r11,r6
80009c74:	f4 0c 0a 4c 	lsr	r12,r10,r12
80009c78:	18 4b       	or	r11,r12
80009c7a:	f4 06 09 4a 	lsl	r10,r10,r6
80009c7e:	20 b6       	sub	r6,11
80009c80:	0c 17       	sub	r7,r6
80009c82:	ca ab       	rjmp	80009bd6 <__avr32_f64_mul+0x22>
80009c84:	f4 06 09 4b 	lsl	r11,r10,r6
80009c88:	c6 40       	breq	80009d50 <__avr32_f64_mul_res_zero>
80009c8a:	30 0a       	mov	r10,0
80009c8c:	20 b6       	sub	r6,11
80009c8e:	0c 17       	sub	r7,r6
80009c90:	ca 3b       	rjmp	80009bd6 <__avr32_f64_mul+0x22>

80009c92 <__avr32_f64_mul_op2_subnormal>:
80009c92:	e4 19 00 0f 	andh	r9,0xf
80009c96:	f0 0c 12 00 	clz	r12,r8
80009c9a:	f2 05 12 00 	clz	r5,r9
80009c9e:	f7 bc 03 ea 	sublo	r12,-22
80009ca2:	f8 05 17 30 	movlo	r5,r12
80009ca6:	f7 b5 02 0a 	subhs	r5,10
80009caa:	e0 45 00 20 	cp.w	r5,32
80009cae:	c0 d4       	brge	80009cc8 <__avr32_f64_mul_op2_subnormal+0x36>
80009cb0:	ea 0c 11 20 	rsub	r12,r5,32
80009cb4:	f2 05 09 49 	lsl	r9,r9,r5
80009cb8:	f0 0c 0a 4c 	lsr	r12,r8,r12
80009cbc:	18 49       	or	r9,r12
80009cbe:	f0 05 09 48 	lsl	r8,r8,r5
80009cc2:	20 25       	sub	r5,2
80009cc4:	0a 16       	sub	r6,r5
80009cc6:	c8 fb       	rjmp	80009be4 <__avr32_f64_mul+0x30>
80009cc8:	f0 05 09 49 	lsl	r9,r8,r5
80009ccc:	c4 20       	breq	80009d50 <__avr32_f64_mul_res_zero>
80009cce:	30 08       	mov	r8,0
80009cd0:	20 25       	sub	r5,2
80009cd2:	0a 16       	sub	r6,r5
80009cd4:	c8 8b       	rjmp	80009be4 <__avr32_f64_mul+0x30>

80009cd6 <__avr32_f64_mul_op_nan_or_inf>:
80009cd6:	e4 19 00 0f 	andh	r9,0xf
80009cda:	e4 1b 00 0f 	andh	r11,0xf
80009cde:	14 4b       	or	r11,r10
80009ce0:	10 49       	or	r9,r8
80009ce2:	e0 47 07 ff 	cp.w	r7,2047
80009ce6:	c0 91       	brne	80009cf8 <__avr32_f64_mul_op1_not_naninf>
80009ce8:	58 0b       	cp.w	r11,0
80009cea:	c3 81       	brne	80009d5a <__avr32_f64_mul_res_nan>
80009cec:	e0 46 07 ff 	cp.w	r6,2047
80009cf0:	c3 81       	brne	80009d60 <__avr32_f64_mul_res_inf>
80009cf2:	58 09       	cp.w	r9,0
80009cf4:	c3 60       	breq	80009d60 <__avr32_f64_mul_res_inf>
80009cf6:	c3 28       	rjmp	80009d5a <__avr32_f64_mul_res_nan>

80009cf8 <__avr32_f64_mul_op1_not_naninf>:
80009cf8:	58 09       	cp.w	r9,0
80009cfa:	c3 30       	breq	80009d60 <__avr32_f64_mul_res_inf>
80009cfc:	c2 f8       	rjmp	80009d5a <__avr32_f64_mul_res_nan>

80009cfe <__avr32_f64_mul_res_subnormal>:
80009cfe:	5c 3c       	neg	r12
80009d00:	2f fc       	sub	r12,-1
80009d02:	f1 bc 04 c0 	satu	r12,0x6
80009d06:	e0 4c 00 20 	cp.w	r12,32
80009d0a:	c1 14       	brge	80009d2c <__avr32_f64_mul_res_subnormal+0x2e>
80009d0c:	f8 08 11 20 	rsub	r8,r12,32
80009d10:	0e 46       	or	r6,r7
80009d12:	ee 0c 0a 47 	lsr	r7,r7,r12
80009d16:	f4 08 09 49 	lsl	r9,r10,r8
80009d1a:	12 47       	or	r7,r9
80009d1c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009d20:	f6 08 09 49 	lsl	r9,r11,r8
80009d24:	12 4a       	or	r10,r9
80009d26:	f6 0c 0a 4b 	lsr	r11,r11,r12
80009d2a:	c8 3b       	rjmp	80009c30 <__avr32_f64_mul+0x7c>
80009d2c:	f8 08 11 20 	rsub	r8,r12,32
80009d30:	f9 b9 00 00 	moveq	r9,0
80009d34:	c0 30       	breq	80009d3a <__avr32_f64_mul_res_subnormal+0x3c>
80009d36:	f6 08 09 49 	lsl	r9,r11,r8
80009d3a:	0e 46       	or	r6,r7
80009d3c:	ed ea 10 16 	or	r6,r6,r10<<0x1
80009d40:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009d44:	f3 ea 10 07 	or	r7,r9,r10
80009d48:	f6 0c 0a 4a 	lsr	r10,r11,r12
80009d4c:	30 0b       	mov	r11,0
80009d4e:	c7 1b       	rjmp	80009c30 <__avr32_f64_mul+0x7c>

80009d50 <__avr32_f64_mul_res_zero>:
80009d50:	1c 9b       	mov	r11,lr
80009d52:	e6 1b 80 00 	andh	r11,0x8000,COH
80009d56:	30 0a       	mov	r10,0
80009d58:	d8 22       	popm	r4-r7,pc

80009d5a <__avr32_f64_mul_res_nan>:
80009d5a:	3f fb       	mov	r11,-1
80009d5c:	3f fa       	mov	r10,-1
80009d5e:	d8 22       	popm	r4-r7,pc

80009d60 <__avr32_f64_mul_res_inf>:
80009d60:	f0 6b 00 00 	mov	r11,-1048576
80009d64:	ed be 00 1f 	bld	lr,0x1f
80009d68:	ef bb 00 1f 	bst	r11,0x1f
80009d6c:	30 0a       	mov	r10,0
80009d6e:	d8 22       	popm	r4-r7,pc

80009d70 <__avr32_f64_mul_op1_zero>:
80009d70:	f7 e9 20 0b 	eor	r11,r11,r9
80009d74:	e6 1b 80 00 	andh	r11,0x8000,COH
80009d78:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80009d7c:	e0 4c 07 ff 	cp.w	r12,2047
80009d80:	5e 1c       	retne	r12
80009d82:	3f fa       	mov	r10,-1
80009d84:	3f fb       	mov	r11,-1
80009d86:	5e fc       	retal	r12

80009d88 <__avr32_f64_sub_from_add>:
80009d88:	ee 19 80 00 	eorh	r9,0x8000

80009d8c <__avr32_f64_sub>:
80009d8c:	f7 e9 20 0c 	eor	r12,r11,r9
80009d90:	e0 86 00 ca 	brmi	80009f24 <__avr32_f64_add_from_sub>
80009d94:	eb cd 40 e0 	pushm	r5-r7,lr
80009d98:	16 9c       	mov	r12,r11
80009d9a:	e6 1c 80 00 	andh	r12,0x8000,COH
80009d9e:	bf db       	cbr	r11,0x1f
80009da0:	bf d9       	cbr	r9,0x1f
80009da2:	10 3a       	cp.w	r10,r8
80009da4:	f2 0b 13 00 	cpc	r11,r9
80009da8:	c0 92       	brcc	80009dba <__avr32_f64_sub+0x2e>
80009daa:	16 97       	mov	r7,r11
80009dac:	12 9b       	mov	r11,r9
80009dae:	0e 99       	mov	r9,r7
80009db0:	14 97       	mov	r7,r10
80009db2:	10 9a       	mov	r10,r8
80009db4:	0e 98       	mov	r8,r7
80009db6:	ee 1c 80 00 	eorh	r12,0x8000
80009dba:	f6 07 16 14 	lsr	r7,r11,0x14
80009dbe:	ab 7b       	lsl	r11,0xb
80009dc0:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80009dc4:	ab 7a       	lsl	r10,0xb
80009dc6:	bf bb       	sbr	r11,0x1f
80009dc8:	f2 06 16 14 	lsr	r6,r9,0x14
80009dcc:	c4 40       	breq	80009e54 <__avr32_f64_sub_opL_subnormal>
80009dce:	ab 79       	lsl	r9,0xb
80009dd0:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009dd4:	ab 78       	lsl	r8,0xb
80009dd6:	bf b9       	sbr	r9,0x1f

80009dd8 <__avr32_f64_sub_opL_subnormal_done>:
80009dd8:	e0 47 07 ff 	cp.w	r7,2047
80009ddc:	c4 f0       	breq	80009e7a <__avr32_f64_sub_opH_nan_or_inf>
80009dde:	0e 26       	rsub	r6,r7
80009de0:	c1 20       	breq	80009e04 <__avr32_f64_sub_shift_done>
80009de2:	ec 05 11 20 	rsub	r5,r6,32
80009de6:	e0 46 00 20 	cp.w	r6,32
80009dea:	c7 c2       	brcc	80009ee2 <__avr32_f64_sub_longshift>
80009dec:	f0 05 09 4e 	lsl	lr,r8,r5
80009df0:	f2 05 09 45 	lsl	r5,r9,r5
80009df4:	f0 06 0a 48 	lsr	r8,r8,r6
80009df8:	f2 06 0a 49 	lsr	r9,r9,r6
80009dfc:	0a 48       	or	r8,r5
80009dfe:	58 0e       	cp.w	lr,0
80009e00:	5f 1e       	srne	lr
80009e02:	1c 48       	or	r8,lr

80009e04 <__avr32_f64_sub_shift_done>:
80009e04:	10 1a       	sub	r10,r8
80009e06:	f6 09 01 4b 	sbc	r11,r11,r9
80009e0a:	f6 06 12 00 	clz	r6,r11
80009e0e:	c0 e0       	breq	80009e2a <__avr32_f64_sub_longnormalize_done>
80009e10:	c7 83       	brcs	80009f00 <__avr32_f64_sub_longnormalize>
80009e12:	ec 0e 11 20 	rsub	lr,r6,32
80009e16:	f6 06 09 4b 	lsl	r11,r11,r6
80009e1a:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009e1e:	1c 4b       	or	r11,lr
80009e20:	f4 06 09 4a 	lsl	r10,r10,r6
80009e24:	0c 17       	sub	r7,r6
80009e26:	e0 8a 00 39 	brle	80009e98 <__avr32_f64_sub_subnormal_result>

80009e2a <__avr32_f64_sub_longnormalize_done>:
80009e2a:	f4 09 15 15 	lsl	r9,r10,0x15
80009e2e:	ab 9a       	lsr	r10,0xb
80009e30:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80009e34:	ab 9b       	lsr	r11,0xb
80009e36:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009e3a:	18 4b       	or	r11,r12

80009e3c <__avr32_f64_sub_round>:
80009e3c:	fc 17 80 00 	movh	r7,0x8000
80009e40:	ed ba 00 00 	bld	r10,0x0
80009e44:	f7 b7 01 ff 	subne	r7,-1
80009e48:	0e 39       	cp.w	r9,r7
80009e4a:	5f 29       	srhs	r9
80009e4c:	12 0a       	add	r10,r9
80009e4e:	5c 0b       	acr	r11
80009e50:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009e54 <__avr32_f64_sub_opL_subnormal>:
80009e54:	ab 79       	lsl	r9,0xb
80009e56:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009e5a:	ab 78       	lsl	r8,0xb
80009e5c:	f3 e8 10 0e 	or	lr,r9,r8
80009e60:	f9 b6 01 01 	movne	r6,1
80009e64:	ee 0e 11 00 	rsub	lr,r7,0
80009e68:	f9 b7 00 01 	moveq	r7,1
80009e6c:	ef bb 00 1f 	bst	r11,0x1f
80009e70:	f7 ea 10 0e 	or	lr,r11,r10
80009e74:	f9 b7 00 00 	moveq	r7,0
80009e78:	cb 0b       	rjmp	80009dd8 <__avr32_f64_sub_opL_subnormal_done>

80009e7a <__avr32_f64_sub_opH_nan_or_inf>:
80009e7a:	bf db       	cbr	r11,0x1f
80009e7c:	f7 ea 10 0e 	or	lr,r11,r10
80009e80:	c0 81       	brne	80009e90 <__avr32_f64_sub_return_nan>
80009e82:	e0 46 07 ff 	cp.w	r6,2047
80009e86:	c0 50       	breq	80009e90 <__avr32_f64_sub_return_nan>
80009e88:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80009e8c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009e90 <__avr32_f64_sub_return_nan>:
80009e90:	3f fa       	mov	r10,-1
80009e92:	3f fb       	mov	r11,-1
80009e94:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009e98 <__avr32_f64_sub_subnormal_result>:
80009e98:	5c 37       	neg	r7
80009e9a:	2f f7       	sub	r7,-1
80009e9c:	f1 b7 04 c0 	satu	r7,0x6
80009ea0:	e0 47 00 20 	cp.w	r7,32
80009ea4:	c1 14       	brge	80009ec6 <__avr32_f64_sub_subnormal_result+0x2e>
80009ea6:	ee 08 11 20 	rsub	r8,r7,32
80009eaa:	f4 08 09 49 	lsl	r9,r10,r8
80009eae:	5f 16       	srne	r6
80009eb0:	f4 07 0a 4a 	lsr	r10,r10,r7
80009eb4:	0c 4a       	or	r10,r6
80009eb6:	f6 08 09 49 	lsl	r9,r11,r8
80009eba:	f5 e9 10 0a 	or	r10,r10,r9
80009ebe:	f4 07 0a 4b 	lsr	r11,r10,r7
80009ec2:	30 07       	mov	r7,0
80009ec4:	cb 3b       	rjmp	80009e2a <__avr32_f64_sub_longnormalize_done>
80009ec6:	ee 08 11 40 	rsub	r8,r7,64
80009eca:	f6 08 09 49 	lsl	r9,r11,r8
80009ece:	14 49       	or	r9,r10
80009ed0:	5f 16       	srne	r6
80009ed2:	f6 07 0a 4a 	lsr	r10,r11,r7
80009ed6:	0c 4a       	or	r10,r6
80009ed8:	30 0b       	mov	r11,0
80009eda:	30 07       	mov	r7,0
80009edc:	ca 7b       	rjmp	80009e2a <__avr32_f64_sub_longnormalize_done>
80009ede:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009ee2 <__avr32_f64_sub_longshift>:
80009ee2:	f1 b6 04 c0 	satu	r6,0x6
80009ee6:	f0 0e 17 00 	moveq	lr,r8
80009eea:	c0 40       	breq	80009ef2 <__avr32_f64_sub_longshift+0x10>
80009eec:	f2 05 09 4e 	lsl	lr,r9,r5
80009ef0:	10 4e       	or	lr,r8
80009ef2:	f2 06 0a 48 	lsr	r8,r9,r6
80009ef6:	30 09       	mov	r9,0
80009ef8:	58 0e       	cp.w	lr,0
80009efa:	5f 1e       	srne	lr
80009efc:	1c 48       	or	r8,lr
80009efe:	c8 3b       	rjmp	80009e04 <__avr32_f64_sub_shift_done>

80009f00 <__avr32_f64_sub_longnormalize>:
80009f00:	f4 06 12 00 	clz	r6,r10
80009f04:	f9 b7 03 00 	movlo	r7,0
80009f08:	f9 b6 03 00 	movlo	r6,0
80009f0c:	f9 bc 03 00 	movlo	r12,0
80009f10:	f7 b6 02 e0 	subhs	r6,-32
80009f14:	f4 06 09 4b 	lsl	r11,r10,r6
80009f18:	30 0a       	mov	r10,0
80009f1a:	0c 17       	sub	r7,r6
80009f1c:	fe 9a ff be 	brle	80009e98 <__avr32_f64_sub_subnormal_result>
80009f20:	c8 5b       	rjmp	80009e2a <__avr32_f64_sub_longnormalize_done>
	...

80009f24 <__avr32_f64_add_from_sub>:
80009f24:	ee 19 80 00 	eorh	r9,0x8000

80009f28 <__avr32_f64_add>:
80009f28:	f7 e9 20 0c 	eor	r12,r11,r9
80009f2c:	fe 96 ff 2e 	brmi	80009d88 <__avr32_f64_sub_from_add>
80009f30:	eb cd 40 e0 	pushm	r5-r7,lr
80009f34:	16 9c       	mov	r12,r11
80009f36:	e6 1c 80 00 	andh	r12,0x8000,COH
80009f3a:	bf db       	cbr	r11,0x1f
80009f3c:	bf d9       	cbr	r9,0x1f
80009f3e:	12 3b       	cp.w	r11,r9
80009f40:	c0 72       	brcc	80009f4e <__avr32_f64_add+0x26>
80009f42:	16 97       	mov	r7,r11
80009f44:	12 9b       	mov	r11,r9
80009f46:	0e 99       	mov	r9,r7
80009f48:	14 97       	mov	r7,r10
80009f4a:	10 9a       	mov	r10,r8
80009f4c:	0e 98       	mov	r8,r7
80009f4e:	30 0e       	mov	lr,0
80009f50:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80009f54:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80009f58:	b5 ab       	sbr	r11,0x14
80009f5a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80009f5e:	c6 20       	breq	8000a022 <__avr32_f64_add_op2_subnormal>
80009f60:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80009f64:	b5 a9       	sbr	r9,0x14
80009f66:	e0 47 07 ff 	cp.w	r7,2047
80009f6a:	c2 80       	breq	80009fba <__avr32_f64_add_opH_nan_or_inf>
80009f6c:	0e 26       	rsub	r6,r7
80009f6e:	c1 20       	breq	80009f92 <__avr32_f64_add_shift_done>
80009f70:	e0 46 00 36 	cp.w	r6,54
80009f74:	c1 52       	brcc	80009f9e <__avr32_f64_add_res_of_done>
80009f76:	ec 05 11 20 	rsub	r5,r6,32
80009f7a:	e0 46 00 20 	cp.w	r6,32
80009f7e:	c3 52       	brcc	80009fe8 <__avr32_f64_add_longshift>
80009f80:	f0 05 09 4e 	lsl	lr,r8,r5
80009f84:	f2 05 09 45 	lsl	r5,r9,r5
80009f88:	f0 06 0a 48 	lsr	r8,r8,r6
80009f8c:	f2 06 0a 49 	lsr	r9,r9,r6
80009f90:	0a 48       	or	r8,r5

80009f92 <__avr32_f64_add_shift_done>:
80009f92:	10 0a       	add	r10,r8
80009f94:	f6 09 00 4b 	adc	r11,r11,r9
80009f98:	ed bb 00 15 	bld	r11,0x15
80009f9c:	c3 40       	breq	8000a004 <__avr32_f64_add_res_of>

80009f9e <__avr32_f64_add_res_of_done>:
80009f9e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009fa2:	18 4b       	or	r11,r12

80009fa4 <__avr32_f64_add_round>:
80009fa4:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80009fa8:	18 4e       	or	lr,r12
80009faa:	ee 1e 80 00 	eorh	lr,0x8000
80009fae:	f1 be 04 20 	satu	lr,0x1
80009fb2:	1c 0a       	add	r10,lr
80009fb4:	5c 0b       	acr	r11
80009fb6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009fba <__avr32_f64_add_opH_nan_or_inf>:
80009fba:	b5 cb       	cbr	r11,0x14
80009fbc:	f7 ea 10 0e 	or	lr,r11,r10
80009fc0:	c1 01       	brne	80009fe0 <__avr32_f64_add_return_nan>
80009fc2:	e0 46 07 ff 	cp.w	r6,2047
80009fc6:	c0 30       	breq	80009fcc <__avr32_f64_add_opL_nan_or_inf>
80009fc8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009fcc <__avr32_f64_add_opL_nan_or_inf>:
80009fcc:	b5 c9       	cbr	r9,0x14
80009fce:	f3 e8 10 0e 	or	lr,r9,r8
80009fd2:	c0 71       	brne	80009fe0 <__avr32_f64_add_return_nan>
80009fd4:	30 0a       	mov	r10,0
80009fd6:	fc 1b 7f f0 	movh	r11,0x7ff0
80009fda:	18 4b       	or	r11,r12
80009fdc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009fe0 <__avr32_f64_add_return_nan>:
80009fe0:	3f fa       	mov	r10,-1
80009fe2:	3f fb       	mov	r11,-1
80009fe4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009fe8 <__avr32_f64_add_longshift>:
80009fe8:	f1 b6 04 c0 	satu	r6,0x6
80009fec:	f0 0e 17 00 	moveq	lr,r8
80009ff0:	c0 60       	breq	80009ffc <__avr32_f64_add_longshift+0x14>
80009ff2:	f2 05 09 4e 	lsl	lr,r9,r5
80009ff6:	58 08       	cp.w	r8,0
80009ff8:	5f 18       	srne	r8
80009ffa:	10 4e       	or	lr,r8
80009ffc:	f2 06 0a 48 	lsr	r8,r9,r6
8000a000:	30 09       	mov	r9,0
8000a002:	cc 8b       	rjmp	80009f92 <__avr32_f64_add_shift_done>

8000a004 <__avr32_f64_add_res_of>:
8000a004:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000a008:	a1 9b       	lsr	r11,0x1
8000a00a:	5d 0a       	ror	r10
8000a00c:	5d 0e       	ror	lr
8000a00e:	2f f7       	sub	r7,-1
8000a010:	e0 47 07 ff 	cp.w	r7,2047
8000a014:	f9 ba 00 00 	moveq	r10,0
8000a018:	f9 bb 00 00 	moveq	r11,0
8000a01c:	f9 be 00 00 	moveq	lr,0
8000a020:	cb fb       	rjmp	80009f9e <__avr32_f64_add_res_of_done>

8000a022 <__avr32_f64_add_op2_subnormal>:
8000a022:	30 16       	mov	r6,1
8000a024:	58 07       	cp.w	r7,0
8000a026:	ca 01       	brne	80009f66 <__avr32_f64_add+0x3e>
8000a028:	b5 cb       	cbr	r11,0x14
8000a02a:	10 0a       	add	r10,r8
8000a02c:	f6 09 00 4b 	adc	r11,r11,r9
8000a030:	18 4b       	or	r11,r12
8000a032:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	...

8000a038 <__avr32_f64_to_u32>:
8000a038:	58 0b       	cp.w	r11,0
8000a03a:	5e 6d       	retmi	0

8000a03c <__avr32_f64_to_s32>:
8000a03c:	f6 0c 15 01 	lsl	r12,r11,0x1
8000a040:	b5 9c       	lsr	r12,0x15
8000a042:	e0 2c 03 ff 	sub	r12,1023
8000a046:	5e 3d       	retlo	0
8000a048:	f8 0c 11 1f 	rsub	r12,r12,31
8000a04c:	16 99       	mov	r9,r11
8000a04e:	ab 7b       	lsl	r11,0xb
8000a050:	bf bb       	sbr	r11,0x1f
8000a052:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000a056:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000a05a:	a1 79       	lsl	r9,0x1
8000a05c:	5e 2b       	reths	r11
8000a05e:	5c 3b       	neg	r11
8000a060:	5e fb       	retal	r11

8000a062 <__avr32_u32_to_f64>:
8000a062:	f8 cb 00 00 	sub	r11,r12,0
8000a066:	30 0c       	mov	r12,0
8000a068:	c0 38       	rjmp	8000a06e <__avr32_s32_to_f64+0x4>

8000a06a <__avr32_s32_to_f64>:
8000a06a:	18 9b       	mov	r11,r12
8000a06c:	5c 4b       	abs	r11
8000a06e:	30 0a       	mov	r10,0
8000a070:	5e 0b       	reteq	r11
8000a072:	d4 01       	pushm	lr
8000a074:	e0 69 04 1e 	mov	r9,1054
8000a078:	f6 08 12 00 	clz	r8,r11
8000a07c:	c1 70       	breq	8000a0aa <__avr32_s32_to_f64+0x40>
8000a07e:	c0 c3       	brcs	8000a096 <__avr32_s32_to_f64+0x2c>
8000a080:	f0 0e 11 20 	rsub	lr,r8,32
8000a084:	f6 08 09 4b 	lsl	r11,r11,r8
8000a088:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a08c:	1c 4b       	or	r11,lr
8000a08e:	f4 08 09 4a 	lsl	r10,r10,r8
8000a092:	10 19       	sub	r9,r8
8000a094:	c0 b8       	rjmp	8000a0aa <__avr32_s32_to_f64+0x40>
8000a096:	f4 08 12 00 	clz	r8,r10
8000a09a:	f9 b8 03 00 	movlo	r8,0
8000a09e:	f7 b8 02 e0 	subhs	r8,-32
8000a0a2:	f4 08 09 4b 	lsl	r11,r10,r8
8000a0a6:	30 0a       	mov	r10,0
8000a0a8:	10 19       	sub	r9,r8
8000a0aa:	58 09       	cp.w	r9,0
8000a0ac:	e0 89 00 30 	brgt	8000a10c <__avr32_s32_to_f64+0xa2>
8000a0b0:	5c 39       	neg	r9
8000a0b2:	2f f9       	sub	r9,-1
8000a0b4:	e0 49 00 36 	cp.w	r9,54
8000a0b8:	c0 43       	brcs	8000a0c0 <__avr32_s32_to_f64+0x56>
8000a0ba:	30 0b       	mov	r11,0
8000a0bc:	30 0a       	mov	r10,0
8000a0be:	c2 68       	rjmp	8000a10a <__avr32_s32_to_f64+0xa0>
8000a0c0:	2f 69       	sub	r9,-10
8000a0c2:	f2 08 11 20 	rsub	r8,r9,32
8000a0c6:	e0 49 00 20 	cp.w	r9,32
8000a0ca:	c0 b2       	brcc	8000a0e0 <__avr32_s32_to_f64+0x76>
8000a0cc:	f4 08 09 4e 	lsl	lr,r10,r8
8000a0d0:	f6 08 09 48 	lsl	r8,r11,r8
8000a0d4:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a0d8:	f6 09 0a 4b 	lsr	r11,r11,r9
8000a0dc:	10 4b       	or	r11,r8
8000a0de:	c0 88       	rjmp	8000a0ee <__avr32_s32_to_f64+0x84>
8000a0e0:	f6 08 09 4e 	lsl	lr,r11,r8
8000a0e4:	14 4e       	or	lr,r10
8000a0e6:	16 9a       	mov	r10,r11
8000a0e8:	30 0b       	mov	r11,0
8000a0ea:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a0ee:	ed ba 00 00 	bld	r10,0x0
8000a0f2:	c0 92       	brcc	8000a104 <__avr32_s32_to_f64+0x9a>
8000a0f4:	1c 7e       	tst	lr,lr
8000a0f6:	c0 41       	brne	8000a0fe <__avr32_s32_to_f64+0x94>
8000a0f8:	ed ba 00 01 	bld	r10,0x1
8000a0fc:	c0 42       	brcc	8000a104 <__avr32_s32_to_f64+0x9a>
8000a0fe:	2f fa       	sub	r10,-1
8000a100:	f7 bb 02 ff 	subhs	r11,-1
8000a104:	5c fc       	rol	r12
8000a106:	5d 0b       	ror	r11
8000a108:	5d 0a       	ror	r10
8000a10a:	d8 02       	popm	pc
8000a10c:	e0 68 03 ff 	mov	r8,1023
8000a110:	ed ba 00 0b 	bld	r10,0xb
8000a114:	f7 b8 00 ff 	subeq	r8,-1
8000a118:	10 0a       	add	r10,r8
8000a11a:	5c 0b       	acr	r11
8000a11c:	f7 b9 03 fe 	sublo	r9,-2
8000a120:	e0 49 07 ff 	cp.w	r9,2047
8000a124:	c0 55       	brlt	8000a12e <__avr32_s32_to_f64+0xc4>
8000a126:	30 0a       	mov	r10,0
8000a128:	fc 1b ff e0 	movh	r11,0xffe0
8000a12c:	c0 c8       	rjmp	8000a144 <__floatsidf_return_op1>
8000a12e:	ed bb 00 1f 	bld	r11,0x1f
8000a132:	f7 b9 01 01 	subne	r9,1
8000a136:	ab 9a       	lsr	r10,0xb
8000a138:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a13c:	a1 7b       	lsl	r11,0x1
8000a13e:	ab 9b       	lsr	r11,0xb
8000a140:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000a144 <__floatsidf_return_op1>:
8000a144:	a1 7c       	lsl	r12,0x1
8000a146:	5d 0b       	ror	r11
8000a148:	d8 02       	popm	pc

8000a14a <__avr32_f64_cmp_eq>:
8000a14a:	10 3a       	cp.w	r10,r8
8000a14c:	f2 0b 13 00 	cpc	r11,r9
8000a150:	c0 80       	breq	8000a160 <__avr32_f64_cmp_eq+0x16>
8000a152:	a1 7b       	lsl	r11,0x1
8000a154:	a1 79       	lsl	r9,0x1
8000a156:	14 4b       	or	r11,r10
8000a158:	12 4b       	or	r11,r9
8000a15a:	10 4b       	or	r11,r8
8000a15c:	5e 0f       	reteq	1
8000a15e:	5e fd       	retal	0
8000a160:	a1 7b       	lsl	r11,0x1
8000a162:	fc 1c ff e0 	movh	r12,0xffe0
8000a166:	58 0a       	cp.w	r10,0
8000a168:	f8 0b 13 00 	cpc	r11,r12
8000a16c:	5e 8f       	retls	1
8000a16e:	5e fd       	retal	0

8000a170 <__avr32_f64_cmp_ge>:
8000a170:	1a de       	st.w	--sp,lr
8000a172:	1a d7       	st.w	--sp,r7
8000a174:	a1 7b       	lsl	r11,0x1
8000a176:	5f 3c       	srlo	r12
8000a178:	a1 79       	lsl	r9,0x1
8000a17a:	5f 37       	srlo	r7
8000a17c:	5c fc       	rol	r12
8000a17e:	fc 1e ff e0 	movh	lr,0xffe0
8000a182:	58 0a       	cp.w	r10,0
8000a184:	fc 0b 13 00 	cpc	r11,lr
8000a188:	e0 8b 00 1d 	brhi	8000a1c2 <__avr32_f64_cmp_ge+0x52>
8000a18c:	58 08       	cp.w	r8,0
8000a18e:	fc 09 13 00 	cpc	r9,lr
8000a192:	e0 8b 00 18 	brhi	8000a1c2 <__avr32_f64_cmp_ge+0x52>
8000a196:	58 0b       	cp.w	r11,0
8000a198:	f5 ba 00 00 	subfeq	r10,0
8000a19c:	c1 50       	breq	8000a1c6 <__avr32_f64_cmp_ge+0x56>
8000a19e:	1b 07       	ld.w	r7,sp++
8000a1a0:	1b 0e       	ld.w	lr,sp++
8000a1a2:	58 3c       	cp.w	r12,3
8000a1a4:	c0 a0       	breq	8000a1b8 <__avr32_f64_cmp_ge+0x48>
8000a1a6:	58 1c       	cp.w	r12,1
8000a1a8:	c0 33       	brcs	8000a1ae <__avr32_f64_cmp_ge+0x3e>
8000a1aa:	5e 0f       	reteq	1
8000a1ac:	5e 1d       	retne	0
8000a1ae:	10 3a       	cp.w	r10,r8
8000a1b0:	f2 0b 13 00 	cpc	r11,r9
8000a1b4:	5e 2f       	reths	1
8000a1b6:	5e 3d       	retlo	0
8000a1b8:	14 38       	cp.w	r8,r10
8000a1ba:	f6 09 13 00 	cpc	r9,r11
8000a1be:	5e 2f       	reths	1
8000a1c0:	5e 3d       	retlo	0
8000a1c2:	1b 07       	ld.w	r7,sp++
8000a1c4:	d8 0a       	popm	pc,r12=0
8000a1c6:	58 17       	cp.w	r7,1
8000a1c8:	5f 0c       	sreq	r12
8000a1ca:	58 09       	cp.w	r9,0
8000a1cc:	f5 b8 00 00 	subfeq	r8,0
8000a1d0:	1b 07       	ld.w	r7,sp++
8000a1d2:	1b 0e       	ld.w	lr,sp++
8000a1d4:	5e 0f       	reteq	1
8000a1d6:	5e fc       	retal	r12

8000a1d8 <__avr32_f64_cmp_lt>:
8000a1d8:	1a de       	st.w	--sp,lr
8000a1da:	1a d7       	st.w	--sp,r7
8000a1dc:	a1 7b       	lsl	r11,0x1
8000a1de:	5f 3c       	srlo	r12
8000a1e0:	a1 79       	lsl	r9,0x1
8000a1e2:	5f 37       	srlo	r7
8000a1e4:	5c fc       	rol	r12
8000a1e6:	fc 1e ff e0 	movh	lr,0xffe0
8000a1ea:	58 0a       	cp.w	r10,0
8000a1ec:	fc 0b 13 00 	cpc	r11,lr
8000a1f0:	e0 8b 00 1d 	brhi	8000a22a <__avr32_f64_cmp_lt+0x52>
8000a1f4:	58 08       	cp.w	r8,0
8000a1f6:	fc 09 13 00 	cpc	r9,lr
8000a1fa:	e0 8b 00 18 	brhi	8000a22a <__avr32_f64_cmp_lt+0x52>
8000a1fe:	58 0b       	cp.w	r11,0
8000a200:	f5 ba 00 00 	subfeq	r10,0
8000a204:	c1 50       	breq	8000a22e <__avr32_f64_cmp_lt+0x56>
8000a206:	1b 07       	ld.w	r7,sp++
8000a208:	1b 0e       	ld.w	lr,sp++
8000a20a:	58 3c       	cp.w	r12,3
8000a20c:	c0 a0       	breq	8000a220 <__avr32_f64_cmp_lt+0x48>
8000a20e:	58 1c       	cp.w	r12,1
8000a210:	c0 33       	brcs	8000a216 <__avr32_f64_cmp_lt+0x3e>
8000a212:	5e 0d       	reteq	0
8000a214:	5e 1f       	retne	1
8000a216:	10 3a       	cp.w	r10,r8
8000a218:	f2 0b 13 00 	cpc	r11,r9
8000a21c:	5e 2d       	reths	0
8000a21e:	5e 3f       	retlo	1
8000a220:	14 38       	cp.w	r8,r10
8000a222:	f6 09 13 00 	cpc	r9,r11
8000a226:	5e 2d       	reths	0
8000a228:	5e 3f       	retlo	1
8000a22a:	1b 07       	ld.w	r7,sp++
8000a22c:	d8 0a       	popm	pc,r12=0
8000a22e:	58 17       	cp.w	r7,1
8000a230:	5f 1c       	srne	r12
8000a232:	58 09       	cp.w	r9,0
8000a234:	f5 b8 00 00 	subfeq	r8,0
8000a238:	1b 07       	ld.w	r7,sp++
8000a23a:	1b 0e       	ld.w	lr,sp++
8000a23c:	5e 0d       	reteq	0
8000a23e:	5e fc       	retal	r12

8000a240 <__avr32_f64_div>:
8000a240:	eb cd 40 ff 	pushm	r0-r7,lr
8000a244:	f7 e9 20 0e 	eor	lr,r11,r9
8000a248:	f6 07 16 14 	lsr	r7,r11,0x14
8000a24c:	a9 7b       	lsl	r11,0x9
8000a24e:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000a252:	a9 7a       	lsl	r10,0x9
8000a254:	bd bb       	sbr	r11,0x1d
8000a256:	e4 1b 3f ff 	andh	r11,0x3fff
8000a25a:	ab d7       	cbr	r7,0xb
8000a25c:	e0 80 00 cc 	breq	8000a3f4 <__avr32_f64_div_round_subnormal+0x54>
8000a260:	e0 47 07 ff 	cp.w	r7,2047
8000a264:	e0 84 00 b5 	brge	8000a3ce <__avr32_f64_div_round_subnormal+0x2e>
8000a268:	f2 06 16 14 	lsr	r6,r9,0x14
8000a26c:	a9 79       	lsl	r9,0x9
8000a26e:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000a272:	a9 78       	lsl	r8,0x9
8000a274:	bd b9       	sbr	r9,0x1d
8000a276:	e4 19 3f ff 	andh	r9,0x3fff
8000a27a:	ab d6       	cbr	r6,0xb
8000a27c:	e0 80 00 e2 	breq	8000a440 <__avr32_f64_div_round_subnormal+0xa0>
8000a280:	e0 46 07 ff 	cp.w	r6,2047
8000a284:	e0 84 00 b2 	brge	8000a3e8 <__avr32_f64_div_round_subnormal+0x48>
8000a288:	0c 17       	sub	r7,r6
8000a28a:	fe 37 fc 01 	sub	r7,-1023
8000a28e:	fc 1c 80 00 	movh	r12,0x8000
8000a292:	f8 03 16 01 	lsr	r3,r12,0x1
8000a296:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000a29a:	5c d4       	com	r4
8000a29c:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000a2a0:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a2a4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a2a8:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a2ac:	ea 03 15 02 	lsl	r3,r5,0x2
8000a2b0:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a2b4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a2b8:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a2bc:	ea 03 15 02 	lsl	r3,r5,0x2
8000a2c0:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a2c4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a2c8:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a2cc:	ea 03 15 02 	lsl	r3,r5,0x2
8000a2d0:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a2d4:	e4 09 07 40 	macu.d	r0,r2,r9
8000a2d8:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a2dc:	02 04       	add	r4,r1
8000a2de:	5c 05       	acr	r5
8000a2e0:	a3 65       	lsl	r5,0x2
8000a2e2:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000a2e6:	a3 64       	lsl	r4,0x2
8000a2e8:	5c 34       	neg	r4
8000a2ea:	f8 05 01 45 	sbc	r5,r12,r5
8000a2ee:	e6 04 06 40 	mulu.d	r0,r3,r4
8000a2f2:	e4 05 07 40 	macu.d	r0,r2,r5
8000a2f6:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a2fa:	02 04       	add	r4,r1
8000a2fc:	5c 05       	acr	r5
8000a2fe:	ea 03 15 02 	lsl	r3,r5,0x2
8000a302:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000a306:	e8 02 15 02 	lsl	r2,r4,0x2
8000a30a:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a30e:	e4 09 07 40 	macu.d	r0,r2,r9
8000a312:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a316:	02 04       	add	r4,r1
8000a318:	5c 05       	acr	r5
8000a31a:	a3 65       	lsl	r5,0x2
8000a31c:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000a320:	a3 64       	lsl	r4,0x2
8000a322:	5c 34       	neg	r4
8000a324:	f8 05 01 45 	sbc	r5,r12,r5
8000a328:	e6 04 06 40 	mulu.d	r0,r3,r4
8000a32c:	e4 05 07 40 	macu.d	r0,r2,r5
8000a330:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a334:	02 04       	add	r4,r1
8000a336:	5c 05       	acr	r5
8000a338:	ea 03 15 02 	lsl	r3,r5,0x2
8000a33c:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000a340:	e8 02 15 02 	lsl	r2,r4,0x2
8000a344:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000a348:	e4 0b 07 40 	macu.d	r0,r2,r11
8000a34c:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000a350:	02 02       	add	r2,r1
8000a352:	5c 03       	acr	r3
8000a354:	ed b3 00 1c 	bld	r3,0x1c
8000a358:	c0 90       	breq	8000a36a <__avr32_f64_div+0x12a>
8000a35a:	a1 72       	lsl	r2,0x1
8000a35c:	5c f3       	rol	r3
8000a35e:	20 17       	sub	r7,1
8000a360:	a3 9a       	lsr	r10,0x3
8000a362:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000a366:	a3 9b       	lsr	r11,0x3
8000a368:	c0 58       	rjmp	8000a372 <__avr32_f64_div+0x132>
8000a36a:	a5 8a       	lsr	r10,0x4
8000a36c:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000a370:	a5 8b       	lsr	r11,0x4
8000a372:	58 07       	cp.w	r7,0
8000a374:	e0 8a 00 8b 	brle	8000a48a <__avr32_f64_div_res_subnormal>
8000a378:	e0 12 ff 00 	andl	r2,0xff00
8000a37c:	e8 12 00 80 	orl	r2,0x80
8000a380:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a384:	e4 09 07 40 	macu.d	r0,r2,r9
8000a388:	e4 08 06 44 	mulu.d	r4,r2,r8
8000a38c:	e6 09 06 48 	mulu.d	r8,r3,r9
8000a390:	00 05       	add	r5,r0
8000a392:	f0 01 00 48 	adc	r8,r8,r1
8000a396:	5c 09       	acr	r9
8000a398:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000a39c:	58 04       	cp.w	r4,0
8000a39e:	5c 25       	cpc	r5

8000a3a0 <__avr32_f64_div_round_subnormal>:
8000a3a0:	f4 08 13 00 	cpc	r8,r10
8000a3a4:	f6 09 13 00 	cpc	r9,r11
8000a3a8:	5f 36       	srlo	r6
8000a3aa:	f8 06 17 00 	moveq	r6,r12
8000a3ae:	e4 0a 16 08 	lsr	r10,r2,0x8
8000a3b2:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000a3b6:	e6 0b 16 08 	lsr	r11,r3,0x8
8000a3ba:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a3be:	ed be 00 1f 	bld	lr,0x1f
8000a3c2:	ef bb 00 1f 	bst	r11,0x1f
8000a3c6:	0c 0a       	add	r10,r6
8000a3c8:	5c 0b       	acr	r11
8000a3ca:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a3ce:	e4 1b 00 0f 	andh	r11,0xf
8000a3d2:	14 4b       	or	r11,r10
8000a3d4:	e0 81 00 a7 	brne	8000a522 <__avr32_f64_div_res_subnormal+0x98>
8000a3d8:	f2 06 16 14 	lsr	r6,r9,0x14
8000a3dc:	ab d6       	cbr	r6,0xb
8000a3de:	e0 46 07 ff 	cp.w	r6,2047
8000a3e2:	e0 81 00 a4 	brne	8000a52a <__avr32_f64_div_res_subnormal+0xa0>
8000a3e6:	c9 e8       	rjmp	8000a522 <__avr32_f64_div_res_subnormal+0x98>
8000a3e8:	e4 19 00 0f 	andh	r9,0xf
8000a3ec:	10 49       	or	r9,r8
8000a3ee:	e0 81 00 9a 	brne	8000a522 <__avr32_f64_div_res_subnormal+0x98>
8000a3f2:	c9 28       	rjmp	8000a516 <__avr32_f64_div_res_subnormal+0x8c>
8000a3f4:	a3 7b       	lsl	r11,0x3
8000a3f6:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000a3fa:	a3 7a       	lsl	r10,0x3
8000a3fc:	f5 eb 10 04 	or	r4,r10,r11
8000a400:	e0 80 00 a0 	breq	8000a540 <__avr32_f64_div_op1_zero>
8000a404:	f6 04 12 00 	clz	r4,r11
8000a408:	c1 70       	breq	8000a436 <__avr32_f64_div_round_subnormal+0x96>
8000a40a:	c0 c3       	brcs	8000a422 <__avr32_f64_div_round_subnormal+0x82>
8000a40c:	e8 05 11 20 	rsub	r5,r4,32
8000a410:	f6 04 09 4b 	lsl	r11,r11,r4
8000a414:	f4 05 0a 45 	lsr	r5,r10,r5
8000a418:	0a 4b       	or	r11,r5
8000a41a:	f4 04 09 4a 	lsl	r10,r10,r4
8000a41e:	08 17       	sub	r7,r4
8000a420:	c0 b8       	rjmp	8000a436 <__avr32_f64_div_round_subnormal+0x96>
8000a422:	f4 04 12 00 	clz	r4,r10
8000a426:	f9 b4 03 00 	movlo	r4,0
8000a42a:	f7 b4 02 e0 	subhs	r4,-32
8000a42e:	f4 04 09 4b 	lsl	r11,r10,r4
8000a432:	30 0a       	mov	r10,0
8000a434:	08 17       	sub	r7,r4
8000a436:	a3 8a       	lsr	r10,0x2
8000a438:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000a43c:	a3 8b       	lsr	r11,0x2
8000a43e:	c1 1b       	rjmp	8000a260 <__avr32_f64_div+0x20>
8000a440:	a3 79       	lsl	r9,0x3
8000a442:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000a446:	a3 78       	lsl	r8,0x3
8000a448:	f3 e8 10 04 	or	r4,r9,r8
8000a44c:	c6 f0       	breq	8000a52a <__avr32_f64_div_res_subnormal+0xa0>
8000a44e:	f2 04 12 00 	clz	r4,r9
8000a452:	c1 70       	breq	8000a480 <__avr32_f64_div_round_subnormal+0xe0>
8000a454:	c0 c3       	brcs	8000a46c <__avr32_f64_div_round_subnormal+0xcc>
8000a456:	e8 05 11 20 	rsub	r5,r4,32
8000a45a:	f2 04 09 49 	lsl	r9,r9,r4
8000a45e:	f0 05 0a 45 	lsr	r5,r8,r5
8000a462:	0a 49       	or	r9,r5
8000a464:	f0 04 09 48 	lsl	r8,r8,r4
8000a468:	08 16       	sub	r6,r4
8000a46a:	c0 b8       	rjmp	8000a480 <__avr32_f64_div_round_subnormal+0xe0>
8000a46c:	f0 04 12 00 	clz	r4,r8
8000a470:	f9 b4 03 00 	movlo	r4,0
8000a474:	f7 b4 02 e0 	subhs	r4,-32
8000a478:	f0 04 09 49 	lsl	r9,r8,r4
8000a47c:	30 08       	mov	r8,0
8000a47e:	08 16       	sub	r6,r4
8000a480:	a3 88       	lsr	r8,0x2
8000a482:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000a486:	a3 89       	lsr	r9,0x2
8000a488:	cf ca       	rjmp	8000a280 <__avr32_f64_div+0x40>

8000a48a <__avr32_f64_div_res_subnormal>:
8000a48a:	5c 37       	neg	r7
8000a48c:	2f f7       	sub	r7,-1
8000a48e:	f1 b7 04 c0 	satu	r7,0x6
8000a492:	e0 47 00 20 	cp.w	r7,32
8000a496:	c1 54       	brge	8000a4c0 <__avr32_f64_div_res_subnormal+0x36>
8000a498:	ee 06 11 20 	rsub	r6,r7,32
8000a49c:	e4 07 0a 42 	lsr	r2,r2,r7
8000a4a0:	e6 06 09 4c 	lsl	r12,r3,r6
8000a4a4:	18 42       	or	r2,r12
8000a4a6:	e6 07 0a 43 	lsr	r3,r3,r7
8000a4aa:	f4 06 09 41 	lsl	r1,r10,r6
8000a4ae:	f4 07 0a 4a 	lsr	r10,r10,r7
8000a4b2:	f6 06 09 4c 	lsl	r12,r11,r6
8000a4b6:	18 4a       	or	r10,r12
8000a4b8:	f6 07 0a 4b 	lsr	r11,r11,r7
8000a4bc:	30 00       	mov	r0,0
8000a4be:	c1 58       	rjmp	8000a4e8 <__avr32_f64_div_res_subnormal+0x5e>
8000a4c0:	ee 06 11 20 	rsub	r6,r7,32
8000a4c4:	f9 b0 00 00 	moveq	r0,0
8000a4c8:	f9 bc 00 00 	moveq	r12,0
8000a4cc:	c0 50       	breq	8000a4d6 <__avr32_f64_div_res_subnormal+0x4c>
8000a4ce:	f4 06 09 40 	lsl	r0,r10,r6
8000a4d2:	f6 06 09 4c 	lsl	r12,r11,r6
8000a4d6:	e6 07 0a 42 	lsr	r2,r3,r7
8000a4da:	30 03       	mov	r3,0
8000a4dc:	f4 07 0a 41 	lsr	r1,r10,r7
8000a4e0:	18 41       	or	r1,r12
8000a4e2:	f6 07 0a 4a 	lsr	r10,r11,r7
8000a4e6:	30 0b       	mov	r11,0
8000a4e8:	e0 12 ff 00 	andl	r2,0xff00
8000a4ec:	e8 12 00 80 	orl	r2,0x80
8000a4f0:	e6 08 06 46 	mulu.d	r6,r3,r8
8000a4f4:	e4 09 07 46 	macu.d	r6,r2,r9
8000a4f8:	e4 08 06 44 	mulu.d	r4,r2,r8
8000a4fc:	e6 09 06 48 	mulu.d	r8,r3,r9
8000a500:	0c 05       	add	r5,r6
8000a502:	f0 07 00 48 	adc	r8,r8,r7
8000a506:	5c 09       	acr	r9
8000a508:	30 07       	mov	r7,0
8000a50a:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000a50e:	00 34       	cp.w	r4,r0
8000a510:	e2 05 13 00 	cpc	r5,r1
8000a514:	c4 6b       	rjmp	8000a3a0 <__avr32_f64_div_round_subnormal>
8000a516:	1c 9b       	mov	r11,lr
8000a518:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a51c:	30 0a       	mov	r10,0
8000a51e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a522:	3f fb       	mov	r11,-1
8000a524:	30 0a       	mov	r10,0
8000a526:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a52a:	f5 eb 10 04 	or	r4,r10,r11
8000a52e:	c0 90       	breq	8000a540 <__avr32_f64_div_op1_zero>
8000a530:	1c 9b       	mov	r11,lr
8000a532:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a536:	ea 1b 7f f0 	orh	r11,0x7ff0
8000a53a:	30 0a       	mov	r10,0
8000a53c:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000a540 <__avr32_f64_div_op1_zero>:
8000a540:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000a544:	ce f0       	breq	8000a522 <__avr32_f64_div_res_subnormal+0x98>
8000a546:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000a54a:	e0 44 07 ff 	cp.w	r4,2047
8000a54e:	ce 41       	brne	8000a516 <__avr32_f64_div_res_subnormal+0x8c>
8000a550:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000a554:	ce 10       	breq	8000a516 <__avr32_f64_div_res_subnormal+0x8c>
8000a556:	ce 6b       	rjmp	8000a522 <__avr32_f64_div_res_subnormal+0x98>

8000a558 <__avr32_udiv64>:
8000a558:	d4 31       	pushm	r0-r7,lr
8000a55a:	1a 97       	mov	r7,sp
8000a55c:	20 3d       	sub	sp,12
8000a55e:	10 9c       	mov	r12,r8
8000a560:	12 9e       	mov	lr,r9
8000a562:	14 93       	mov	r3,r10
8000a564:	58 09       	cp.w	r9,0
8000a566:	e0 81 00 bd 	brne	8000a6e0 <__avr32_udiv64+0x188>
8000a56a:	16 38       	cp.w	r8,r11
8000a56c:	e0 88 00 40 	brls	8000a5ec <__avr32_udiv64+0x94>
8000a570:	f0 08 12 00 	clz	r8,r8
8000a574:	c0 d0       	breq	8000a58e <__avr32_udiv64+0x36>
8000a576:	f6 08 09 4b 	lsl	r11,r11,r8
8000a57a:	f0 09 11 20 	rsub	r9,r8,32
8000a57e:	f8 08 09 4c 	lsl	r12,r12,r8
8000a582:	f4 09 0a 49 	lsr	r9,r10,r9
8000a586:	f4 08 09 43 	lsl	r3,r10,r8
8000a58a:	f3 eb 10 0b 	or	r11,r9,r11
8000a58e:	f8 0e 16 10 	lsr	lr,r12,0x10
8000a592:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000a596:	f6 0e 0d 00 	divu	r0,r11,lr
8000a59a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000a59e:	00 99       	mov	r9,r0
8000a5a0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a5a4:	e0 0a 02 48 	mul	r8,r0,r10
8000a5a8:	10 3b       	cp.w	r11,r8
8000a5aa:	c0 a2       	brcc	8000a5be <__avr32_udiv64+0x66>
8000a5ac:	20 19       	sub	r9,1
8000a5ae:	18 0b       	add	r11,r12
8000a5b0:	18 3b       	cp.w	r11,r12
8000a5b2:	c0 63       	brcs	8000a5be <__avr32_udiv64+0x66>
8000a5b4:	10 3b       	cp.w	r11,r8
8000a5b6:	f7 b9 03 01 	sublo	r9,1
8000a5ba:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a5be:	f6 08 01 01 	sub	r1,r11,r8
8000a5c2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000a5c6:	e2 0e 0d 00 	divu	r0,r1,lr
8000a5ca:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000a5ce:	00 98       	mov	r8,r0
8000a5d0:	e0 0a 02 4a 	mul	r10,r0,r10
8000a5d4:	14 33       	cp.w	r3,r10
8000a5d6:	c0 82       	brcc	8000a5e6 <__avr32_udiv64+0x8e>
8000a5d8:	20 18       	sub	r8,1
8000a5da:	18 03       	add	r3,r12
8000a5dc:	18 33       	cp.w	r3,r12
8000a5de:	c0 43       	brcs	8000a5e6 <__avr32_udiv64+0x8e>
8000a5e0:	14 33       	cp.w	r3,r10
8000a5e2:	f7 b8 03 01 	sublo	r8,1
8000a5e6:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000a5ea:	cd f8       	rjmp	8000a7a8 <__avr32_udiv64+0x250>
8000a5ec:	58 08       	cp.w	r8,0
8000a5ee:	c0 51       	brne	8000a5f8 <__avr32_udiv64+0xa0>
8000a5f0:	30 19       	mov	r9,1
8000a5f2:	f2 08 0d 08 	divu	r8,r9,r8
8000a5f6:	10 9c       	mov	r12,r8
8000a5f8:	f8 06 12 00 	clz	r6,r12
8000a5fc:	c0 41       	brne	8000a604 <__avr32_udiv64+0xac>
8000a5fe:	18 1b       	sub	r11,r12
8000a600:	30 19       	mov	r9,1
8000a602:	c4 08       	rjmp	8000a682 <__avr32_udiv64+0x12a>
8000a604:	ec 01 11 20 	rsub	r1,r6,32
8000a608:	f4 01 0a 49 	lsr	r9,r10,r1
8000a60c:	f8 06 09 4c 	lsl	r12,r12,r6
8000a610:	f6 06 09 48 	lsl	r8,r11,r6
8000a614:	f6 01 0a 41 	lsr	r1,r11,r1
8000a618:	f3 e8 10 08 	or	r8,r9,r8
8000a61c:	f8 03 16 10 	lsr	r3,r12,0x10
8000a620:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000a624:	e2 03 0d 00 	divu	r0,r1,r3
8000a628:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a62c:	00 9e       	mov	lr,r0
8000a62e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a632:	e0 05 02 49 	mul	r9,r0,r5
8000a636:	12 3b       	cp.w	r11,r9
8000a638:	c0 a2       	brcc	8000a64c <__avr32_udiv64+0xf4>
8000a63a:	20 1e       	sub	lr,1
8000a63c:	18 0b       	add	r11,r12
8000a63e:	18 3b       	cp.w	r11,r12
8000a640:	c0 63       	brcs	8000a64c <__avr32_udiv64+0xf4>
8000a642:	12 3b       	cp.w	r11,r9
8000a644:	f7 be 03 01 	sublo	lr,1
8000a648:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a64c:	12 1b       	sub	r11,r9
8000a64e:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000a652:	f6 03 0d 02 	divu	r2,r11,r3
8000a656:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000a65a:	04 99       	mov	r9,r2
8000a65c:	e4 05 02 4b 	mul	r11,r2,r5
8000a660:	16 38       	cp.w	r8,r11
8000a662:	c0 a2       	brcc	8000a676 <__avr32_udiv64+0x11e>
8000a664:	20 19       	sub	r9,1
8000a666:	18 08       	add	r8,r12
8000a668:	18 38       	cp.w	r8,r12
8000a66a:	c0 63       	brcs	8000a676 <__avr32_udiv64+0x11e>
8000a66c:	16 38       	cp.w	r8,r11
8000a66e:	f7 b9 03 01 	sublo	r9,1
8000a672:	f1 dc e3 08 	addcs	r8,r8,r12
8000a676:	f4 06 09 43 	lsl	r3,r10,r6
8000a67a:	f0 0b 01 0b 	sub	r11,r8,r11
8000a67e:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000a682:	f8 06 16 10 	lsr	r6,r12,0x10
8000a686:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000a68a:	f6 06 0d 00 	divu	r0,r11,r6
8000a68e:	e6 0b 16 10 	lsr	r11,r3,0x10
8000a692:	00 9a       	mov	r10,r0
8000a694:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a698:	e0 0e 02 48 	mul	r8,r0,lr
8000a69c:	10 3b       	cp.w	r11,r8
8000a69e:	c0 a2       	brcc	8000a6b2 <__avr32_udiv64+0x15a>
8000a6a0:	20 1a       	sub	r10,1
8000a6a2:	18 0b       	add	r11,r12
8000a6a4:	18 3b       	cp.w	r11,r12
8000a6a6:	c0 63       	brcs	8000a6b2 <__avr32_udiv64+0x15a>
8000a6a8:	10 3b       	cp.w	r11,r8
8000a6aa:	f7 ba 03 01 	sublo	r10,1
8000a6ae:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a6b2:	f6 08 01 01 	sub	r1,r11,r8
8000a6b6:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000a6ba:	e2 06 0d 00 	divu	r0,r1,r6
8000a6be:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000a6c2:	00 98       	mov	r8,r0
8000a6c4:	e0 0e 02 4b 	mul	r11,r0,lr
8000a6c8:	16 33       	cp.w	r3,r11
8000a6ca:	c0 82       	brcc	8000a6da <__avr32_udiv64+0x182>
8000a6cc:	20 18       	sub	r8,1
8000a6ce:	18 03       	add	r3,r12
8000a6d0:	18 33       	cp.w	r3,r12
8000a6d2:	c0 43       	brcs	8000a6da <__avr32_udiv64+0x182>
8000a6d4:	16 33       	cp.w	r3,r11
8000a6d6:	f7 b8 03 01 	sublo	r8,1
8000a6da:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000a6de:	c6 98       	rjmp	8000a7b0 <__avr32_udiv64+0x258>
8000a6e0:	16 39       	cp.w	r9,r11
8000a6e2:	e0 8b 00 65 	brhi	8000a7ac <__avr32_udiv64+0x254>
8000a6e6:	f2 09 12 00 	clz	r9,r9
8000a6ea:	c0 b1       	brne	8000a700 <__avr32_udiv64+0x1a8>
8000a6ec:	10 3a       	cp.w	r10,r8
8000a6ee:	5f 2a       	srhs	r10
8000a6f0:	1c 3b       	cp.w	r11,lr
8000a6f2:	5f b8       	srhi	r8
8000a6f4:	10 4a       	or	r10,r8
8000a6f6:	f2 0a 18 00 	cp.b	r10,r9
8000a6fa:	c5 90       	breq	8000a7ac <__avr32_udiv64+0x254>
8000a6fc:	30 18       	mov	r8,1
8000a6fe:	c5 98       	rjmp	8000a7b0 <__avr32_udiv64+0x258>
8000a700:	f0 09 09 46 	lsl	r6,r8,r9
8000a704:	f2 03 11 20 	rsub	r3,r9,32
8000a708:	fc 09 09 4e 	lsl	lr,lr,r9
8000a70c:	f0 03 0a 48 	lsr	r8,r8,r3
8000a710:	f6 09 09 4c 	lsl	r12,r11,r9
8000a714:	f4 03 0a 42 	lsr	r2,r10,r3
8000a718:	ef 46 ff f4 	st.w	r7[-12],r6
8000a71c:	f6 03 0a 43 	lsr	r3,r11,r3
8000a720:	18 42       	or	r2,r12
8000a722:	f1 ee 10 0c 	or	r12,r8,lr
8000a726:	f8 01 16 10 	lsr	r1,r12,0x10
8000a72a:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000a72e:	e6 01 0d 04 	divu	r4,r3,r1
8000a732:	e4 03 16 10 	lsr	r3,r2,0x10
8000a736:	08 9e       	mov	lr,r4
8000a738:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000a73c:	e8 06 02 48 	mul	r8,r4,r6
8000a740:	10 33       	cp.w	r3,r8
8000a742:	c0 a2       	brcc	8000a756 <__avr32_udiv64+0x1fe>
8000a744:	20 1e       	sub	lr,1
8000a746:	18 03       	add	r3,r12
8000a748:	18 33       	cp.w	r3,r12
8000a74a:	c0 63       	brcs	8000a756 <__avr32_udiv64+0x1fe>
8000a74c:	10 33       	cp.w	r3,r8
8000a74e:	f7 be 03 01 	sublo	lr,1
8000a752:	e7 dc e3 03 	addcs	r3,r3,r12
8000a756:	10 13       	sub	r3,r8
8000a758:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000a75c:	e6 01 0d 00 	divu	r0,r3,r1
8000a760:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a764:	00 98       	mov	r8,r0
8000a766:	e0 06 02 46 	mul	r6,r0,r6
8000a76a:	0c 3b       	cp.w	r11,r6
8000a76c:	c0 a2       	brcc	8000a780 <__avr32_udiv64+0x228>
8000a76e:	20 18       	sub	r8,1
8000a770:	18 0b       	add	r11,r12
8000a772:	18 3b       	cp.w	r11,r12
8000a774:	c0 63       	brcs	8000a780 <__avr32_udiv64+0x228>
8000a776:	0c 3b       	cp.w	r11,r6
8000a778:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a77c:	f7 b8 03 01 	sublo	r8,1
8000a780:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000a784:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000a788:	0c 1b       	sub	r11,r6
8000a78a:	f0 04 06 42 	mulu.d	r2,r8,r4
8000a78e:	06 95       	mov	r5,r3
8000a790:	16 35       	cp.w	r5,r11
8000a792:	e0 8b 00 0a 	brhi	8000a7a6 <__avr32_udiv64+0x24e>
8000a796:	5f 0b       	sreq	r11
8000a798:	f4 09 09 49 	lsl	r9,r10,r9
8000a79c:	12 32       	cp.w	r2,r9
8000a79e:	5f b9       	srhi	r9
8000a7a0:	f7 e9 00 09 	and	r9,r11,r9
8000a7a4:	c0 60       	breq	8000a7b0 <__avr32_udiv64+0x258>
8000a7a6:	20 18       	sub	r8,1
8000a7a8:	30 09       	mov	r9,0
8000a7aa:	c0 38       	rjmp	8000a7b0 <__avr32_udiv64+0x258>
8000a7ac:	30 09       	mov	r9,0
8000a7ae:	12 98       	mov	r8,r9
8000a7b0:	10 9a       	mov	r10,r8
8000a7b2:	12 93       	mov	r3,r9
8000a7b4:	10 92       	mov	r2,r8
8000a7b6:	12 9b       	mov	r11,r9
8000a7b8:	2f dd       	sub	sp,-12
8000a7ba:	d8 32       	popm	r0-r7,pc

8000a7bc <__avr32_umod64>:
8000a7bc:	d4 31       	pushm	r0-r7,lr
8000a7be:	1a 97       	mov	r7,sp
8000a7c0:	20 3d       	sub	sp,12
8000a7c2:	10 9c       	mov	r12,r8
8000a7c4:	12 95       	mov	r5,r9
8000a7c6:	14 9e       	mov	lr,r10
8000a7c8:	16 91       	mov	r1,r11
8000a7ca:	16 96       	mov	r6,r11
8000a7cc:	58 09       	cp.w	r9,0
8000a7ce:	e0 81 00 81 	brne	8000a8d0 <__avr32_umod64+0x114>
8000a7d2:	16 38       	cp.w	r8,r11
8000a7d4:	e0 88 00 12 	brls	8000a7f8 <__avr32_umod64+0x3c>
8000a7d8:	f0 08 12 00 	clz	r8,r8
8000a7dc:	c4 e0       	breq	8000a878 <__avr32_umod64+0xbc>
8000a7de:	f6 08 09 46 	lsl	r6,r11,r8
8000a7e2:	f8 08 09 4c 	lsl	r12,r12,r8
8000a7e6:	f0 0b 11 20 	rsub	r11,r8,32
8000a7ea:	f4 08 09 4e 	lsl	lr,r10,r8
8000a7ee:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000a7f2:	f7 e6 10 06 	or	r6,r11,r6
8000a7f6:	c4 18       	rjmp	8000a878 <__avr32_umod64+0xbc>
8000a7f8:	58 08       	cp.w	r8,0
8000a7fa:	c0 51       	brne	8000a804 <__avr32_umod64+0x48>
8000a7fc:	30 19       	mov	r9,1
8000a7fe:	f2 08 0d 08 	divu	r8,r9,r8
8000a802:	10 9c       	mov	r12,r8
8000a804:	f8 08 12 00 	clz	r8,r12
8000a808:	c0 31       	brne	8000a80e <__avr32_umod64+0x52>
8000a80a:	18 16       	sub	r6,r12
8000a80c:	c3 68       	rjmp	8000a878 <__avr32_umod64+0xbc>
8000a80e:	f0 03 11 20 	rsub	r3,r8,32
8000a812:	f4 03 0a 4b 	lsr	r11,r10,r3
8000a816:	f8 08 09 4c 	lsl	r12,r12,r8
8000a81a:	ec 08 09 49 	lsl	r9,r6,r8
8000a81e:	ec 03 0a 43 	lsr	r3,r6,r3
8000a822:	f7 e9 10 09 	or	r9,r11,r9
8000a826:	f8 05 16 10 	lsr	r5,r12,0x10
8000a82a:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000a82e:	e6 05 0d 02 	divu	r2,r3,r5
8000a832:	f2 0e 16 10 	lsr	lr,r9,0x10
8000a836:	ec 02 02 4b 	mul	r11,r6,r2
8000a83a:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000a83e:	16 3e       	cp.w	lr,r11
8000a840:	c0 72       	brcc	8000a84e <__avr32_umod64+0x92>
8000a842:	18 0e       	add	lr,r12
8000a844:	18 3e       	cp.w	lr,r12
8000a846:	c0 43       	brcs	8000a84e <__avr32_umod64+0x92>
8000a848:	16 3e       	cp.w	lr,r11
8000a84a:	fd dc e3 0e 	addcs	lr,lr,r12
8000a84e:	fc 0b 01 03 	sub	r3,lr,r11
8000a852:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000a856:	e6 05 0d 02 	divu	r2,r3,r5
8000a85a:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000a85e:	a5 36       	mul	r6,r2
8000a860:	0c 39       	cp.w	r9,r6
8000a862:	c0 72       	brcc	8000a870 <__avr32_umod64+0xb4>
8000a864:	18 09       	add	r9,r12
8000a866:	18 39       	cp.w	r9,r12
8000a868:	c0 43       	brcs	8000a870 <__avr32_umod64+0xb4>
8000a86a:	0c 39       	cp.w	r9,r6
8000a86c:	f3 dc e3 09 	addcs	r9,r9,r12
8000a870:	f2 06 01 06 	sub	r6,r9,r6
8000a874:	f4 08 09 4e 	lsl	lr,r10,r8
8000a878:	f8 0a 16 10 	lsr	r10,r12,0x10
8000a87c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000a880:	ec 0a 0d 02 	divu	r2,r6,r10
8000a884:	fc 09 16 10 	lsr	r9,lr,0x10
8000a888:	ea 02 02 4b 	mul	r11,r5,r2
8000a88c:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000a890:	16 39       	cp.w	r9,r11
8000a892:	c0 72       	brcc	8000a8a0 <__avr32_umod64+0xe4>
8000a894:	18 09       	add	r9,r12
8000a896:	18 39       	cp.w	r9,r12
8000a898:	c0 43       	brcs	8000a8a0 <__avr32_umod64+0xe4>
8000a89a:	16 39       	cp.w	r9,r11
8000a89c:	f3 dc e3 09 	addcs	r9,r9,r12
8000a8a0:	f2 0b 01 0b 	sub	r11,r9,r11
8000a8a4:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000a8a8:	f6 0a 0d 0a 	divu	r10,r11,r10
8000a8ac:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000a8b0:	ea 0a 02 4a 	mul	r10,r5,r10
8000a8b4:	14 3e       	cp.w	lr,r10
8000a8b6:	c0 72       	brcc	8000a8c4 <__avr32_umod64+0x108>
8000a8b8:	18 0e       	add	lr,r12
8000a8ba:	18 3e       	cp.w	lr,r12
8000a8bc:	c0 43       	brcs	8000a8c4 <__avr32_umod64+0x108>
8000a8be:	14 3e       	cp.w	lr,r10
8000a8c0:	fd dc e3 0e 	addcs	lr,lr,r12
8000a8c4:	fc 0a 01 0a 	sub	r10,lr,r10
8000a8c8:	30 0b       	mov	r11,0
8000a8ca:	f4 08 0a 4a 	lsr	r10,r10,r8
8000a8ce:	c7 b8       	rjmp	8000a9c4 <__avr32_umod64+0x208>
8000a8d0:	16 39       	cp.w	r9,r11
8000a8d2:	e0 8b 00 79 	brhi	8000a9c4 <__avr32_umod64+0x208>
8000a8d6:	f2 09 12 00 	clz	r9,r9
8000a8da:	c1 21       	brne	8000a8fe <__avr32_umod64+0x142>
8000a8dc:	10 3a       	cp.w	r10,r8
8000a8de:	5f 2b       	srhs	r11
8000a8e0:	0a 31       	cp.w	r1,r5
8000a8e2:	5f ba       	srhi	r10
8000a8e4:	f7 ea 10 0a 	or	r10,r11,r10
8000a8e8:	f2 0a 18 00 	cp.b	r10,r9
8000a8ec:	c0 60       	breq	8000a8f8 <__avr32_umod64+0x13c>
8000a8ee:	fc 08 01 0c 	sub	r12,lr,r8
8000a8f2:	e2 05 01 46 	sbc	r6,r1,r5
8000a8f6:	18 9e       	mov	lr,r12
8000a8f8:	0c 9b       	mov	r11,r6
8000a8fa:	1c 9a       	mov	r10,lr
8000a8fc:	c6 48       	rjmp	8000a9c4 <__avr32_umod64+0x208>
8000a8fe:	ea 09 09 4c 	lsl	r12,r5,r9
8000a902:	f2 06 11 20 	rsub	r6,r9,32
8000a906:	f6 09 09 4b 	lsl	r11,r11,r9
8000a90a:	f0 09 09 42 	lsl	r2,r8,r9
8000a90e:	ef 46 ff f4 	st.w	r7[-12],r6
8000a912:	f0 06 0a 48 	lsr	r8,r8,r6
8000a916:	18 48       	or	r8,r12
8000a918:	e2 06 0a 4c 	lsr	r12,r1,r6
8000a91c:	f4 09 09 43 	lsl	r3,r10,r9
8000a920:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000a924:	f4 06 0a 4a 	lsr	r10,r10,r6
8000a928:	16 4a       	or	r10,r11
8000a92a:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a92e:	f8 0b 0d 04 	divu	r4,r12,r11
8000a932:	f4 0c 16 10 	lsr	r12,r10,0x10
8000a936:	08 91       	mov	r1,r4
8000a938:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000a93c:	e8 0e 02 46 	mul	r6,r4,lr
8000a940:	0c 3c       	cp.w	r12,r6
8000a942:	c0 a2       	brcc	8000a956 <__avr32_umod64+0x19a>
8000a944:	20 11       	sub	r1,1
8000a946:	10 0c       	add	r12,r8
8000a948:	10 3c       	cp.w	r12,r8
8000a94a:	c0 63       	brcs	8000a956 <__avr32_umod64+0x19a>
8000a94c:	0c 3c       	cp.w	r12,r6
8000a94e:	f7 b1 03 01 	sublo	r1,1
8000a952:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000a956:	0c 1c       	sub	r12,r6
8000a958:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000a95c:	f8 0b 0d 04 	divu	r4,r12,r11
8000a960:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000a964:	08 96       	mov	r6,r4
8000a966:	e8 0e 02 4e 	mul	lr,r4,lr
8000a96a:	1c 3b       	cp.w	r11,lr
8000a96c:	c0 a2       	brcc	8000a980 <__avr32_umod64+0x1c4>
8000a96e:	20 16       	sub	r6,1
8000a970:	10 0b       	add	r11,r8
8000a972:	10 3b       	cp.w	r11,r8
8000a974:	c0 63       	brcs	8000a980 <__avr32_umod64+0x1c4>
8000a976:	1c 3b       	cp.w	r11,lr
8000a978:	f7 b6 03 01 	sublo	r6,1
8000a97c:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000a980:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000a984:	1c 1b       	sub	r11,lr
8000a986:	e2 02 06 40 	mulu.d	r0,r1,r2
8000a98a:	00 9e       	mov	lr,r0
8000a98c:	02 9c       	mov	r12,r1
8000a98e:	16 3c       	cp.w	r12,r11
8000a990:	e0 8b 00 08 	brhi	8000a9a0 <__avr32_umod64+0x1e4>
8000a994:	5f 06       	sreq	r6
8000a996:	06 30       	cp.w	r0,r3
8000a998:	5f ba       	srhi	r10
8000a99a:	ed ea 00 0a 	and	r10,r6,r10
8000a99e:	c0 60       	breq	8000a9aa <__avr32_umod64+0x1ee>
8000a9a0:	fc 02 01 04 	sub	r4,lr,r2
8000a9a4:	f8 08 01 4c 	sbc	r12,r12,r8
8000a9a8:	08 9e       	mov	lr,r4
8000a9aa:	e6 0e 01 0a 	sub	r10,r3,lr
8000a9ae:	f6 0c 01 4c 	sbc	r12,r11,r12
8000a9b2:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000a9b6:	f8 09 0a 4b 	lsr	r11,r12,r9
8000a9ba:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a9be:	f8 01 09 4c 	lsl	r12,r12,r1
8000a9c2:	18 4a       	or	r10,r12
8000a9c4:	2f dd       	sub	sp,-12
8000a9c6:	d8 32       	popm	r0-r7,pc

8000a9c8 <__do_global_ctors_aux>:
8000a9c8:	d4 21       	pushm	r4-r7,lr
8000a9ca:	48 57       	lddpc	r7,8000a9dc <__do_global_ctors_aux+0x14>
8000a9cc:	c0 28       	rjmp	8000a9d0 <__do_global_ctors_aux+0x8>
8000a9ce:	5d 18       	icall	r8
8000a9d0:	20 47       	sub	r7,4
8000a9d2:	6e 08       	ld.w	r8,r7[0x0]
8000a9d4:	5b f8       	cp.w	r8,-1
8000a9d6:	cf c1       	brne	8000a9ce <__do_global_ctors_aux+0x6>
8000a9d8:	d8 22       	popm	r4-r7,pc
8000a9da:	00 00       	add	r0,r0
8000a9dc:	00 00       	add	r0,r0
8000a9de:	00 0c       	add	r12,r0

Disassembly of section .exception:

8000aa00 <_evba>:
8000aa00:	c0 08       	rjmp	8000aa00 <_evba>
	...

8000aa04 <_handle_TLB_Multiple_Hit>:
8000aa04:	c0 08       	rjmp	8000aa04 <_handle_TLB_Multiple_Hit>
	...

8000aa08 <_handle_Bus_Error_Data_Fetch>:
8000aa08:	c0 08       	rjmp	8000aa08 <_handle_Bus_Error_Data_Fetch>
	...

8000aa0c <_handle_Bus_Error_Instruction_Fetch>:
8000aa0c:	c0 08       	rjmp	8000aa0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000aa10 <_handle_NMI>:
8000aa10:	c0 08       	rjmp	8000aa10 <_handle_NMI>
	...

8000aa14 <_handle_Instruction_Address>:
8000aa14:	c0 08       	rjmp	8000aa14 <_handle_Instruction_Address>
	...

8000aa18 <_handle_ITLB_Protection>:
8000aa18:	c0 08       	rjmp	8000aa18 <_handle_ITLB_Protection>
	...

8000aa1c <_handle_Breakpoint>:
8000aa1c:	c0 08       	rjmp	8000aa1c <_handle_Breakpoint>
	...

8000aa20 <_handle_Illegal_Opcode>:
8000aa20:	c0 08       	rjmp	8000aa20 <_handle_Illegal_Opcode>
	...

8000aa24 <_handle_Unimplemented_Instruction>:
8000aa24:	c0 08       	rjmp	8000aa24 <_handle_Unimplemented_Instruction>
	...

8000aa28 <_handle_Privilege_Violation>:
8000aa28:	c0 08       	rjmp	8000aa28 <_handle_Privilege_Violation>
	...

8000aa2c <_handle_Floating_Point>:
8000aa2c:	c0 08       	rjmp	8000aa2c <_handle_Floating_Point>
	...

8000aa30 <_handle_Coprocessor_Absent>:
8000aa30:	c0 08       	rjmp	8000aa30 <_handle_Coprocessor_Absent>
	...

8000aa34 <_handle_Data_Address_Read>:
8000aa34:	c0 08       	rjmp	8000aa34 <_handle_Data_Address_Read>
	...

8000aa38 <_handle_Data_Address_Write>:
8000aa38:	c0 08       	rjmp	8000aa38 <_handle_Data_Address_Write>
	...

8000aa3c <_handle_DTLB_Protection_Read>:
8000aa3c:	c0 08       	rjmp	8000aa3c <_handle_DTLB_Protection_Read>
	...

8000aa40 <_handle_DTLB_Protection_Write>:
8000aa40:	c0 08       	rjmp	8000aa40 <_handle_DTLB_Protection_Write>
	...

8000aa44 <_handle_DTLB_Modified>:
8000aa44:	c0 08       	rjmp	8000aa44 <_handle_DTLB_Modified>
	...

8000aa50 <_handle_ITLB_Miss>:
8000aa50:	c0 08       	rjmp	8000aa50 <_handle_ITLB_Miss>
	...

8000aa60 <_handle_DTLB_Miss_Read>:
8000aa60:	c0 08       	rjmp	8000aa60 <_handle_DTLB_Miss_Read>
	...

8000aa70 <_handle_DTLB_Miss_Write>:
8000aa70:	c0 08       	rjmp	8000aa70 <_handle_DTLB_Miss_Write>
	...

8000ab00 <_handle_Supervisor_Call>:
8000ab00:	49 3f       	lddpc	pc,8000ab4c <ipr_val+0x10>
	...

8000ab04 <_int0>:
8000ab04:	30 0c       	mov	r12,0
8000ab06:	f0 1f 00 13 	mcall	8000ab50 <ipr_val+0x14>
8000ab0a:	58 0c       	cp.w	r12,0
8000ab0c:	f8 0f 17 10 	movne	pc,r12
8000ab10:	d6 03       	rete

8000ab12 <_int1>:
8000ab12:	30 1c       	mov	r12,1
8000ab14:	f0 1f 00 0f 	mcall	8000ab50 <ipr_val+0x14>
8000ab18:	58 0c       	cp.w	r12,0
8000ab1a:	f8 0f 17 10 	movne	pc,r12
8000ab1e:	d6 03       	rete

8000ab20 <_int2>:
8000ab20:	30 2c       	mov	r12,2
8000ab22:	f0 1f 00 0c 	mcall	8000ab50 <ipr_val+0x14>
8000ab26:	58 0c       	cp.w	r12,0
8000ab28:	f8 0f 17 10 	movne	pc,r12
8000ab2c:	d6 03       	rete

8000ab2e <_int3>:
8000ab2e:	30 3c       	mov	r12,3
8000ab30:	f0 1f 00 08 	mcall	8000ab50 <ipr_val+0x14>
8000ab34:	58 0c       	cp.w	r12,0
8000ab36:	f8 0f 17 10 	movne	pc,r12
8000ab3a:	d6 03       	rete

8000ab3c <ipr_val>:
8000ab3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8000ab4c:	80 00 41 90 80 00 22 90 00 00 00 00 00 00 00 00     ..A...".........
	...

Disassembly of section .fini:

8000ac00 <_fini>:
8000ac00:	eb cd 40 40 	pushm	r6,lr
8000ac04:	48 26       	lddpc	r6,8000ac0c <_fini+0xc>
8000ac06:	1e 26       	rsub	r6,pc
8000ac08:	c0 48       	rjmp	8000ac10 <_fini+0x10>
8000ac0a:	00 00       	add	r0,r0
8000ac0c:	80 00       	ld.sh	r0,r0[0x0]
8000ac0e:	ab ea       	*unknown*
8000ac10:	f0 16 00 02 	mcall	r6[8]
8000ac14:	e3 cd 80 40 	ldm	sp++,r6,pc
